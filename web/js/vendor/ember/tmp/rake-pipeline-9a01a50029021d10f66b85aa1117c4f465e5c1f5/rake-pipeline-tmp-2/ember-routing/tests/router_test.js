minispade.register('ember-routing/~tests/router_test', "(function() {module(\"router.urlForEvent\");\n\nvar namespace = {\n  \"Component\": {\n    toString: function() { return \"Component\"; },\n    find: function() { return { id: 1 }; }\n  }\n};\n\nvar location = {\n  formatURL: function(url) {\n    return '#!#' + url;\n  },\n\n  setURL: function(url) {\n    this.url = url;\n  }\n};\n\nvar get = Ember.get;\n\ntest(\"router.urlForEvent looks in the current state's eventTransitions hash\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n\n        showDashboard: function(router) {\n          router.transitionTo('dashboard');\n        },\n\n        eventTransitions: {\n          showDashboard: 'dashboard'\n        }\n      }),\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the router is in root.index\");\n\n  var url = router.urlForEvent('showDashboard');\n  equal(url, \"#!#/dashboard\");\n});\n\ntest(\"router.urlForEvent looks in the eventTransitions hashes of the current state's ancestors\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      eventTransitions: {\n        showDashboard: 'dashboard'\n      },\n\n      index: Ember.Route.create({\n        route: '/'\n      }),\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the router is in root.index\");\n\n  var url = router.urlForEvent('showDashboard');\n  equal(url, \"#!#/dashboard\");\n});\n\ntest(\"router.urlForEvent works with a context\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n\n        showDashboard: function(router) {\n          router.transitionTo('dashboard');\n        },\n\n        eventTransitions: {\n          showDashboard: 'dashboard'\n        }\n      }),\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard/:component_id'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the router is in root.index\");\n\n  var url = router.urlForEvent('showDashboard', { id: 1 });\n  equal(url, \"#!#/dashboard/1\");\n});\n\ntest(\"router.urlForEvent works with multiple contexts\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n\n        showDashboard: function(router) {\n          router.transitionTo('dashboard');\n        },\n\n        eventTransitions: {\n          showComment: 'post.comment'\n        }\n      }),\n\n      post: Ember.Route.create({\n        route: '/post/:post_id',\n\n        comment: Ember.Route.create({\n          route: '/comment/:comment_id'\n        })\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the router is in root.index\");\n\n  var url = router.urlForEvent('showComment', { post_id: 1 }, { comment_id: 2 });\n  equal(url, \"#!#/post/1/comment/2\");\n});\n\ntest(\"router.urlForEvent works with changing context in the current state\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/'\n      }),\n\n      showDashboard: function(router) {\n        router.transitionTo('dashboard');\n      },\n\n      eventTransitions: {\n        showDashboard: 'dashboard'\n      },\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard/:component_id'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/dashboard/1');\n  });\n\n  equal(router.get('currentState.path'), \"root.dashboard\", \"precond - the router is in root.dashboard\");\n\n  var url = router.urlForEvent('showDashboard', { id: 2 });\n  equal(url, \"#!#/dashboard/2\");\n});\n\n\ntest(\"router.urlForEvent works for nested routes with a context\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n\n        showDashboardActivity: function(router) {\n          router.transitionTo('dashboard.activity');\n        },\n\n        eventTransitions: {\n          showDashboardActivity: 'dashboard.activity'\n        }\n      }),\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard/:component_id',\n\n        activity: Ember.Route.create({\n          route: '/activity'\n        })\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the router is in root.index\");\n\n  var url = router.urlForEvent('showDashboardActivity', { id: 1 });\n  equal(url, \"#!#/dashboard/1/activity\");\n});\n\n\ntest(\"router.urlForEvent works with Ember.State.transitionTo\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n\n        showDashboard: Ember.Route.transitionTo('dashboard')\n      }),\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard/:component_id'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the router is in root.index\");\n\n  var url = router.urlForEvent('showDashboard', { id: 1 });\n  equal(url, \"#!#/dashboard/1\");\n});\n\ntest(\"rerouting doesn't exit all the way out\", function() {\n  var exited = 0;\n\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n        showDashboard: Ember.Route.transitionTo('dashboard.index')\n      }),\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard',\n\n        exit: function() {\n          exited++;\n        },\n\n        index: Ember.Route.create({\n          route: '/',\n          showComponent: Ember.Route.transitionTo('component')\n        }),\n\n        component: Ember.Route.create({\n          route: '/:component_id',\n          showIndex: Ember.Route.transitionTo('index')\n        })\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the router is in root.index\");\n\n  Ember.run(function() {\n    router.send('showDashboard');\n  });\n\n  equal(router.get('currentState.path'), \"root.dashboard.index\", \"precond - the router is in root.dashboard.index\");\n  equal(exited, 0, \"the dashboard hasn't been exited yet\");\n\n  Ember.run(function() {\n    router.send('showComponent', { id: 1 });\n  });\n\n  equal(router.get('currentState.path'), \"root.dashboard.component\", \"precond - the router is in root.index\");\n  equal(exited, 0, \"moving around shouldn't gratuitously exit states\");\n\n  Ember.run(function() {\n    router.route('/dashboard');\n  });\n\n  equal(router.get('currentState.path'), \"root.dashboard.index\", \"the router is in root.dashboard.index\");\n  equal(exited, 0, \"moving around shouldn't gratuitously exit states\");\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"the router is in root.dashboard.index\");\n  equal(exited, 1, \"now, the exit was called\");\n\n  Ember.run(function() {\n    router.route('/dashboard/1');\n  });\n\n  exited = 0;\n  equal(router.get('currentState.path'), \"root.dashboard.component\", \"the router is in root.dashboard.index\");\n  equal(exited, 0, \"exit wasn't called now\");\n});\n\ntest(\"should be able to unroute out of a state with context\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      components: Ember.Route.create({\n        route: '/components',\n\n        show: Ember.Route.create({\n          route: '/:component_id',\n\n          index: Ember.Route.create({\n            route: '/'\n          }),\n\n          edit: Ember.Route.create({\n            route: '/edit'\n          })\n        })\n      })\n    })\n  });\n\n  router.route('/components/1/edit');\n  equal(get(router, 'currentState.path'), 'root.components.show.edit', \"should go to the correct state\");\n\n  router.route('/components/1');\n  equal(get(router, 'currentState.path'), 'root.components.show.index', \"should go to the correct state\");\n});\n\ntest(\"should be able to route with initialState\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      initialState: 'stateOne',\n\n      stateOne: Ember.Route.create({\n        route: '/state_one'\n      }),\n\n      stateTwo: Ember.Route.create({\n        route: '/state_two'\n      })\n    })\n  });\n\n  equal(get(router, 'currentState.path'), 'root.stateOne', \"should be in stateOne\");\n\n  router.route('/state_two');\n\n  equal(get(router, 'currentState.path'), 'root.stateTwo', \"should be in stateTwo\");\n});\n\ntest(\"should update route for redirections\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n        redirectsTo: 'login'\n      }),\n\n      login: Ember.Route.create({\n        route: '/login'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(location.url, '/login');\n});\n\ntest(\"respects initialState if leafRoute with child states\", function() {\n  var router = Ember.Router.create({\n    location: location,\n    namespace: namespace,\n    root: Ember.Route.create({\n      foo: Ember.Route.create({\n        route: '/foo',\n\n        initialState: 'bar',\n\n        bar: Ember.State.create()\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/foo');\n  });\n\n  equal(location.url, '/foo');\n  equal(router.get('currentState.name'), 'bar');\n});\n\n})();\n//@ sourceURL=ember-routing/~tests/router_test");