minispade.register('ember-routing/~tests/location_test', "(function() {var locationObject;\nvar realPushState, realHistoryState;\n\nmodule(\"Ember.Location, hash implementation\", {\n  setup: function() {\n    locationObject = Ember.Location.create({\n      implementation: 'hash'\n    });\n    locationObject.setURL(\"/\");\n\n    // make sure the onhashchange event fires\n    stop();\n    // There are weird issues in FF 3.6 if we pass start itself as the parameter\n    setTimeout(function(){ start(); }, 1);\n  },\n\n  teardown: function() {\n    window.location.hash = \"\";\n    Ember.run(function(){\n      locationObject.destroy();\n    });\n  }\n});\n\ntest(\"it is possible to get the current URL\", function() {\n  equal(locationObject.getURL(), \"/\", \"the initial URL is '/'\");\n  equal(window.location.hash, \"#/\", \"the initial hash is '#/'\");\n});\n\ntest(\"it is possible to set the current URL\", function() {\n  locationObject.setURL(\"/foo\");\n  equal(locationObject.getURL(), \"/foo\", \"the updated URL is '/'\");\n  equal(window.location.hash, \"#/foo\", \"the updated hash is '#/foo'\");\n});\n\ntest(\"if the hash changes, the onUpdateURL callback is invoked\", function() {\n  stop();\n\n  locationObject.onUpdateURL(function(url) {\n    start();\n\n    equal(url, '/foo/bar', \"the callback is invoked with the URL\");\n  });\n\n  window.location.hash = \"#/foo/bar\";\n});\n\ntest(\"if the URL is set, it doesn't trigger the hashchange event\", function() {\n  stop();\n\n  var count = 0;\n\n  setTimeout(function() {\n    start();\n    equal(count, 0, \"The update callback was not called\");\n  }, 100);\n\n  locationObject.onUpdateURL(function(url) {\n    count++;\n  });\n\n  locationObject.setURL('/avoid/triggering');\n});\n\nmodule(\"Ember.Location, history implementation\", {\n  setup: function() {\n    realHistoryState = window.history.state;\n    realPushState = window.history.pushState;\n    locationObject = Ember.Location.create({\n      implementation: 'history'\n    });\n\n    stop();\n    setTimeout(start, 1);\n  },\n\n  teardown: function() {\n    window.history.pushState = realPushState;\n    window.history.state = realHistoryState;\n    Ember.run(function() {\n      locationObject.destroy();\n    });\n  }\n});\n\ntest(\"it is possible to get the current URL\", function() {\n  equal(locationObject.getURL(), window.location.pathname, \"current URL is set\");\n});\n\ntest(\"it is possible to set the current URL\", function() {\n  var setPath;\n  window.history.pushState = function(data, title, path) {\n    setPath = path;\n  };\n  locationObject.setURL(\"/foo\");\n  equal(setPath, \"/foo\", \"the updated URL is '/foo'\");\n});\n\ntest(\"if the URL is set, it doesn't trigger the popstate event\", function() {\n  expect(1);\n\n  stop();\n  var count = 0;\n  window.history.pushState = function(data, title, path) {};\n\n  setTimeout(function() {\n    start();\n    equal(count, 0, \"The update callback was not called\");\n  }, 100);\n\n  locationObject.onUpdateURL(function(url) {\n    count++;\n  });\n\n  locationObject.setURL('/avoid/triggering');\n});\n\ntest(\"if history is used, it triggers the popstate event\", function() {\n  expect(1);\n\n  stop();\n  var count = 0;\n\n  setTimeout(function() {\n    start();\n    equal(count, 1, \"The update callback was not called\");\n  }, 300);\n\n  locationObject.onUpdateURL(function(url) {\n    count++;\n  });\n\n  window.history.back();\n});\n\ntest(\"doesn't push a state if path has not changed\", function() {\n  expect(1);\n  stop();\n\n  var count = 0;\n  window.history.pushState = function(data, title, path) {\n    count++;\n  };\n\n  setTimeout(function() {\n    start();\n    equal(count, 0, \"pushState should not have been called\");\n  }, 100);\n\n  locationObject.setURL(window.location.pathname);\n});\n\ntest(\"it calls pushState if at initialURL and history.state does not exist\", function() {\n  expect(1);\n  stop();\n\n  var count = 0;\n  window.history.pushState = function() {\n    count++;\n  };\n\n  setTimeout(function() {\n    start();\n    equal(count, 1, \"pushState should have been called\");\n  }, 100);\n\n  locationObject.set('_initialURL', window.location.pathname);\n  locationObject.setURL('/test');\n});\n\ntest(\"it handles an empty path as root\", function() {\n  equal(locationObject.formatPath(''), '/', \"The formatted url is '/'\");\n});\n\ntest(\"it prepends rootURL to path\", function() {\n  var setPath;\n\n  window.history.pushState = function(data, title, path) {\n    setPath = path;\n  };\n\n  locationObject.set('rootURL', '/test');\n  locationObject.setURL(\"/foo\");\n\n  equal(setPath, '/test/foo', \"The updated url is '/test/foot'\");\n});\n\n})();\n//@ sourceURL=ember-routing/~tests/location_test");