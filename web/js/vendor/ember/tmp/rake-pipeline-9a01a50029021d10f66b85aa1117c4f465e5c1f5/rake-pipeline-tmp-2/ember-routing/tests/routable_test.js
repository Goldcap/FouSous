minispade.register('ember-routing/~tests/routable_test', "(function() {module(\"Ember.Routable\");\n\ntest(\"it should have its updateRoute method called when it is entered\", function() {\n  var locationStub = { };\n\n  expect(2);\n\n  var state = Ember.Route.create({\n    route: 'foo',\n    updateRoute: function(manager, location) {\n      ok(true, \"updateRoute was called\");\n      strictEqual(location, locationStub);\n    }\n  });\n\n  var router = Ember.Router.create({\n    location: locationStub,\n    root: Ember.Route.create({\n      ready: function(manager) {\n        manager.transitionTo('initial');\n      },\n\n      initial: state\n    })\n  });\n\n  router.send('ready');\n});\n\ntest(\"a RouteMatcher matches routes\", function() {\n  var match;\n\n  var matcher = Ember._RouteMatcher.create({\n    route: \"foo\"\n  });\n\n  match = matcher.match('foo');\n  equal(match.remaining, \"\");\n  equal(match.hash, null);\n\n  match = matcher.match('foo/bar');\n  equal(match.remaining, \"/bar\");\n  equal(match.hash, null);\n\n  match = matcher.match('bar');\n  equal(match, undefined);\n});\n\ntest(\"a RouteMatcher matches routes with dynamic segments\", function() {\n  var match;\n\n  var matcher = Ember._RouteMatcher.create({\n    route: \"foo/:id/:name/:ok_tom\"\n  });\n\n  match = matcher.match('foo/bar/baz/sigh');\n  equal(match.remaining, \"\");\n  deepEqual(match.hash, {\"id\": \"bar\", \"name\": \"baz\", \"ok_tom\": \"sigh\"});\n\n  match = matcher.match('foo/bar/baz/common/bro');\n  equal(match.remaining, \"/bro\");\n  deepEqual(match.hash, {\"id\": \"bar\", \"name\": \"baz\", \"ok_tom\": \"common\"});\n\n  match = matcher.match('foo/bar');\n  equal(match, undefined);\n});\n\ntest(\"a RouteMatcher generates routes with dynamic segments\", function() {\n  var url;\n\n  var matcher = Ember._RouteMatcher.create({\n    route: \"foo/:id/:first_name\"\n  });\n\n  url = matcher.generate({ id: 1, first_name: \"Yehuda\" });\n  equal(url, \"foo/1/Yehuda\");\n});\n\ntest(\"route repeatedly descends into a nested hierarchy\", function() {\n  var state = Ember.Route.create({\n    fooChild: Ember.Route.create({\n      route: 'foo',\n\n      barChild: Ember.Route.create({\n        route: 'bar',\n\n        bazChild: Ember.Route.create({\n          route: 'baz'\n        })\n      })\n    })\n  });\n\n  var router = Ember.Router.create({\n    location: 'none',\n    root: state\n  });\n\n  router.route(\"/foo/bar/baz\");\n\n  equal(router.get('currentState.path'), 'root.fooChild.barChild.bazChild');\n});\n\ntest(\"when you descend into a state, the route is set\", function() {\n  var state = Ember.Route.create({\n    ready: function(manager) {\n      manager.transitionTo('fooChild.barChild.bazChild');\n    },\n\n    fooChild: Ember.Route.create({\n      route: 'foo',\n\n      barChild: Ember.Route.create({\n        route: 'bar',\n\n        bazChild: Ember.Route.create({\n          route: 'baz'\n        })\n      })\n    })\n  });\n\n  var count = 0;\n\n  var router = Ember.Router.create({\n    root: state,\n    location: {\n      setURL: function(url) {\n        if (count === 0) {\n          equal(url, '/foo/bar/baz', \"The current URL should be passed in\");\n          count++;\n        } else {\n          ok(false, \"Should not get here\");\n        }\n      }\n    }\n  });\n\n  router.send('ready');\n});\n\ntest(\"when you descend into a state, the route is set even when child states (not routes) are present\", function() {\n  var state = Ember.Route.create({\n    ready: function(manager) {\n      manager.transitionTo('fooChild.barChild.bazChild');\n    },\n\n    fooChild: Ember.Route.create({\n      route: 'foo',\n\n      barChild: Ember.Route.create({\n        route: 'bar',\n\n        bazChild: Ember.Route.create({\n          route: 'baz',\n\n          basicState: Ember.State.create()\n        })\n      })\n    })\n  });\n\n  var count = 0;\n\n  var router = Ember.Router.create({\n    root: state,\n    location: {\n      setURL: function(url) {\n        if (count === 0) {\n          equal(url, '/foo/bar/baz', \"The current URL should be passed in\");\n          count++;\n        } else {\n          ok(false, \"Should not get here\");\n        }\n      }\n    }\n  });\n\n  router.send('ready');\n});\n\nvar router;\nvar Post = {\n  find: function(id) {\n    return { isPerson: true, id: parseInt(id, 10) };\n  }\n};\n\nvar setURL;\nvar locationMock = {\n  setURL: function(url) {\n    setURL = url;\n  }\n};\n\nmodule(\"Routing Serialization and Deserialization\", {\n  setup: function() {\n    router = Ember.Router.create({\n      location: locationMock,\n      root: Ember.Route.create({\n        ready: function(manager, post) {\n          manager.transitionTo('post.show', { post: post });\n        },\n\n        showIndex: function(manager) {\n          manager.transitionTo('post.index');\n        },\n\n        post: Ember.Route.create({\n          route: '/posts',\n\n          index: Ember.Route.create({\n            route: '/',\n\n            showPost: function(manager, post) {\n              manager.transitionTo('post.show', { post: post });\n            }\n          }),\n\n          show: Ember.Route.create({\n            route: \"/:post_id\",\n\n            connectOutlets: function(manager, context) {\n              equal(context.post.id, 2, \"should be the same value regardless of entry point\");\n            },\n\n            deserialize: function(manager, params) {\n              return { post: Post.find(params['post_id']) };\n            },\n\n            serialize: function(manager, hash) {\n              return { post_id: hash.post.id };\n            },\n\n            showIndex: function(manager) {\n              manager.transitionTo('index');\n            }\n          })\n        })\n      })\n    });\n  }\n});\n\ntest(\"should invoke the deserialize method on a state when it is entered via a URL\", function() {\n  expect(1);\n\n  router.route('/posts/2');\n});\n\ntest(\"should invoke the serialize method on a state when it is entered programmatically (initially deep)\", function() {\n  expect(3);\n\n  router.send('ready', Post.find(2));\n  equal(setURL, '/posts/2', \"The post is serialized\");\n\n  router.send('showIndex');\n  equal(setURL, '/posts');\n});\n\ntest(\"should invoke the serialize method on a state when it is entered programmatically (initially shallow)\", function() {\n  expect(3);\n\n  router.send('showIndex');\n  equal(setURL, '/posts', \"The post is serialized\");\n\n  router.send('showPost', Post.find(2));\n  equal(setURL, '/posts/2');\n});\n\nvar url, firstPost, firstUser;\n\nmodule(\"default serialize and deserialize with modelType\", {\n  setup: function() {\n    window.TestApp = Ember.Namespace.create();\n    window.TestApp.Post = Ember.Object.extend();\n    window.TestApp.Post.find = function(id) {\n      if (id === \"1\") { return firstPost; }\n    };\n\n    window.TestApp.User = Ember.Object.extend();\n    window.TestApp.User.find = function(id) {\n      if (id === \"1\") { return firstUser; }\n    };\n\n    firstPost = window.TestApp.Post.create({ id: 1 });\n    firstUser = window.TestApp.User.create({ id: 1 });\n\n    router = Ember.Router.create({\n      location: {\n        setURL: function(passedURL) {\n          url = passedURL;\n        }\n      },\n\n      root: Ember.Route.extend({\n        post: Ember.Route.extend({\n          route: '/posts/:post_id',\n          modelType: 'TestApp.Post',\n\n          connectOutlets: function(router, post) {\n            equal(post, firstPost, \"the post should have deserialized correctly\");\n          }\n        }),\n\n        user: Ember.Route.extend({\n          route: '/users/:user_id',\n          modelType: window.TestApp.User,\n\n          connectOutlets: function(router, user) {\n            equal(user, firstUser, \"the post should have deserialized correctly\");\n          }\n        })\n      })\n    });\n  },\n\n  teardown: function() {\n    window.TestApp = undefined;\n  }\n});\n\ntest(\"should use a specified String `modelType` in the default `serialize`\", function() {\n  router.transitionTo('post', firstPost);\n  equal(url, \"/posts/1\");\n});\n\ntest(\"should use a specified String `modelType` in the default `deserialize`\", function() {\n  expect(1);\n\n  router.route(\"/posts/1\");\n});\n\ntest(\"should use a specified class `modelType` in the default `serialize`\", function() {\n  router.transitionTo('user', firstUser);\n  equal(url, \"/users/1\");\n});\n\ntest(\"should use a specified class `modelType` in the default `deserialize`\", function() {\n  expect(1);\n\n  router.route(\"/users/1\");\n});\n\nvar postSuccessCallback, postFailureCallback,\n    userSuccessCallback, userFailureCallback,\n    connectedUser, connectedPost, connectedChild, connectedOther,\n    isLoading, userLoaded;\n\nmodule(\"modelType with promise\", {\n  setup: function() {\n    window.TestApp = Ember.Namespace.create();\n\n    window.TestApp.User = Ember.Object.extend({\n      then: function(success, failure) {\n        userLoaded = true;\n        userSuccessCallback = success;\n        userFailureCallback = failure;\n      }\n    });\n    window.TestApp.User.find = function(id) {\n      if (id === \"1\") {\n        return firstUser;\n      }\n    };\n\n    window.TestApp.Post = Ember.Object.extend({\n      then: function(success, failure) {\n        postSuccessCallback = success;\n        postFailureCallback = failure;\n      }\n    });\n    window.TestApp.Post.find = function(id) {\n      // Simulate dependency on user\n      if (!userLoaded) { return; }\n      if (id === \"1\") { return firstPost; }\n    };\n\n    firstUser = window.TestApp.User.create({ id: 1 });\n    firstPost = window.TestApp.Post.create({ id: 1 });\n\n    router = Ember.Router.create({\n      location: {\n        setURL: function(passedURL) {\n          url = passedURL;\n        }\n      },\n\n      root: Ember.Route.extend({\n        users: Ember.Route.extend({\n          route: '/users',\n\n          user: Ember.Route.extend({\n            route: '/:user_id',\n            modelType: 'TestApp.User',\n\n            connectOutlets: function(router, obj) {\n              connectedUser = obj;\n            },\n\n            posts: Ember.Route.extend({\n              route: '/posts',\n\n              post: Ember.Route.extend({\n                route: '/:post_id',\n                modelType: 'TestApp.Post',\n\n                connectOutlets: function(router, obj) {\n                  connectedPost = obj;\n                },\n\n                show: Ember.Route.extend({\n                  route: '/',\n\n                  connectOutlets: function(router) {\n                    connectedChild = true;\n                  }\n                })\n              })\n            })\n          })\n        }),\n\n        other: Ember.Route.extend({\n          route: '/other',\n\n          connectOutlets: function() {\n            connectedOther = true;\n          }\n        }),\n\n        loading: Ember.State.extend({\n          connectOutlets: function() {\n            isLoading = true;\n          },\n\n          exit: function() {\n            isLoading = false;\n          }\n        })\n      })\n    });\n  },\n\n  teardown: function() {\n    window.TestApp = undefined;\n    postSuccessCallback = postFailureCallback = undefined;\n    userSuccessCallback = userFailureCallback = undefined;\n    connectedUser = connectedPost = connectedChild = connectedOther = undefined;\n    isLoading = userLoaded = undefined;\n  }\n});\n\ntest(\"should handle promise success\", function() {\n  ok(!isLoading, 'precond - should not start loading');\n\n  Ember.run(function() {\n    router.route('/users/1/posts/1');\n  });\n\n  ok(!connectedUser, 'precond - should not connect user immediately');\n  ok(!connectedPost, 'precond - should not connect post immediately');\n  ok(!connectedChild, 'precond - should not connect child immediately');\n  ok(isLoading, 'should be loading');\n\n  Ember.run(function() {\n    userSuccessCallback('loadedUser');\n  });\n\n  ok(!connectedUser, 'should not connect user until all promises are loaded');\n  ok(!connectedPost, 'should not connect post until all promises are loaded');\n  ok(!connectedChild, 'should not connect child until all promises are loaded');\n  ok(isLoading, 'should still be loading');\n\n  Ember.run(function() {\n    postSuccessCallback('loadedPost');\n  });\n\n  equal(connectedUser, 'loadedUser', 'should connect user after success callback');\n  equal(connectedPost, 'loadedPost', 'should connect post after success callback');\n  ok(connectedChild, \"should connect child's outlets after success callback\");\n  ok(!isLoading, 'should not be loading');\n});\n\ntest(\"should handle early promise failure\", function() {\n  router.route('/users/1/posts/1');\n\n  ok(userFailureCallback, 'precond - has failureCallback');\n\n  raises(function() {\n    userFailureCallback('failedUser');\n  }, \"Unable to load record.\", \"should throw exception on failure\");\n\n  ok(!connectedUser, 'should not connect user after early failure');\n  ok(!connectedPost, 'should not connect post after early failure');\n  ok(!connectedChild, 'should not connect child after early failure');\n});\n\ntest(\"should handle late promise failure\", function() {\n  router.route('/users/1/posts/1');\n\n  userSuccessCallback('loadedUser');\n\n  ok(postFailureCallback, 'precond - has failureCallback');\n\n  raises(function() {\n    postFailureCallback('failedPost');\n  }, \"Unable to load record.\", \"should throw exception on failure\");\n\n  ok(!connectedUser, 'should not connect user after late failure');\n  ok(!connectedPost, 'should not connect post after late failure');\n  ok(!connectedChild, 'should not connect child after late failure');\n});\n\ntest(\"should stop promises if new route is targeted\", function() {\n  router.route('/users/1/posts/1');\n\n  userSuccessCallback('loadedUser');\n\n  ok(!connectedOther, 'precond - has not yet connected other');\n\n  Ember.run(function() {\n    router.route('/other');\n  });\n\n  ok(connectedOther, 'should connect other');\n\n  postSuccessCallback('loadedPost');\n\n  ok(!connectedUser, 'should not connect user after reroute');\n  ok(!connectedPost, 'should not connect post after reroute');\n  ok(!connectedChild, 'should not connect child after reroute');\n});\n\ntest(\"should stop promises if transitionTo is called\", function() {\n  router.route('/users/1/posts/1');\n\n  userSuccessCallback('loadedUser');\n\n  ok(!connectedOther, 'precond - has not yet connected other');\n\n  Ember.run(function() {\n    router.transitionTo('other');\n  });\n\n  ok(connectedOther, 'should connect other');\n\n  postSuccessCallback('loadedPost');\n\n  ok(!connectedUser, 'should not connect user after reroute');\n  ok(!connectedPost, 'should not connect post after reroute');\n  ok(!connectedChild, 'should not connect child after reroute');\n});\n\nmodule(\"default serialize and deserialize without modelType\", {\n  setup: function() {\n    window.TestApp = Ember.Namespace.create();\n    window.TestApp.Post = Ember.Object.extend();\n    window.TestApp.Post.find = function(id) {\n      if (id === \"1\") { return firstPost; }\n    };\n\n    firstPost = window.TestApp.Post.create({ id: 1 });\n\n    router = Ember.Router.create({\n      namespace: window.TestApp,\n\n      location: {\n        setURL: function(passedURL) {\n          url = passedURL;\n        }\n      },\n\n      root: Ember.Route.extend({\n        post: Ember.Route.extend({\n          route: '/posts/:post_id',\n\n          connectOutlets: function(router, post) {\n            equal(post, firstPost, \"the post should have deserialized correctly\");\n          }\n        })\n      })\n    });\n  },\n\n  teardown: function() {\n    window.TestApp = undefined;\n  }\n});\n\n\n\ntest(\"should use a specified String `modelType` in the default `serialize`\", function() {\n  router.transitionTo('post', firstPost);\n  equal(url, \"/posts/1\");\n});\n\ntest(\"should use a specified String `modelType` in the default `deserialize`\", function() {\n  expect(1);\n\n  router.route(\"/posts/1\");\n});\n\nmodule(\"redirectsTo\");\n\ntest(\"if a leaf state has a redirectsTo, it automatically transitions into that state\", function() {\n   var router = Ember.Router.create({\n     location: 'none',\n     root: Ember.Route.create({\n\n       index: Ember.Route.create({\n         route: '/',\n         redirectsTo: 'someOtherState'\n       }),\n\n       someOtherState: Ember.Route.create({\n         route: '/other'\n       })\n     })\n  });\n\n  Ember.run(function() {\n    router.route(\"/\");\n  });\n\n  equal(router.get('currentState.path'), \"root.someOtherState\");\n});\n\ntest(\"you cannot define connectOutlets AND redirectsTo\", function() {\n  raises(function() {\n    Ember.Router.create({\n      location: 'none',\n      root: Ember.Route.create({\n        index: Ember.Route.create({\n          route: '/',\n          redirectsTo: 'someOtherState',\n          connectOutlets: function() {}\n        })\n      })\n    });\n  });\n});\n\ntest(\"you cannot have a redirectsTo in a non-leaf state\", function () {\n  raises(function() {\n    Ember.Router.create({\n      location: 'none',\n      root: Ember.Route.create({\n        redirectsTo: 'someOtherState',\n\n        index: Ember.Route.create()\n      })\n    });\n  });\n});\n\nmodule(\"urlFor\");\n\nvar formatURLArgument = null;\nvar locationStub = {\n  formatURL: function(url) {\n    formatURLArgument = url;\n    return url;\n  },\n  setURL: Ember.K\n};\nvar expectURL = function(url) {\n  equal(formatURLArgument, url, \"should invoke formatURL with URL \"+url);\n};\n\ntest(\"urlFor returns an absolute route\", function() {\n  expect(2);\n\n  var router = Ember.Router.create({\n    location: locationStub,\n    root: Ember.Route.create({\n      dashboard: Ember.Route.create({\n        route: '/dashboard'\n      })\n    })\n  });\n\n  var url = router.urlFor('root.dashboard');\n  equal(url, '/dashboard');\n  expectURL('/dashboard');\n});\n\ntest(\"urlFor raises an error when route property is not defined\", function() {\n  var router = Ember.Router.create({\n    location: locationStub,\n    root: Ember.Route.create({\n      dashboard: Ember.Route.create({}) // state without route property\n    })\n  });\n\n  raises(function (){\n    router.urlFor('root.dashboard');\n  });\n});\n\ntest(\"urlFor supports dynamic segments\", function() {\n  var router = Ember.Router.create({\n    location: locationStub,\n\n    root: Ember.Route.create({\n      dashboard: Ember.Route.create({\n        route: '/dashboard',\n\n        posts: Ember.Route.create({\n          route: '/posts/:post_id'\n        })\n      })\n    })\n  });\n\n  var url = router.urlFor('root.dashboard.posts', { post_id: 1 });\n  equal(url, \"/dashboard/posts/1\");\n  expectURL('/dashboard/posts/1');\n});\n\ntest(\"urlFor supports using the current information for dynamic segments\", function() {\n  var router = Ember.Router.create({\n    location: locationStub,\n    namespace: {\n      Post: {\n        toString: function() { return \"Post\"; },\n        find: function() { return { id: 1 }; }\n      }\n    },\n\n    root: Ember.Route.create({\n      dashboard: Ember.Route.create({\n        route: '/dashboard',\n\n        posts: Ember.Route.create({\n          route: '/posts/:post_id',\n\n          index: Ember.Route.create({\n            route: '/'\n          }),\n\n          manage: Ember.Route.create({\n            route: '/manage'\n          })\n        })\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/dashboard/posts/1');\n  });\n\n  var url = router.urlFor('root.dashboard.posts.manage');\n  equal(url, '/dashboard/posts/1/manage');\n  expectURL('/dashboard/posts/1/manage');\n});\n\ntest(\"urlFor supports merging the current information for dynamic segments\", function() {\n  var router = Ember.Router.create({\n    location: locationStub,\n    namespace: {\n      Post: {\n        toString: function() { return \"Post\"; },\n        find: function() { return { id: 1 }; }\n      },\n\n      Widget: {\n        toString: function() { return \"Widget\"; },\n        find: function() { return { id: 2 }; }\n      }\n    },\n\n    root: Ember.Route.create({\n      dashboard: Ember.Route.create({\n        route: '/dashboard',\n\n        posts: Ember.Route.create({\n          route: '/posts/:post_id',\n\n          index: Ember.Route.create({\n            route: '/'\n          }),\n\n          manage: Ember.Route.create({\n            route: '/manage/:widget_id'\n          })\n        })\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/dashboard/posts/1');\n  });\n\n  var url = router.urlFor('root.dashboard.posts.manage', { widget_id: 2 });\n  equal(url, '/dashboard/posts/1/manage/2');\n  expectURL('/dashboard/posts/1/manage/2');\n});\n\ntest(\"navigateAway is called if the URL changes\", function() {\n  var navigated = 0;\n\n  var router = Ember.Router.create({\n    location: locationStub,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n\n        navigateAway: function(router) {\n          navigated++;\n        }\n      }),\n\n      show: Ember.Route.create({\n        route: '/show'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route('/');\n  });\n\n  equal(router.get('currentState.path'), 'root.index', \"The current state is root.index\");\n\n  Ember.run(function() {\n    router.route('/show');\n  });\n\n  equal(router.get('currentState.path'), 'root.show', \"The current state is root.index\");\n  equal(navigated, 1, \"The navigateAway method was called\");\n});\n\n})();\n//@ sourceURL=ember-routing/~tests/routable_test");