minispade.register('ember-metal/~tests/watching/unwatch_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals testBoth */\nminispade.require('ember-metal/~tests/props_helper');\n\nvar willCount = 0 , didCount = 0,\n    willChange = Ember.propertyWillChange,\n    didChange = Ember.propertyDidChange;\n\nmodule('Ember.unwatch', {\n  setup: function() {\n    willCount = didCount = 0;\n    Ember.propertyWillChange = function(cur, keyName) {\n      willCount++;\n      willChange.call(this, cur, keyName);\n    };\n\n    Ember.propertyDidChange = function(cur, keyName) {\n      didCount++;\n      didChange.call(this, cur, keyName);\n    };\n  },\n\n  teardown: function() {\n    Ember.propertyWillChange = willChange;\n    Ember.propertyDidChange  = didChange;\n  }\n});\n\ntestBoth('unwatching a computed property - regular get/set', function(get, set) {\n\n  var obj = {};\n  Ember.defineProperty(obj, 'foo', Ember.computed(function(keyName, value) {\n    if (value !== undefined) this.__foo = value;\n    return this.__foo;\n  }));\n\n  Ember.watch(obj, 'foo');\n  set(obj, 'foo', 'bar');\n  equal(willCount, 1, 'should have invoked willCount');\n  equal(didCount, 1, 'should have invoked didCount');\n\n  Ember.unwatch(obj, 'foo');\n  willCount = didCount = 0;\n  set(obj, 'foo', 'BAZ');\n  equal(willCount, 0, 'should NOT have invoked willCount');\n  equal(didCount, 0, 'should NOT have invoked didCount');\n});\n\n\ntestBoth('unwatching a regular property - regular get/set', function(get, set) {\n\n  var obj = { foo: 'BIFF' };\n\n  Ember.watch(obj, 'foo');\n  set(obj, 'foo', 'bar');\n  equal(willCount, 1, 'should have invoked willCount');\n  equal(didCount, 1, 'should have invoked didCount');\n\n  Ember.unwatch(obj, 'foo');\n  willCount = didCount = 0;\n  set(obj, 'foo', 'BAZ');\n  equal(willCount, 0, 'should NOT have invoked willCount');\n  equal(didCount, 0, 'should NOT have invoked didCount');\n});\n\ntest('unwatching should be nested', function() {\n\n  var obj = { foo: 'BIFF' };\n\n  Ember.watch(obj, 'foo');\n  Ember.watch(obj, 'foo');\n  Ember.set(obj, 'foo', 'bar');\n  equal(willCount, 1, 'should have invoked willCount');\n  equal(didCount, 1, 'should have invoked didCount');\n\n  Ember.unwatch(obj, 'foo');\n  willCount = didCount = 0;\n  Ember.set(obj, 'foo', 'BAZ');\n  equal(willCount, 1, 'should NOT have invoked willCount');\n  equal(didCount, 1, 'should NOT have invoked didCount');\n\n  Ember.unwatch(obj, 'foo');\n  willCount = didCount = 0;\n  Ember.set(obj, 'foo', 'BAZ');\n  equal(willCount, 0, 'should NOT have invoked willCount');\n  equal(didCount, 0, 'should NOT have invoked didCount');\n});\n\n})();\n//@ sourceURL=ember-metal/~tests/watching/unwatch_test");