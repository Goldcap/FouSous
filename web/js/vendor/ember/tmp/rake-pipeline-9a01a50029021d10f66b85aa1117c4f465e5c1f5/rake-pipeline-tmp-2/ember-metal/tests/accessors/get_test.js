minispade.register('ember-metal/~tests/accessors/get_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-metal/~tests/props_helper');\n\nmodule('Ember.get');\n\ntest('should get arbitrary properties on an object', function() {\n  var obj = {\n    string: 'string',\n    number: 23,\n    boolTrue: true,\n    boolFalse: false,\n    nullValue: null\n  };\n\n  for(var key in obj) {\n    if (!obj.hasOwnProperty(key)) continue;\n    equal(Ember.get(obj, key), obj[key], key);\n  }\n\n});\n\ntestBoth(\"should call unknownProperty on watched values if the value is undefined\", function(get, set) {\n  var obj = {\n    count: 0,\n    unknownProperty: function(key) {\n      equal(key, 'foo', \"should pass key\");\n      this.count++;\n      return \"FOO\";\n    }\n  };\n\n  var count = 0;\n  Ember.addObserver(obj, 'foo', function() {\n    count++;\n  });\n\n  equal(get(obj, 'foo'), 'FOO', 'should return value from unknown');\n});\n\n// ..........................................................\n// BUGS\n//\n\ntest('(regression) watched properties on unmodified inherited objects should still return their original value', function() {\n\n  var MyMixin = Ember.Mixin.create({\n    someProperty: 'foo',\n    propertyDidChange: Ember.observer(function() {\n      // NOTHING TO DO\n    }, 'someProperty')\n  });\n\n  var baseObject = MyMixin.apply({});\n  var theRealObject = Ember.create(baseObject);\n\n  equal(Ember.get(theRealObject, 'someProperty'), 'foo', 'should return the set value, not false');\n});\n\nmodule(\"Ember.getWithDefault\");\n\ntest('should get arbitrary properties on an object', function() {\n  var obj = {\n    string: 'string',\n    number: 23,\n    boolTrue: true,\n    boolFalse: false,\n    nullValue: null\n  };\n\n  for(var key in obj) {\n    if (!obj.hasOwnProperty(key)) continue;\n    equal(Ember.getWithDefault(obj, key, \"fail\"), obj[key], key);\n  }\n\n  obj = {\n    undef: undefined\n  };\n\n  equal(Ember.getWithDefault(obj, \"undef\", \"default\"), \"default\", \"explicit undefined retrieves the default\");\n  equal(Ember.getWithDefault(obj, \"not-present\", \"default\"), \"default\", \"non-present key retrieves the default\");\n});\n\ntest('should call unknownProperty if defined and value is undefined', function() {\n\n  var obj = {\n    count: 0,\n    unknownProperty: function(key) {\n      equal(key, 'foo', 'should pass key');\n      this.count++;\n      return 'FOO';\n    }\n  };\n\n  equal(Ember.get(obj, 'foo'), 'FOO', 'should return value from unknown');\n  equal(obj.count, 1, 'should have invoked');\n});\n\ntestBoth(\"if unknownProperty is present, it is called\", function(get, set) {\n  var obj = {\n    count: 0,\n    unknownProperty: function(key) {\n      if (key === \"foo\") {\n        equal(key, 'foo', \"should pass key\");\n        this.count++;\n        return \"FOO\";\n      }\n    }\n  };\n\n  var count = 0;\n  Ember.addObserver(obj, 'foo', function() {\n    count++;\n  });\n\n  equal(Ember.getWithDefault(obj, 'foo', \"fail\"), 'FOO', 'should return value from unknownProperty');\n  equal(Ember.getWithDefault(obj, 'bar', \"default\"), 'default', 'should convert undefined from unknownProperty into default');\n});\n\n// ..........................................................\n// BUGS\n//\n\ntest('(regression) watched properties on unmodified inherited objects should still return their original value', function() {\n\n  var MyMixin = Ember.Mixin.create({\n    someProperty: 'foo',\n    propertyDidChange: Ember.observer(function() {\n      // NOTHING TO DO\n    }, 'someProperty')\n  });\n\n  var baseObject = MyMixin.apply({});\n  var theRealObject = Ember.create(baseObject);\n\n  equal(Ember.getWithDefault(theRealObject, 'someProperty', \"fail\"), 'foo', 'should return the set value, not false');\n});\n\n\n})();\n//@ sourceURL=ember-metal/~tests/accessors/get_test");