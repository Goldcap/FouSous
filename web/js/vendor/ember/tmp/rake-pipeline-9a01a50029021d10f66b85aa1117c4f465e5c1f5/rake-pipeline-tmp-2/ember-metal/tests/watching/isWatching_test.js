minispade.register('ember-metal/~tests/watching/isWatching_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nmodule('Ember.isWatching');\n\nvar testObserver = function(setup, teardown) {\n  var obj = {}, key = 'foo', fn = function() {};\n\n  equal(Ember.isWatching(obj, 'foo'), false, \"precond - isWatching is false by default\");\n  setup(obj, key, fn);\n  equal(Ember.isWatching(obj, 'foo'), true, \"isWatching is true when observers are added\");\n  teardown(obj, key, fn);\n  equal(Ember.isWatching(obj, 'foo'), false, \"isWatching is false after observers are removed\");\n};\n\ntest(\"isWatching is true for regular local observers\", function() {\n  testObserver(function(obj, key, fn) {\n    Ember.Mixin.create({\n      didChange: Ember.observer(fn, key)\n    }).apply(obj);\n  }, function(obj, key, fn) {\n    Ember.removeObserver(obj, key, obj, fn);\n  });\n});\n\ntest(\"isWatching is true for nonlocal observers\", function() {\n  testObserver(function(obj, key, fn) {\n    Ember.addObserver(obj, key, obj, fn);\n  }, function(obj, key, fn) {\n    Ember.removeObserver(obj, key, obj, fn);\n  });\n});\n\ntest(\"isWatching is true for chained observers\", function() {\n  testObserver(function(obj, key, fn) {\n    Ember.addObserver(obj, key + '.bar', obj, fn);\n  }, function(obj, key, fn) {\n    Ember.removeObserver(obj, key + '.bar', obj, fn);\n  });\n});\n\ntest(\"isWatching is true for computed properties\", function() {\n  testObserver(function(obj, key, fn) {\n    Ember.defineProperty(obj, 'computed', Ember.computed(fn).property(key));\n    Ember.watch(obj, 'computed');\n  }, function(obj, key, fn) {\n    Ember.defineProperty(obj, 'computed', null);\n  });\n});\n\ntest(\"isWatching is true for chained computed properties\", function() {\n  testObserver(function(obj, key, fn) {\n    Ember.defineProperty(obj, 'computed', Ember.computed(fn).property(key + '.bar'));\n    Ember.watch(obj, 'computed');\n  }, function(obj, key, fn) {\n    Ember.defineProperty(obj, 'computed', null);\n  });\n});\n\n})();\n//@ sourceURL=ember-metal/~tests/watching/isWatching_test");