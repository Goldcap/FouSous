minispade.register('ember-metal/~tests/accessors/getPath_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals Foo:true $foo:true */\n\nvar obj, moduleOpts = {\n  setup: function() {\n    obj = {\n      foo: {\n        bar: {\n          baz: { biff: 'BIFF' }\n        }\n      }\n\n    };\n\n    Foo = {\n      bar: {\n        baz: { biff: 'FooBiff' }\n      }\n    };\n\n    $foo = {\n      bar: {\n        baz: { biff: '$FOOBIFF' }\n      }\n    };\n  },\n\n  teardown: function() {\n    obj = null;\n    Foo = null;\n    $foo = null;\n  }\n};\n\nmodule('Ember.get with path', moduleOpts);\n\n// ..........................................................\n// LOCAL PATHS\n//\n\ntest('[obj, foo] -> obj.foo', function() {\n  deepEqual(Ember.get(obj, 'foo'), obj.foo);\n});\n\ntest('[obj, foo.bar] -> obj.foo.bar', function() {\n  deepEqual(Ember.get(obj, 'foo.bar'), obj.foo.bar);\n});\n\ntest('[obj, this.foo] -> obj.foo', function() {\n  deepEqual(Ember.get(obj, 'this.foo'), obj.foo);\n});\n\ntest('[obj, this.foo.bar] -> obj.foo.bar', function() {\n  deepEqual(Ember.get(obj, 'this.foo.bar'), obj.foo.bar);\n});\n\ntest('[obj, this.Foo.bar] -> (null)', function() {\n  deepEqual(Ember.get(obj, 'this.Foo.bar'), undefined);\n});\n\n// ..........................................................\n// NO TARGET\n//\n\ntest('[null, Foo] -> Foo', function() {\n  deepEqual(Ember.get('Foo'), Foo);\n});\n\ntest('[null, Foo.bar] -> Foo.bar', function() {\n  deepEqual(Ember.get('Foo.bar'), Foo.bar);\n});\n\n\n})();\n//@ sourceURL=ember-metal/~tests/accessors/getPath_test");