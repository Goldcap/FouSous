minispade.register('ember-metal/~tests/platform/defineProperty_test', "(function() {// ==========================================================================\n// Project:  Ember Metal\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nfunction isEnumerable(obj, keyName) {\n  var keys = [];\n  for(var key in obj) {\n    if (obj.hasOwnProperty(key)) keys.push(key);\n  }\n  return Ember.EnumerableUtils.indexOf(keys, keyName)>=0;\n}\n\nmodule(\"Ember.platform.defineProperty()\");\n\ntest(\"defining a simple property\", function() {\n  var obj = {};\n  Ember.platform.defineProperty(obj, 'foo', {\n    enumerable:   true,\n    writable:     true,\n    value: 'FOO'\n  });\n\n  equal(obj.foo, 'FOO', 'should have added property');\n\n  obj.foo = \"BAR\";\n  equal(obj.foo, 'BAR', 'writable defined property should be writable');\n  equal(isEnumerable(obj, 'foo'), true, 'foo should be enumerable');\n});\n\ntest('defining a read only property', function() {\n  var obj = {};\n  Ember.platform.defineProperty(obj, 'foo', {\n    enumerable:   true,\n    writable:     false,\n    value: 'FOO'\n  });\n\n  equal(obj.foo, 'FOO', 'should have added property');\n\n  obj.foo = \"BAR\";\n  if (Ember.platform.defineProperty.isSimulated) {\n    equal(obj.foo, 'BAR', 'simulated defineProperty should silently work');\n  } else {\n    equal(obj.foo, 'FOO', 'real defined property should not be writable');\n  }\n\n});\n\ntest('defining a non enumerable property', function() {\n  var obj = {};\n  Ember.platform.defineProperty(obj, 'foo', {\n    enumerable:   false,\n    writable:     true,\n    value: 'FOO'\n  });\n\n  if (Ember.platform.defineProperty.isSimulated) {\n    equal(isEnumerable(obj, 'foo'), true, 'simulated defineProperty will leave properties enumerable');\n  } else {\n    equal(isEnumerable(obj, 'foo'), false, 'real defineProperty will make property not-enumerable');\n  }\n});\n\n// If accessors don't exist, behavior that relies on getters\n// and setters don't do anything\nif (Ember.platform.hasPropertyAccessors) {\n  test('defining a getter/setter', function() {\n    var obj = {}, getCnt = 0, setCnt = 0, v = 'FOO';\n\n    var desc = {\n      enumerable: true,\n      get: function() { getCnt++; return v; },\n      set: function(val) { setCnt++; v = val; }\n    };\n\n    if (Ember.platform.hasPropertyAccessors) {\n      Ember.platform.defineProperty(obj, 'foo', desc);\n      equal(obj.foo, 'FOO', 'should return getter');\n      equal(getCnt, 1, 'should have invoked getter');\n\n      obj.foo = 'BAR';\n      equal(obj.foo, 'BAR', 'setter should have worked');\n      equal(setCnt, 1, 'should have invoked setter');\n\n    }\n\n  });\n\n  test('defining getter/setter along with writable', function() {\n    var obj  ={};\n    raises(function() {\n      Ember.platform.defineProperty(obj, 'foo', {\n        enumerable: true,\n        get: function() {},\n        set: function() {},\n        writable: true\n      });\n    }, Error, 'defining writable and get/set should throw exception');\n  });\n\n  test('defining getter/setter along with value', function() {\n    var obj  ={};\n    raises(function() {\n      Ember.platform.defineProperty(obj, 'foo', {\n        enumerable: true,\n        get: function() {},\n        set: function() {},\n        value: 'FOO'\n      });\n    }, Error, 'defining value and get/set should throw exception');\n  });\n}\n\n})();\n//@ sourceURL=ember-metal/~tests/platform/defineProperty_test");