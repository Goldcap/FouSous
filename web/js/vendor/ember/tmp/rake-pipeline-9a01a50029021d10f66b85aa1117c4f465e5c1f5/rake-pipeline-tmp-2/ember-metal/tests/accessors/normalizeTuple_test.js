minispade.register('ember-metal/~tests/accessors/normalizeTuple_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals Foo:true $foo:true */\n\nvar obj, moduleOpts = {\n  setup: function() {\n    obj = {\n      foo: {\n        bar: {\n          baz: {}\n        }\n      }\n    };\n\n    Foo = {\n      bar: {\n        baz: {}\n      }\n    };\n\n    $foo = {\n      bar: {\n        baz: {}\n      }\n    };\n  },\n\n  teardown: function() {\n    obj = null;\n    Foo = null;\n  }\n};\n\nmodule('Ember.normalizeTuple', moduleOpts);\n\n// ..........................................................\n// LOCAL PATHS\n//\n\ntest('[obj, foo] -> [obj, foo]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'foo'), [obj, 'foo']);\n});\n\ntest('[obj, *] -> [obj, *]', function() {\n  deepEqual(Ember.normalizeTuple(obj, '*'), [obj, '*']);\n});\n\ntest('[obj, foo.bar] -> [obj, foo.bar]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'foo.bar'), [obj, 'foo.bar']);\n});\n\ntest('[obj, foo.*] -> [obj, foo.*]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'foo.*'), [obj, 'foo.*']);\n});\n\ntest('[obj, foo.*.baz] -> [obj, foo.*.baz]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'foo.*.baz'), [obj, 'foo.*.baz']);\n});\n\ntest('[obj, this.foo] -> [obj, foo]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'this.foo'), [obj, 'foo']);\n});\n\ntest('[obj, this.foo.bar] -> [obj, foo.bar]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'this.foo.bar'), [obj, 'foo.bar']);\n});\n\ntest('[obj, .foo.bar] -> [obj, foo.bar]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'this.foo.bar'), [obj, 'foo.bar']);\n});\n\ntest('[obj, this.Foo.bar] -> [obj, Foo.bar]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'this.Foo.bar'), [obj, 'Foo.bar']);\n});\n\n// ..........................................................\n// GLOBAL PATHS\n//\n\ntest('[obj, Foo] -> [obj, Foo]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'Foo'), [obj, 'Foo']);\n});\n\ntest('[obj, Foo.bar] -> [Foo, bar]', function() {\n  deepEqual(Ember.normalizeTuple(obj, 'Foo.bar'), [Foo, 'bar']);\n});\n\ntest('[obj, $foo.bar.baz] -> [$foo, bar.baz]', function() {\n  deepEqual(Ember.normalizeTuple(obj, '$foo.bar.baz'), [$foo, 'bar.baz']);\n});\n\n// ..........................................................\n// NO TARGET\n//\n\ntest('[null, Foo] -> EXCEPTION', function() {\n  raises(function() {\n    Ember.normalizeTuple(null, 'Foo');\n  }, Error);\n});\n\ntest('[null, Foo.bar] -> [Foo, bar]', function() {\n  deepEqual(Ember.normalizeTuple(null, 'Foo.bar'), [Foo, 'bar']);\n});\n\n})();\n//@ sourceURL=ember-metal/~tests/accessors/normalizeTuple_test");