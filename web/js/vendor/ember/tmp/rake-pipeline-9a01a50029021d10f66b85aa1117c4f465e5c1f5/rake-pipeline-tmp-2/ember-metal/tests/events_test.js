minispade.register('ember-metal/~tests/events_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nmodule('system/props/events_test');\n\ntest('listener should receive event - removing should remove', function() {\n  var obj = {}, count = 0;\n  var F = function() { count++; };\n\n  Ember.addListener(obj, 'event!', F);\n  equal(count, 0, 'nothing yet');\n\n  Ember.sendEvent(obj, 'event!');\n  equal(count, 1, 'received event');\n\n  Ember.removeListener(obj, 'event!', F);\n\n  count = 0;\n  Ember.sendEvent(obj, 'event!');\n  equal(count, 0, 'received event');\n});\n\ntest('listeners should be inherited', function() {\n  var obj = {}, count = 0;\n  var F = function() { count++; };\n\n  Ember.addListener(obj, 'event!', F);\n\n  var obj2 = Ember.create(obj);\n\n  equal(count, 0, 'nothing yet');\n\n  Ember.sendEvent(obj2, 'event!');\n  equal(count, 1, 'received event');\n\n  Ember.removeListener(obj2, 'event!', F);\n\n  count = 0;\n  Ember.sendEvent(obj2, 'event!');\n  equal(count, 0, 'did not receive event');\n\n  Ember.sendEvent(obj, 'event!');\n  equal(count, 1, 'should still invoke on parent');\n\n});\n\n\ntest('adding a listener more than once should only invoke once', function() {\n\n  var obj = {}, count = 0;\n  var F = function() { count++; };\n  Ember.addListener(obj, 'event!', F);\n  Ember.addListener(obj, 'event!', F);\n\n  Ember.sendEvent(obj, 'event!');\n  equal(count, 1, 'should only invoke once');\n});\n\ntest('adding a listener with a target should invoke with target', function() {\n  var obj = {}, target;\n\n  target = {\n    count: 0,\n    method: function() { this.count++; }\n  };\n\n  Ember.addListener(obj, 'event!', target, target.method);\n  Ember.sendEvent(obj, 'event!');\n  equal(target.count, 1, 'should invoke');\n});\n\ntest('suspending a listener should not invoke during callback', function() {\n  var obj = {}, target, otherTarget;\n\n  target = {\n    count: 0,\n    method: function() { this.count++; }\n  };\n\n  otherTarget = {\n    count: 0,\n    method: function() { this.count++; }\n  };\n\n  Ember.addListener(obj, 'event!', target, target.method);\n  Ember.addListener(obj, 'event!', otherTarget, otherTarget.method);\n\n  function callback() {\n      equal(this, target);\n\n      Ember.sendEvent(obj, 'event!');\n\n      return 'result';\n  }\n\n  Ember.sendEvent(obj, 'event!');\n  \n  equal(Ember._suspendListener(obj, 'event!', target, target.method, callback), 'result');\n\n  Ember.sendEvent(obj, 'event!');\n\n  equal(target.count, 2, 'should invoke');\n  equal(otherTarget.count, 3, 'should invoke');\n});\n\ntest('adding a listener with string method should lookup method on event delivery', function() {\n  var obj = {}, target;\n\n  target = {\n    count: 0,\n    method: function() {}\n  };\n\n  Ember.addListener(obj, 'event!', target, 'method');\n  Ember.sendEvent(obj, 'event!');\n  equal(target.count, 0, 'should invoke but do nothing');\n\n  target.method = function() { this.count++; };\n  Ember.sendEvent(obj, 'event!');\n  equal(target.count, 1, 'should invoke now');\n});\n\ntest('calling sendEvent with extra params should be passed to listeners', function() {\n\n  var obj = {}, params = null;\n  Ember.addListener(obj, 'event!', function() {\n    params = Array.prototype.slice.call(arguments);\n  });\n\n  Ember.sendEvent(obj, 'event!', ['foo', 'bar']);\n  deepEqual(params, ['foo', 'bar'], 'params should be saved');\n});\n\ntest('implementing sendEvent on object should invoke', function() {\n  var obj = {\n    sendEvent: function(eventName, params) {\n      equal(eventName, 'event!', 'eventName');\n      deepEqual(params, ['foo', 'bar']);\n      this.count++;\n    },\n\n    count: 0\n  };\n\n  Ember.addListener(obj, 'event!', obj, function() { this.count++; });\n\n  Ember.sendEvent(obj, 'event!', ['foo', 'bar']);\n  equal(obj.count, 2, 'should have invoked method & listener');\n});\n\ntest('hasListeners tells you if there are listeners for a given event', function() {\n\n  var obj = {}, F = function() {}, F2 = function() {};\n\n  equal(Ember.hasListeners(obj, 'event!'), false, 'no listeners at first');\n\n  Ember.addListener(obj, 'event!', F);\n  Ember.addListener(obj, 'event!', F2);\n\n  equal(Ember.hasListeners(obj, 'event!'), true, 'has listeners');\n\n  Ember.removeListener(obj, 'event!', F);\n  equal(Ember.hasListeners(obj, 'event!'), true, 'has listeners');\n\n  Ember.removeListener(obj, 'event!', F2);\n  equal(Ember.hasListeners(obj, 'event!'), false, 'has no more listeners');\n\n  Ember.addListener(obj, 'event!', F);\n  equal(Ember.hasListeners(obj, 'event!'), true, 'has listeners');\n});\n\n\n})();\n//@ sourceURL=ember-metal/~tests/events_test");