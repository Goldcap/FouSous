minispade.register('ember-metal/~tests/run_loop/once_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nmodule('system/run_loop/once_test');\n\ntest('calling invokeOnce more than once invokes only once', function() {\n\n  var count = 0;\n  Ember.run(function() {\n    var F = function() { count++; };\n    Ember.run.once(F);\n    Ember.run.once(F);\n    Ember.run.once(F);\n  });\n\n  equal(count, 1, 'should have invoked once');\n});\n\ntest('should differentiate based on target', function() {\n\n  var A = { count: 0 }, B = { count: 0 };\n  Ember.run(function() {\n    var F = function() { this.count++; };\n    Ember.run.once(A, F);\n    Ember.run.once(B, F);\n    Ember.run.once(A, F);\n    Ember.run.once(B, F);\n  });\n\n  equal(A.count, 1, 'should have invoked once on A');\n  equal(B.count, 1, 'should have invoked once on B');\n});\n\n\ntest('should ignore other arguments - replacing previous ones', function() {\n\n  var A = { count: 0 }, B = { count: 0 };\n  Ember.run(function() {\n    var F = function(amt) { this.count += amt; };\n    Ember.run.once(A, F, 10);\n    Ember.run.once(B, F, 20);\n    Ember.run.once(A, F, 30);\n    Ember.run.once(B, F, 40);\n  });\n\n  equal(A.count, 30, 'should have invoked once on A');\n  equal(B.count, 40, 'should have invoked once on B');\n});\n\ntest('should be inside of a runloop when running', function() {\n\n  Ember.run(function() {\n    Ember.run.once(function() {\n      ok(!!Ember.run.currentRunLoop, 'should have a runloop');\n    });\n  });\n});\n\n\n\n})();\n//@ sourceURL=ember-metal/~tests/run_loop/once_test");