minispade.register('ember-metal/~tests/accessors/set_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\n\nmodule('Ember.set');\n\ntest('should set arbitrary properties on an object', function() {\n  var obj = {\n    string: 'string',\n    number: 23,\n    boolTrue: true,\n    boolFalse: false,\n    nullValue: null\n  };\n\n  var newObj = {};\n\n  for(var key in obj) {\n    if (!obj.hasOwnProperty(key)) continue;\n    equal(Ember.set(newObj, key, obj[key]), obj[key], 'should return value');\n    equal(Ember.get(newObj, key), obj[key], 'should set value');\n  }\n\n});\n\ntest('should call setUnknownProperty if defined and value is undefined', function() {\n\n  var obj = {\n    count: 0,\n\n    unknownProperty: function(key, value) {\n      ok(false, 'should not invoke unknownProperty is setUnknownProperty is defined');\n    },\n\n    setUnknownProperty: function(key, value) {\n      equal(key, 'foo', 'should pass key');\n      equal(value, 'BAR', 'should pass key');\n      this.count++;\n      return 'FOO';\n    }\n  };\n\n  equal(Ember.set(obj, 'foo', \"BAR\"), 'BAR', 'should return set value');\n  equal(obj.count, 1, 'should have invoked');\n});\n\n\n})();\n//@ sourceURL=ember-metal/~tests/accessors/set_test");