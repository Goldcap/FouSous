minispade.register('ember-metal/~tests/utils/meta_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\n/*global jQuery*/\n\nmodule(\"Ember.meta\");\n\ntest(\"should return the same hash for an object\", function() {\n  var obj = {};\n\n  Ember.meta(obj).foo = \"bar\";\n\n  equal(Ember.meta(obj).foo, \"bar\", \"returns same hash with multiple calls to Ember.meta()\");\n});\n\nmodule(\"Ember.metaPath\");\n\ntest(\"should not create nested objects if writable is false\", function() {\n  var obj = {};\n\n  ok(!Ember.meta(obj).foo, \"precond - foo property on meta does not yet exist\");\n  equal(Ember.metaPath(obj, ['foo', 'bar', 'baz'], false), undefined, \"should return undefined when writable is false and doesn't already exist\") ;\n  equal(Ember.meta(obj).foo, undefined, \"foo property is not created\");\n});\n\ntest(\"should create nested objects if writable is true\", function() {\n  var obj = {};\n\n  ok(!Ember.meta(obj).foo, \"precond - foo property on meta does not yet exist\");\n\n  equal(typeof Ember.metaPath(obj, ['foo', 'bar', 'baz'], true), \"object\", \"should return hash when writable is true and doesn't already exist\") ;\n  ok(Ember.meta(obj).foo.bar.baz['bat'] = true, \"can set a property on the newly created hash\");\n});\n\ntest(\"getMeta and setMeta\", function() {\n  var obj = {};\n\n  ok(!Ember.getMeta(obj, 'foo'), \"precond - foo property on meta does not yet exist\");\n  Ember.setMeta(obj, 'foo', \"bar\");\n  equal(Ember.getMeta(obj, 'foo'), \"bar\", \"foo property on meta now exists\");\n});\n\nmodule(\"Ember.meta enumerable\");\n// Tests fix for https://github.com/emberjs/ember.js/issues/344\n// This is primarily for older browsers such as IE8\nif (Ember.platform.defineProperty.isSimulated) {\n  if (window.jQuery) {\n    test(\"meta is not jQuery.isPlainObject\", function () {\n      var proto, obj;\n      proto = {foo: 'bar'};\n      equal(jQuery.isPlainObject(Ember.meta(proto)), false, 'meta should not be isPlainObject when meta property cannot be marked as enumerable: false');\n      obj = Ember.create(proto);\n      equal(jQuery.isPlainObject(Ember.meta(obj)), false, 'meta should not be isPlainObject when meta property cannot be marked as enumerable: false');\n    });\n  }\n} else {\n  test(\"meta is not enumerable\", function () {\n    var proto, obj, props, prop;\n    proto = {foo: 'bar'};\n    Ember.meta(proto);\n    obj = Ember.create(proto);\n    Ember.meta(obj);\n    obj.bar = 'baz';\n    props = [];\n    for (prop in obj) {\n      props.push(prop);\n    }\n    deepEqual(props.sort(), ['bar', 'foo']);\n    if (window.JSON && 'stringify' in JSON) {\n      try {\n        JSON.stringify(obj);\n      } catch (e) {\n        ok(false, 'meta should not fail JSON.stringify');\n      }\n    }\n  });\n}\n\n})();\n//@ sourceURL=ember-metal/~tests/utils/meta_test");