minispade.register('ember-handlebars/~tests/views/collection_view_test', "(function() {// ==========================================================================\n// Project:   Ember Handlebars Views\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TemplateTests:true App:true */\n\nvar set = Ember.set, get = Ember.get;\nvar firstGrandchild = function(view) {\n  return get(get(view, 'childViews').objectAt(0), 'childViews').objectAt(0);\n};\nvar nthChild = function(view, nth) {\n  return get(view, 'childViews').objectAt(nth || 0);\n};\nvar firstChild = nthChild;\n\nvar view;\n\nmodule(\"ember-handlebars/tests/views/collection_view_test\", {\n  setup: function() {\n    window.TemplateTests = Ember.Namespace.create();\n  },\n  teardown: function() {\n    Ember.run(function(){\n      if (view) {\n        view.destroy();\n      }\n    });\n\n    window.TemplateTests = undefined;\n    window.App = undefined;\n  }\n});\n\ntest(\"passing a block to the collection helper sets it as the template for example views\", function() {\n  TemplateTests.CollectionTestView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A(['foo', 'bar', 'baz'])\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection TemplateTests.CollectionTestView}} <label></label> {{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('label').length, 3, 'one label element is created for each content item');\n});\n\ntest(\"collection helper should accept relative paths\", function() {\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection collection}} <label></label> {{/collection}}'),\n    collection: Ember.CollectionView.extend({\n      tagName: 'ul',\n      content: Ember.A(['foo', 'bar', 'baz'])\n    })\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('label').length, 3, 'one label element is created for each content item');\n});\n\ntest(\"empty views should be removed when content is added to the collection (regression, ht: msofaer)\", function() {\n  Ember.run(function() {\n    window.App = Ember.Application.create();\n  });\n\n  App.EmptyView = Ember.View.extend({\n    template : Ember.Handlebars.compile(\"<td>No Rows Yet</td>\")\n  });\n\n  App.ListView = Ember.CollectionView.extend({\n    emptyView: App.EmptyView\n  });\n\n  App.ListController = Ember.ArrayProxy.create({\n    content : Ember.A()\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection App.ListView contentBinding=\"App.ListController\" tagName=\"table\"}} <td>{{content.title}}</td> {{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  Ember.run(function() {\n    App.ListController.pushObject({title : \"Go Away, Placeholder Row!\"});\n  });\n\n  equal(view.$('tr').length, 1, 'has one row');\n\n  Ember.run(function(){ window.App.destroy(); });\n});\n\ntest(\"should be able to specify which class should be used for the empty view\", function() {\n  Ember.run(function() {\n    window.App = Ember.Application.create();\n  });\n\n  App.EmptyView = Ember.View.extend({\n    template: Ember.Handlebars.compile('This is an empty view')\n  });\n\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{collection emptyViewClass=\"App.EmptyView\"}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$().text(), 'This is an empty view', \"Empty view should be rendered.\");\n\n  Ember.run(function() {\n    window.App.destroy();\n  });\n});\n\ntest(\"if no content is passed, and no 'else' is specified, nothing is rendered\", function() {\n  TemplateTests.CollectionTestView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A()\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <aside></aside> {{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('li').length, 0, 'if no \"else\" is specified, nothing is rendered');\n});\n\ntest(\"if no content is passed, and 'else' is specified, the else block is rendered\", function() {\n  TemplateTests.CollectionTestView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A()\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <aside></aside> {{ else }} <del></del> {{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('li:has(del)').length, 1, 'the else block is rendered');\n});\n\ntest(\"a block passed to a collection helper defaults to the content property of the context\", function() {\n  TemplateTests.CollectionTestView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A(['foo', 'bar', 'baz'])\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <label>{{view.content}}</label> {{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('li:nth-child(1) label').length, 1);\n  equal(view.$('li:nth-child(1) label').text(), 'foo');\n  equal(view.$('li:nth-child(2) label').length, 1);\n  equal(view.$('li:nth-child(2) label').text(), 'bar');\n  equal(view.$('li:nth-child(3) label').length, 1);\n  equal(view.$('li:nth-child(3) label').text(), 'baz');\n});\n\ntest(\"a block passed to a collection helper defaults to the view\", function() {\n  TemplateTests.CollectionTestView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A(['foo', 'bar', 'baz'])\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <label>{{view.content}}</label> {{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  // Preconds\n  equal(view.$('li:nth-child(1) label').length, 1);\n  equal(view.$('li:nth-child(1) label').text(), 'foo');\n  equal(view.$('li:nth-child(2) label').length, 1);\n  equal(view.$('li:nth-child(2) label').text(), 'bar');\n  equal(view.$('li:nth-child(3) label').length, 1);\n  equal(view.$('li:nth-child(3) label').text(), 'baz');\n\n  Ember.run(function() {\n    set(firstChild(view), 'content', Ember.A());\n  });\n  equal(view.$('label').length, 0, \"all list item views should be removed from DOM\");\n});\n\ntest(\"should include an id attribute if id is set in the options hash\", function() {\n  TemplateTests.CollectionTestView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A(['foo', 'bar', 'baz'])\n  });\n\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\" id=\"baz\"}}foo{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ul#baz').length, 1, \"adds an id attribute\");\n});\n\ntest(\"should give its item views the class specified by itemClass\", function() {\n  TemplateTests.itemClassTestCollectionView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A(['foo', 'bar', 'baz'])\n  });\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.itemClassTestCollectionView\" itemClass=\"baz\"}}foo{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ul li.baz').length, 3, \"adds class attribute\");\n});\n\ntest(\"should give its item views the classBinding specified by itemClassBinding\", function() {\n  TemplateTests.itemClassBindingTestCollectionView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A([Ember.Object.create({ isBaz: false }), Ember.Object.create({ isBaz: true }), Ember.Object.create({ isBaz: true })])\n  });\n\n  var view = Ember.View.create({\n    isBar: true,\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.itemClassBindingTestCollectionView\" itemClassBinding=\"isBar\"}}foo{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ul li.is-bar').length, 3, \"adds class on initial rendering\");\n\n  // NOTE: in order to bind an item's class to a property of the item itself (e.g. `isBaz` above), it will be necessary\n  // to introduce a new keyword that could be used from within `itemClassBinding`. For instance, `itemClassBinding=\"item.isBaz\"`.\n});\n\ntest(\"should give its item views the property specified by itemPropertyBinding\", function() {\n  TemplateTests.itemPropertyBindingTestItemView = Ember.View.extend({\n    tagName: 'li'\n  });\n\n  // Use preserveContext=false so the itemView handlebars context is the view context\n  // Set itemView bindings using item*\n  var view = Ember.View.create({\n    baz: \"baz\",\n    content: Ember.A([Ember.Object.create(), Ember.Object.create(), Ember.Object.create()]),\n    template: Ember.Handlebars.compile('{{#collection contentBinding=\"content\" tagName=\"ul\" itemViewClass=\"TemplateTests.itemPropertyBindingTestItemView\" itemPropertyBinding=\"baz\" preserveContext=false}}{{view.property}}{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ul li').length, 3, \"adds 3 itemView\");\n\n  view.$('ul li').each(function(i, li){\n    equal(Ember.$(li).text(), \"baz\", \"creates the li with the property = baz\");\n  });\n\n  Ember.run(function() {\n    set(view, 'baz', \"yobaz\");\n  });\n\n  equal(view.$('ul li:first').text(), \"yobaz\", \"change property of sub view\");\n});\n\ntest(\"should work inside a bound {{#if}}\", function() {\n  var testData = Ember.A([Ember.Object.create({ isBaz: false }), Ember.Object.create({ isBaz: true }), Ember.Object.create({ isBaz: true })]);\n  TemplateTests.ifTestCollectionView = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: testData\n  });\n\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#if shouldDisplay}}{{#collection \"TemplateTests.ifTestCollectionView\"}}{{content.isBaz}}{{/collection}}{{/if}}'),\n    shouldDisplay: true\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ul li').length, 3, \"renders collection when conditional is true\");\n\n  Ember.run(function() { set(view, 'shouldDisplay', false); });\n  equal(view.$('ul li').length, 0, \"removes collection when conditional changes to false\");\n\n  Ember.run(function() { set(view, 'shouldDisplay', true); });\n  equal(view.$('ul li').length, 3, \"collection renders when conditional changes to true\");\n});\n\ntest(\"should pass content as context when using {{#each}} helper\", function() {\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#each releases}}Mac OS X {{version}}: {{name}} {{/each}}'),\n\n    releases: Ember.A([\n                { version: '10.7',\n                  name: 'Lion' },\n                { version: '10.6',\n                  name: 'Snow Leopard' },\n                { version: '10.5',\n                  name: 'Leopard' }\n              ])\n  });\n\n  Ember.run(function() { view.appendTo('#qunit-fixture'); });\n\n  equal(view.$().text(), \"Mac OS X 10.7: Lion Mac OS X 10.6: Snow Leopard Mac OS X 10.5: Leopard \", \"prints each item in sequence\");\n});\n\ntest(\"should re-render when the content object changes\", function() {\n  TemplateTests.RerenderTest = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A()\n  });\n\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection TemplateTests.RerenderTest}}{{view.content}}{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  Ember.run(function() {\n    set(firstChild(view), 'content', Ember.A(['bing', 'bat', 'bang']));\n  });\n\n  Ember.run(function() {\n    set(firstChild(view), 'content', Ember.A(['ramalamadingdong']));\n  });\n\n  equal(view.$('li').length, 1, \"rerenders with correct number of items\");\n  equal(view.$('li:eq(0)').text(), \"ramalamadingdong\");\n\n});\n\ntest(\"select tagName on collection helper automatically sets child tagName to option\", function() {\n  TemplateTests.RerenderTest = Ember.CollectionView.extend({\n    content: Ember.A(['foo'])\n  });\n\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection TemplateTests.RerenderTest tagName=\"select\"}}{{view.content}}{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('qunit-fixture');\n  });\n\n  equal(view.$('option').length, 1, \"renders the correct child tag name\");\n\n});\n\ntest(\"tagName works in the #collection helper\", function() {\n  TemplateTests.RerenderTest = Ember.CollectionView.extend({\n    content: Ember.A(['foo', 'bar'])\n  });\n\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection TemplateTests.RerenderTest tagName=\"ol\"}}{{view.content}}{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ol').length, 1, \"renders the correct tag name\");\n  equal(view.$('li').length, 2, \"rerenders with correct number of items\");\n\n  Ember.run(function() {\n    set(firstChild(view), 'content', Ember.A(['bing', 'bat', 'bang']));\n  });\n\n  equal(view.$('li').length, 3, \"rerenders with correct number of items\");\n  equal(view.$('li:eq(0)').text(), \"bing\");\n});\n\ntest(\"should render nested collections\", function() {\n\n  TemplateTests.InnerList = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A(['one','two','three'])\n  });\n\n  TemplateTests.OuterList = Ember.CollectionView.extend({\n    tagName: 'ul',\n    content: Ember.A(['foo'])\n  });\n\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection TemplateTests.OuterList class=\"outer\"}}{{content}}{{#collection TemplateTests.InnerList class=\"inner\"}}{{content}}{{/collection}}{{/collection}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ul.outer > li').length, 1, \"renders the outer list with correct number of items\");\n  equal(view.$('ul.inner').length, 1, \"the inner list exsits\");\n  equal(view.$('ul.inner > li').length, 3, \"renders the inner list with correct number of items\");\n\n});\n\ntest(\"should render multiple, bound nested collections (#68)\", function() {\n  var view;\n\n  Ember.run(function() {\n    TemplateTests.contentController = Ember.ArrayProxy.create({\n      content: Ember.A(['foo','bar'])\n    });\n\n    TemplateTests.InnerList = Ember.CollectionView.extend({\n      tagName: 'ul',\n      contentBinding: 'parentView.innerListContent'\n    });\n\n    TemplateTests.OuterListItem = Ember.View.extend({\n      template: Ember.Handlebars.compile('{{#collection TemplateTests.InnerList class=\"inner\"}}{{content}}{{/collection}}{{content}}'),\n      innerListContent: Ember.computed(function() {\n        return Ember.A([1,2,3]);\n      }).cacheable()\n    });\n\n    TemplateTests.OuterList = Ember.CollectionView.extend({\n      tagName: 'ul',\n      contentBinding: 'TemplateTests.contentController',\n      itemViewClass: TemplateTests.OuterListItem\n    });\n\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile('{{collection TemplateTests.OuterList class=\"outer\"}}')\n    });\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('ul.outer > li').length, 2, \"renders the outer list with correct number of items\");\n  equal(view.$('ul.inner').length, 2, \"renders the correct number of inner lists\");\n  equal(view.$('ul.inner:first > li').length, 3, \"renders the first inner list with correct number of items\");\n  equal(view.$('ul.inner:last > li').length, 3, \"renders the second list with correct number of items\");\n\n});\n\ntest(\"should allow view objects to be swapped out without throwing an error (#78)\", function() {\n  var view, dataset, secondDataset;\n\n  Ember.run(function() {\n    TemplateTests.datasetController = Ember.Object.create();\n\n    TemplateTests.ReportingView = Ember.View.extend({\n      datasetBinding: 'TemplateTests.datasetController.dataset',\n      readyBinding: 'dataset.ready',\n      itemsBinding: 'dataset.items',\n      template: Ember.Handlebars.compile(\"{{#if ready}}{{collection TemplateTests.CollectionView}}{{else}}Loading{{/if}}\")\n    });\n\n    TemplateTests.CollectionView = Ember.CollectionView.extend({\n      contentBinding: 'parentView.items',\n      tagName: 'ul',\n      template: Ember.Handlebars.compile(\"{{content}}\")\n    });\n\n    view = TemplateTests.ReportingView.create();\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$().text(), \"Loading\", \"renders the loading text when the dataset is not ready\");\n\n  Ember.run(function() {\n    dataset = Ember.Object.create({\n      ready: true,\n      items: Ember.A([1,2,3])\n    });\n    TemplateTests.datasetController.set('dataset',dataset);\n  });\n\n  equal(view.$('ul > li').length, 3, \"renders the collection with the correct number of items when the dataset is ready\");\n\n  Ember.run(function() {\n    secondDataset = Ember.Object.create({ready: false});\n    TemplateTests.datasetController.set('dataset',secondDataset);\n  });\n\n  equal(view.$().text(), \"Loading\", \"renders the loading text when the second dataset is not ready\");\n\n});\n\n\n})();\n//@ sourceURL=ember-handlebars/~tests/views/collection_view_test");