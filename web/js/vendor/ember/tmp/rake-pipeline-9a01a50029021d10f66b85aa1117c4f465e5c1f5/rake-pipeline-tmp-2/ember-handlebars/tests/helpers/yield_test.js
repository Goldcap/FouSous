minispade.register('ember-handlebars/~tests/helpers/yield_test', "(function() {// ==========================================================================\n// Project:   Ember Handlebars Views\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*global TemplateTests*/\n\nvar set = Ember.set, get = Ember.get;\n\nvar view;\n\nmodule(\"Support for {{yield}} helper (#307)\", {\n  setup: function() {\n    window.TemplateTests = Ember.Namespace.create();\n  },\n  teardown: function() {\n    Ember.run(function(){\n      if (view) {\n        view.destroy();\n      }}\n    );\n\n\n    window.TemplateTests = undefined;\n  }\n});\n\ntest(\"a view with a layout set renders its template where the {{yield}} helper appears\", function() {\n  TemplateTests.ViewWithLayout = Ember.View.extend({\n    layout: Ember.Handlebars.compile('<div class=\"wrapper\"><h1>{{title}}</h1>{{yield}}</div>')\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#view TemplateTests.ViewWithLayout title=\"My Fancy Page\"}}<div class=\"page-body\">Show something interesting here</div>{{/view}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('div.wrapper div.page-body').length, 1, 'page-body is embedded within wrapping my-page');\n});\n\ntest(\"block should work properly even when templates are not hard-coded\", function() {\n  var templates = Ember.Object.create({\n    nester: Ember.Handlebars.compile('<div class=\"wrapper\"><h1>{{title}}</h1>{{yield}}</div>'),\n    nested: Ember.Handlebars.compile('{{#view TemplateTests.ViewWithLayout title=\"My Fancy Page\"}}<div class=\"page-body\">Show something interesting here</div>{{/view}}')\n  });\n\n  TemplateTests.ViewWithLayout = Ember.View.extend({\n    layoutName: 'nester',\n    templates: templates\n  });\n\n  view = Ember.View.create({\n    templateName: 'nested',\n    templates: templates\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('div.wrapper div.page-body').length, 1, 'page-body is embedded within wrapping my-page');\n\n});\n\ntest(\"templates should yield to block, when the yield is embedded in a hierarchy of virtual views\", function() {\n  TemplateTests.TimesView = Ember.View.extend({\n    layout: Ember.Handlebars.compile('<div class=\"times\">{{#each view.index}}{{yield}}{{/each}}</div>'),\n    n: null,\n    index: Ember.computed(function() {\n      var n = Ember.get(this, 'n'), indexArray = Ember.A([]);\n      for (var i=0; i < n; i++) {\n        indexArray[i] = i;\n      }\n      return indexArray;\n    }).property().cacheable()\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<div id=\"container\"><div class=\"title\">Counting to 5</div>{{#view TemplateTests.TimesView n=5}}<div class=\"times-item\">Hello</div>{{/view}}</div>')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('div#container div.times-item').length, 5, 'times-item is embedded within wrapping container 5 times, as expected');\n});\n\ntest(\"templates should yield to block, when the yield is embedded in a hierarchy of non-virtual views\", function() {\n  TemplateTests.NestingView = Ember.View.extend({\n    layout: Ember.Handlebars.compile('{{#view Ember.View tagName=\"div\" classNames=\"nesting\"}}{{yield}}{{/view}}')\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<div id=\"container\">{{#view TemplateTests.NestingView}}<div id=\"block\">Hello</div>{{/view}}</div>')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('div#container div.nesting div#block').length, 1, 'nesting view yields correctly even within a view hierarchy in the nesting view');\n});\n\ntest(\"block should not be required\", function() {\n  TemplateTests.YieldingView = Ember.View.extend({\n    layout: Ember.Handlebars.compile('{{#view Ember.View tagName=\"div\" classNames=\"yielding\"}}{{yield}}{{/view}}')\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<div id=\"container\">{{view TemplateTests.YieldingView}}</div>')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('div#container div.yielding').length, 1, 'yielding view is rendered as expected');\n});\n\n\n})();\n//@ sourceURL=ember-handlebars/~tests/helpers/yield_test");