minispade.register('ember-handlebars/~tests/controls/select_test', "(function() {var map = Ember.EnumerableUtils.map;\n\nvar dispatcher, select;\n\nmodule(\"Ember.Select\", {\n  setup: function() {\n    dispatcher = Ember.EventDispatcher.create();\n    dispatcher.setup();\n    select = Ember.Select.create();\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      dispatcher.destroy();\n      select.destroy();\n    });\n  }\n});\n\nfunction setAndFlush(view, key, value) {\n  Ember.run(function() {\n    Ember.set(view, key, value);\n  });\n}\n\nfunction append() {\n  Ember.run(function() {\n    select.appendTo('#qunit-fixture');\n  });\n}\n\nfunction selectedOptions() {\n  var rv = [];\n  for(var i=0, len = select.get('content.length'); i < len; ++i) {\n    rv.push(select.get('childViews.' + i + '.childViews.0.selected'));\n  }\n  return rv;\n}\n\ntest(\"has 'ember-view' and 'ember-select' CSS classes\", function() {\n  deepEqual(select.get('classNames'), ['ember-view', 'ember-select']);\n});\n\ntest(\"should render\", function() {\n  append();\n\n  ok(select.$().length, \"Select renders\");\n});\n\ntest(\"can have options\", function() {\n  select.set('content', Ember.A([1, 2, 3]));\n\n  append();\n\n  equal(select.$('option').length, 3, \"Should have three options\");\n  equal(select.$().text(), \"123\", \"Options should have content\");\n});\n\n\ntest(\"select tabindex is updated when setting tabindex property of view\", function() {\n  select.set('tabindex', '4');\n  append();\n\n  equal(select.$().attr('tabindex'), \"4\", \"renders select with the tabindex\");\n\n  select.set('tabindex', '1');\n\n  equal(select.$().attr('tabindex'), \"1\", \"updates select after tabindex changes\");\n});\n\ntest(\"can specify the property path for an option's label and value\", function() {\n  select.set('content', Ember.A([\n    { id: 1, firstName: 'Yehuda' },\n    { id: 2, firstName: 'Tom' }\n  ]));\n\n  select.set('optionLabelPath', 'content.firstName');\n  select.set('optionValuePath', 'content.id');\n\n  append();\n\n  equal(select.$('option').length, 2, \"Should have two options\");\n  equal(select.$().text(), \"YehudaTom\", \"Options should have content\");\n  deepEqual(map(select.$('option').toArray(), function(el) { return Ember.$(el).attr('value'); }), [\"1\", \"2\"], \"Options should have values\");\n});\n\ntest(\"can retrieve the current selected option when multiple=false\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' };\n  select.set('content', Ember.A([yehuda, tom]));\n\n  append();\n\n  equal(select.get('selection'), yehuda, \"By default, the first option is selected\");\n\n  select.$()[0].selectedIndex = 1; // select Tom\n  select.$().trigger('change');\n\n  equal(select.get('selection'), tom, \"On change, the new option should be selected\");\n});\n\ntest(\"can retrieve the current selected options when multiple=true\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' },\n      david = { id: 3, firstName: 'David' },\n      brennain = { id: 4, firstName: 'Brennain' };\n  select.set('content', Ember.A([yehuda, tom, david, brennain]));\n  select.set('multiple', true);\n  select.set('optionLabelPath', 'content.firstName');\n\n  append();\n\n  deepEqual(select.get('selection'), [], \"By default, nothing is selected\");\n\n  select.$('option').each(function() {\n    if (this.value === 'Tom' || this.value === 'David') {\n      this.selected = true;\n    }\n  });\n\n  select.$().trigger('change');\n\n  deepEqual(select.get('selection'), [tom, david], \"On change, the new options should be selected\");\n});\n\ntest(\"selection can be set when multiple=false\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' };\n  select.set('content', Ember.A([yehuda, tom]));\n  select.set('multiple', false);\n\n  select.set('selection', tom);\n\n  append();\n\n  equal(select.get('selection'), tom, \"Initial selection should be correct\");\n\n  select.set('selection', yehuda);\n\n  equal(select.$()[0].selectedIndex, 0, \"After changing it, selection should be correct\");\n});\n\ntest(\"selection can be set when multiple=true\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' },\n      david = { id: 3, firstName: 'David' },\n      brennain = { id: 4, firstName: 'Brennain' };\n  select.set('content', Ember.A([yehuda, tom, david, brennain]));\n  select.set('multiple', true);\n\n  select.set('selection', tom);\n\n  append();\n\n  deepEqual(select.get('selection'), [tom], \"Initial selection should be correct\");\n\n  select.set('selection', yehuda);\n\n  deepEqual(select.get('selection'), [yehuda], \"After changing it, selection should be correct\");\n});\n\ntest(\"multiple selections can be set when multiple=true\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' },\n      david = { id: 3, firstName: 'David' },\n      brennain = { id: 4, firstName: 'Brennain' };\n  select.set('content', Ember.A([yehuda, tom, david, brennain]));\n  select.set('optionLabelPath', 'content.firstName');\n  select.set('multiple', true);\n\n  select.set('selection', Ember.A([yehuda, david]));\n\n  append();\n\n  deepEqual(select.get('selection'), [yehuda, david], \"Initial selection should be correct\");\n\n  select.set('selection', Ember.A([tom, brennain]));\n\n  deepEqual(\n    select.$(':selected').map(function(){ return Ember.$(this).text();}).toArray(),\n    ['Tom', 'Brennain'],\n    \"After changing it, selection should be correct\");\n});\n\ntest(\"Ember.SelectedOption knows when it is selected when multiple=false\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' },\n      david = { id: 3, firstName: 'David' },\n      brennain = { id: 4, firstName: 'Brennain' };\n  select.set('content', Ember.A([yehuda, tom, david, brennain]));\n  select.set('multiple', false);\n\n  select.set('selection', david);\n\n  append();\n\n  deepEqual(selectedOptions(), [false, false, true, false], \"Initial selection should be correct\");\n\n  select.set('selection', brennain);\n\n  deepEqual(selectedOptions(), [false, false, false, true], \"After changing it, selection should be correct\");\n});\n\ntest(\"Ember.SelectedOption knows when it is selected when multiple=true\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' },\n      david = { id: 3, firstName: 'David' },\n      brennain = { id: 4, firstName: 'Brennain' };\n  select.set('content', Ember.A([yehuda, tom, david, brennain]));\n  select.set('multiple', true);\n\n  select.set('selection', [yehuda, david]);\n\n  append();\n\n  deepEqual(selectedOptions(), [true, false, true, false], \"Initial selection should be correct\");\n\n  select.set('selection', [tom, david]);\n\n  deepEqual(selectedOptions(), [false, true, true, false], \"After changing it, selection should be correct\");\n});\n\ntest(\"a prompt can be specified\", function() {\n  var yehuda = { id: 1, firstName: 'Yehuda' },\n      tom = { id: 2, firstName: 'Tom' };\n  select.set('content', Ember.A([yehuda, tom]));\n  select.set('prompt', 'Pick a person');\n  select.set('optionLabelPath', 'content.firstName');\n  select.set('optionValuePath', 'content.id');\n\n  append();\n\n  equal(select.$('option').length, 3, \"There should be three options\");\n  equal(select.$()[0].selectedIndex, 0, \"By default, the prompt is selected in the DOM\");\n  equal(select.$('option:selected').text(), 'Pick a person', \"By default, the prompt is selected in the DOM\");\n  equal(select.$().val(), '', \"By default, the prompt has no value\");\n\n  equal(select.get('selection'), null, \"When the prompt is selected, the selection should be null\");\n\n  select.set('selection', tom);\n  equal(select.$()[0].selectedIndex, 2, \"The selectedIndex accounts for the prompt\");\n\n  select.$()[0].selectedIndex = 0;\n  select.$().trigger('change');\n\n  equal(select.get('selection'), null, \"When the prompt is selected again after another option, the selection should be null\");\n\n  select.$()[0].selectedIndex = 2;\n  select.$().trigger('change');\n  equal(select.get('selection'), tom, \"Properly accounts for the prompt when DOM change occurs\");\n});\n\ntest(\"handles null content\", function() {\n  append();\n\n  Ember.run(function() {\n    select.set('content', null);\n    select.set('selection', 'invalid');\n  });\n\n  equal(select.get('element').selectedIndex, -1, \"should have no selection\");\n\n  Ember.run(function() {\n    select.set('multiple', true);\n    select.set('selection', [{ content: 'invalid' }]);\n  });\n\n  equal(select.get('element').selectedIndex, -1, \"should have no selection\");\n});\n\n\ntest(\"should be able to select an option and then reselect the prompt\", function() {\n  select.set('content', Ember.A(['one', 'two', 'three']));\n  select.set('prompt', 'Select something');\n\n  append();\n\n  select.$()[0].selectedIndex = 2;\n  select.$().trigger('change');\n  equal(select.get('selection'), 'two');\n\n  select.$()[0].selectedIndex = 0;\n  select.$().trigger('change');\n  equal(select.get('selection'), null);\n  equal(select.$()[0].selectedIndex, 0);\n});\n\ntest(\"should be able to get the current selection's value\", function() {\n  select.set('content', Ember.A([\n    {label: 'Yehuda Katz', value: 'wycats'},\n    {label: 'Tom Dale', value: 'tomdale'},\n    {label: 'Peter Wagenet', value: 'wagenet'},\n    {label: 'Erik Bryn', value: 'ebryn'}\n  ]));\n  select.set('optionLabelPath', 'content.label');\n  select.set('optionValuePath', 'content.value');\n\n  append();\n\n  equal(select.get('value'), 'wycats');\n});\n\ntest(\"should be able to set the current selection by value\", function() {\n  var ebryn = {label: 'Erik Bryn', value: 'ebryn'};\n  select.set('content', Ember.A([\n    {label: 'Yehuda Katz', value: 'wycats'},\n    {label: 'Tom Dale', value: 'tomdale'},\n    {label: 'Peter Wagenet', value: 'wagenet'},\n    ebryn\n  ]));\n  select.set('optionLabelPath', 'content.label');\n  select.set('optionValuePath', 'content.value');\n  select.set('value', 'ebryn');\n\n  append();\n\n  equal(select.get('value'), 'ebryn');\n  equal(select.get('selection'), ebryn);\n});\n\nmodule(\"Ember.Select - usage inside templates\", {\n  setup: function() {\n    dispatcher = Ember.EventDispatcher.create();\n    dispatcher.setup();\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      dispatcher.destroy();\n    });\n  }\n});\n\ntest(\"works from a template with bindings\", function() {\n  var Person = Ember.Object.extend({\n    id: null,\n    firstName: null,\n    lastName: null,\n\n    fullName: Ember.computed(function() {\n      return this.get('firstName') + \" \" + this.get('lastName');\n    }).property('firstName', 'lastName').cacheable()\n  });\n\n  var erik = Person.create({id: 4, firstName: 'Erik', lastName: 'Bryn'});\n\n  var application = Ember.Namespace.create();\n\n  application.peopleController = Ember.ArrayController.create({\n    content: Ember.A([\n      Person.create({id: 1, firstName: 'Yehuda', lastName: 'Katz'}),\n      Person.create({id: 2, firstName: 'Tom', lastName: 'Dale'}),\n      Person.create({id: 3, firstName: 'Peter', lastName: 'Wagenet'}),\n      erik\n    ])\n  });\n\n  application.selectedPersonController = Ember.Object.create({\n    person: null\n  });\n\n  var view = Ember.View.create({\n    app: application,\n    template: Ember.Handlebars.compile(\n      '{{view Ember.Select viewName=\"select\"' +\n      '                    contentBinding=\"app.peopleController\"' +\n      '                    optionLabelPath=\"content.fullName\"' +\n      '                    optionValuePath=\"content.id\"' +\n      '                    prompt=\"Pick a person:\"' +\n      '                    selectionBinding=\"app.selectedPersonController.person\"}}'\n    )\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  var select = view.get('select');\n  ok(select.$().length, \"Select was rendered\");\n  equal(select.$('option').length, 5, \"Options were rendered\");\n  equal(select.$().text(), \"Pick a person:Yehuda KatzTom DalePeter WagenetErik Bryn\", \"Option values were rendered\");\n  equal(select.get('selection'), null, \"Nothing has been selected\");\n  \n  Ember.run(function(){\n    application.selectedPersonController.set('person', erik);\n  });\n  \n  equal(select.get('selection'), erik, \"Selection was updated through binding\");\n  Ember.run(function(){\n    application.peopleController.pushObject(Person.create({id: 5, firstName: \"James\", lastName: \"Rosen\"}));\n  });\n  \n  equal(select.$('option').length, 6, \"New option was added\");\n  equal(select.get('selection'), erik, \"Selection was maintained after new option was added\");\n});\n\ntest(\"upon content change, the DOM should reflect the selection (#481)\", function() {\n  var userOne = {name: 'Mike', options: Ember.A(['a', 'b']), selectedOption: 'a'},\n      userTwo = {name: 'John', options: Ember.A(['c', 'd']), selectedOption: 'd'};\n\n  var view = Ember.View.create({\n    user: userOne,\n    template: Ember.Handlebars.compile(\n      '{{view Ember.Select viewName=\"select\"' +\n      '    contentBinding=\"user.options\"' +\n      '    selectionBinding=\"user.selectedOption\"}}'\n    )\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  var select = view.get('select'),\n      selectEl = select.$()[0];\n\n  equal(select.get('selection'), 'a', \"Precond: Initial selection is correct\");\n  equal(selectEl.selectedIndex, 0, \"Precond: The DOM reflects the correct selection\");\n\n  Ember.run(function() {\n    view.set('user', userTwo);\n  });\n\n  equal(select.get('selection'), 'd', \"Selection was properly set after content change\");\n  equal(selectEl.selectedIndex, 1, \"The DOM reflects the correct selection\");\n});\n\ntest(\"select element should initialize with the correct selectedIndex when using valueBinding\", function() {\n  var view = Ember.View.create({\n    collection: Ember.A([{name: 'Wes', value: 'w'}, {name: 'Gordon', value: 'g'}]),\n    val: 'g',\n    template: Ember.Handlebars.compile(\n      '{{view Ember.Select viewName=\"select\"' +\n      '    contentBinding=\"collection\"' +\n      '    optionLabelPath=\"content.name\"' +\n      '    optionValuePath=\"content.value\"' +\n      '    prompt=\"Please wait...\"' +\n      '    valueBinding=\"val\"}}'\n    )\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  var select = view.get('select'),\n      selectEl = select.$()[0];\n\n  equal(select.get('value'), 'g', \"Precond: Initial selection is correct\");\n  equal(selectEl.selectedIndex, 2, \"Precond: The DOM reflects the correct selection\");\n});\n\n})();\n//@ sourceURL=ember-handlebars/~tests/controls/select_test");