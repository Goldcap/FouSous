minispade.register('ember-handlebars/~tests/loader_test', "(function() {/*global Tobias:true*/\n\nmodule(\"test Ember.Handlebars.bootstrap\", {\n  teardown: function() {\n    Ember.TEMPLATES = {};\n    window.Tobias = undefined;\n  }\n});\n\ntest('template with data-template-name should add a new template to Ember.TEMPLATES', function() {\n  Ember.$('#qunit-fixture').html('<script type=\"text/x-handlebars\" data-template-name=\"funkyTemplate\" >{{Tobias.firstName}} {{Tobias.lastName}}</script>');\n\n  Ember.run(function() {\n    Ember.Handlebars.bootstrap(Ember.$('#qunit-fixture'));\n    Tobias = Ember.Object.create({\n      firstName: 'Tobias',\n      lastName: 'Fünke'\n    });\n  });\n\n  ok(Ember.TEMPLATES['funkyTemplate'], 'template with name funkyTemplate available');\n  equal(Ember.$('#qunit-fixture').text(), '', 'no template content is added');\n});\n\ntest('template with id instead of data-template-name should add a new template to Ember.TEMPLATES', function() {\n  Ember.$('#qunit-fixture').html('<script type=\"text/x-handlebars\" id=\"funkyTemplate\" >{{Tobias.firstName}} takes {{Tobias.drug}}</script>');\n\n  Ember.run(function() {\n    Ember.Handlebars.bootstrap(Ember.$('#qunit-fixture'));\n    Tobias = Ember.Object.create({\n      firstName: 'Tobias',\n      drug: 'teamocil'\n    });\n  });\n\n  ok(Ember.TEMPLATES['funkyTemplate'], 'template with name funkyTemplate available');\n  equal(Ember.$('#qunit-fixture').text(), '', 'no template content is added');\n});\n\ntest('inline template should be added', function() {\n  Ember.$('#qunit-fixture').html('<script type=\"text/x-handlebars\" >{{Tobias.firstName}} {{Tobias.lastName}}</script>');\n\n  Ember.run(function() {\n    Ember.Handlebars.bootstrap(Ember.$('#qunit-fixture'));\n    Tobias = Ember.Object.create({\n      firstName: 'Tobias',\n      lastName: 'Fünke'\n    });\n  });\n\n  equal(Ember.$('#qunit-fixture').text(), 'Tobias Fünke', 'template is rendered');\n});\n\ntest('template with data-element-id should add an id attribute to the view', function() {\n  Ember.$('#qunit-fixture').html('<script type=\"text/x-handlebars\" data-element-id=\"application\">Hello World !</script>');\n\n  Ember.run(function() {\n    Ember.Handlebars.bootstrap(Ember.$('#qunit-fixture'));\n  });\n\n  equal(Ember.$('#qunit-fixture #application').text(), 'Hello World !', 'view exists with id');\n});\n\ntest('template without data-element-id should still get an attribute', function() {\n  Ember.$('#qunit-fixture').html('<script type=\"text/x-handlebars\">Hello World!</script>');\n\n  Ember.run(function() {\n    Ember.Handlebars.bootstrap(Ember.$('#qunit-fixture'));\n  });\n\n  var id = Ember.$('#qunit-fixture .ember-view').attr('id');\n  ok(id && /^ember\\d+$/.test(id), \"has standard Ember id\");\n});\n\ntest('template with type text/x-raw-handlebars should be parsed', function() {\n  Ember.$('#qunit-fixture').html('<script type=\"text/x-raw-handlebars\" data-template-name=\"funkyTemplate\">{{name}}</script>');\n\n  Ember.run(function() {\n    Ember.Handlebars.bootstrap(Ember.$('#qunit-fixture'));\n  });\n\n  ok(Ember.TEMPLATES['funkyTemplate'], 'template with name funkyTemplate available');\n\n  // This won't even work with Ember templates\n  equal(Ember.TEMPLATES['funkyTemplate']({ name: 'Tobias' }), \"Tobias\");\n});\n\n})();\n//@ sourceURL=ember-handlebars/~tests/loader_test");