minispade.register('ember-handlebars/~tests/controls/button_test', "(function() {// ==========================================================================\n// Project:   Ember Handlebars Views\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar button, dispatcher;\n\nvar get = Ember.get, set = Ember.set;\n\nmodule(\"Ember.Button\", {\n  setup: function() {\n    Ember.TESTING_DEPRECATION = true;\n    dispatcher = Ember.EventDispatcher.create();\n    dispatcher.setup();\n    button = Ember.Button.create();\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      button.destroy();\n      dispatcher.destroy();\n    });\n    Ember.TESTING_DEPRECATION = false;\n  }\n});\n\nfunction synthesizeEvent(type, view) {\n  view.$().trigger(type);\n}\n\nfunction synthesizeKeyEvent(type, keyCode, view) {\n  var event = Ember.$.Event(type);\n  event.keyCode = keyCode;\n  view.$().trigger(event);\n}\n\nfunction append() {\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n}\n\ntest(\"should begin disabled if the disabled attribute is true\", function() {\n  button.set('disabled', true);\n  append();\n\n  ok(button.$().is(\":disabled\"));\n});\n\ntest(\"should become disabled if the disabled attribute is changed\", function() {\n  append();\n  ok(button.$().is(\":not(:disabled)\"));\n\n  Ember.run(function() { button.set('disabled', true); });\n  ok(button.$().is(\":disabled\"));\n\n  Ember.run(function() { button.set('disabled', false); });\n  ok(button.$().is(\":not(:disabled)\"));\n});\n\ntest(\"should support the tabindex property\", function() {\n  button.set('tabindex', 6);\n  append();\n\n  equal(button.$().prop('tabindex'), '6', 'the initial button tabindex is set in the DOM');\n\n  button.set('tabindex', 3);\n  equal(button.$().prop('tabindex'), '3', 'the button tabindex changes when it is changed in the view');  \n});\n\n\ntest(\"should trigger an action when clicked\", function() {\n  var wasClicked = false;\n\n  var actionObject = Ember.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('mousedown', button);\n  synthesizeEvent('mouseup', button);\n\n  ok(wasClicked);\n});\n\ntest(\"should trigger an action when touched\", function() {\n  var wasClicked = false;\n\n  var actionObject = Ember.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('touchstart', button);\n  synthesizeEvent('touchend', button);\n\n  ok(wasClicked);\n});\n\ntest(\"should trigger an action when space pressed\", function() {\n  var wasClicked = false;\n\n  var actionObject = Ember.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeKeyEvent('keydown', 13, button);\n  synthesizeKeyEvent('keyup', 13, button);\n\n  ok(wasClicked);\n});\n\ntest(\"should trigger an action when enter pressed\", function() {\n  var wasClicked = false;\n\n  var actionObject = Ember.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeKeyEvent('keydown', 32, button);\n  synthesizeKeyEvent('keyup', 32, button);\n\n  ok(wasClicked);\n});\n\ntest(\"should not trigger an action when another key is pressed\", function() {\n  var wasClicked = false;\n\n  var actionObject = Ember.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  // 'a' key\n  synthesizeKeyEvent('keydown', 65, button);\n  synthesizeKeyEvent('keyup', 65, button);\n\n  ok(!wasClicked);\n});\n\ntest(\"should trigger an action on a String target when clicked\", function() {\n  var wasClicked = false;\n\n  window.MyApp = {\n    myActionObject: Ember.Object.create({\n      myAction: function() {\n        wasClicked = true;\n      }\n    })\n  };\n\n  var button = Ember.Button.create({\n    target: 'MyApp.myActionObject',\n    action: 'myAction'\n  });\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('mousedown', button);\n  synthesizeEvent('mouseup', button);\n\n  ok(wasClicked);\n\n  window.MyApp = undefined;\n});\n\ntest(\"should not trigger action if mouse leaves area before mouseup\", function() {\n  var wasClicked = false;\n\n  var actionObject = Ember.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('mousedown', button);\n  ok(get(button, 'isActive'), \"becomes active when hovered\");\n  ok(button.$().hasClass('is-active'));\n  synthesizeEvent('mouseleave', button);\n  ok(!get(button, 'isActive'), \"loses active state if mouse exits\");\n  ok(!button.$().hasClass('is-active'));\n  synthesizeEvent('mouseup', button);\n\n  ok(!wasClicked);\n\n  wasClicked = false;\n\n  synthesizeEvent('mousedown', button);\n  synthesizeEvent('mouseleave', button);\n  synthesizeEvent('mouseenter', button);\n  synthesizeEvent('mouseup', button);\n\n  ok(wasClicked);\n});\n\ntest(\"should not trigger action if disabled and a non-standard input\", function() {\n  var wasClicked = false;\n\n  var actionObject = Ember.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('tagName', 'span');\n  button.set('disabled', true);\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('mousedown', button);\n  ok(!get(button, 'isActive'), \"button does not become active when pushed\");\n});\n\ntest(\"should not have a type if tagName is not 'input' or 'button'\", function() {\n  Ember.run(function() {\n    button.set('tagName', 'a');\n    button.appendTo('#qunit-fixture');\n  });\n\n  // IE 7 reports an empty string instead of null.\n  ok(!button.$().attr('type'));\n});\n\ntest(\"should by default be of type='button' if tagName is 'input'\", function() {\n  Ember.run(function() {\n    button.set('tagName', 'input');\n    button.appendTo('#qunit-fixture');\n  });\n\n  equal(button.$().attr('type'), 'button');\n});\n\ntest(\"should by default be of type='button' if tagName is 'button'\", function() {\n  Ember.run(function() {\n    button.set('tagName', 'button');\n    button.appendTo('#qunit-fixture');\n  });\n\n  equal(button.$().attr('type'), 'button');\n});\n\ntest(\"should allow setting of type when tagName is not 'input' or 'button'\", function() {\n  button.set('tagName', 'a');\n  button.set('type', 'submit');\n\n  equal(button.get('type'), 'submit');\n});\n\ntest(\"should allow setting of type when tagName is 'input'\", function() {\n  button.set('tagName', 'input');\n  button.set('type', 'submit');\n\n  equal(button.get('type'), 'submit');\n});\n\ntest(\"should allow setting of type when tagName is 'button'\", function() {\n  button.set('tagName', 'button');\n  button.set('type', 'submit');\n\n  equal(button.get('type'), 'submit');\n});\n\ntest(\"should have a configurable type\", function() {\n  button.set('type', 'submit');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  equal(button.$().attr('type'), 'submit');\n});\n\ntest(\"should set href='#' if tagName is 'a'\", function() {\n  button.set('tagName', 'a');\n\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  // IE 7 throws the whole url in there. If it ends with '#' we're ok\n  ok(/#$/.test(button.$().attr('href')));\n});\n\ntest(\"should not set href if tagName is not 'a'\", function() {\n  Ember.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  equal(button.$().attr('href'), null);\n});\n\ntest(\"should allow the target to be the parentView\", function() {\n  button.set('target', 'parentView');\n\n  equal(get(button, 'parentView'), button.get('targetObject'));\n});\n\n})();\n//@ sourceURL=ember-handlebars/~tests/controls/button_test");