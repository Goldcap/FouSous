minispade.register('ember-handlebars/~tests/controls/checkbox_test', "(function() {// ==========================================================================\n// Project:   Ember Handlebars Views\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar get = Ember.get, set = Ember.set, checkboxView, dispatcher;\n\nmodule(\"Ember.Checkbox\", {\n  setup: function() {\n    dispatcher = Ember.EventDispatcher.create();\n    dispatcher.setup();\n  },\n  teardown: function() {\n    Ember.run(function() {\n      dispatcher.destroy();\n      checkboxView.destroy();\n    });\n  }\n});\n\nfunction setAndFlush(view, key, value) {\n  Ember.run(function() {\n    Ember.set(view, key, value);\n  });\n}\n\nfunction append() {\n  Ember.run(function() {\n    checkboxView.appendTo('#qunit-fixture');\n  });\n}\n\ntest(\"should begin disabled if the disabled attribute is true\", function() {\n  checkboxView = Ember.Checkbox.create({});\n\n  checkboxView.set('disabled', true);\n  append();\n\n  ok(checkboxView.$().is(\":disabled\"));\n});\n\ntest(\"should become disabled if the disabled attribute is changed\", function() {\n  checkboxView = Ember.Checkbox.create({});\n\n  append();\n  ok(checkboxView.$().is(\":not(:disabled)\"));\n\n  Ember.run(function() { checkboxView.set('disabled', true); });\n  ok(checkboxView.$().is(\":disabled\"));\n\n  Ember.run(function() { checkboxView.set('disabled', false); });\n  ok(checkboxView.$().is(\":not(:disabled)\"));\n});\n\ntest(\"should support the tabindex property\", function() {\n  checkboxView = Ember.Checkbox.create({});\n\n  checkboxView.set('tabindex', 6);\n  append();\n\n  equal(checkboxView.$().prop('tabindex'), '6', 'the initial checkbox tabindex is set in the DOM');\n\n  checkboxView.set('tabindex', 3);\n  equal(checkboxView.$().prop('tabindex'), '3', 'the checkbox tabindex changes when it is changed in the view');  \n});\n\n\ntest(\"checked property mirrors input value\", function() {\n  checkboxView = Ember.Checkbox.create({});\n  Ember.run(function() { checkboxView.append(); });\n\n  equal(get(checkboxView, 'checked'), false, \"initially starts with a false value\");\n  equal(!!checkboxView.$().prop('checked'), false, \"the initial checked property is false\");\n\n  setAndFlush(checkboxView, 'checked', true);\n\n  equal(checkboxView.$().prop('checked'), true, \"changing the value property changes the DOM\");\n\n  checkboxView.remove();\n  Ember.run(function() { checkboxView.append(); });\n\n  equal(checkboxView.$().prop('checked'), true, \"changing the value property changes the DOM\");\n\n  Ember.run(function() { checkboxView.remove(); });\n  Ember.run(function() { set(checkboxView, 'checked', false); });\n  Ember.run(function() { checkboxView.append(); });\n\n  equal(checkboxView.$().prop('checked'), false, \"changing the value property changes the DOM\");\n});\n\ntest(\"checking the checkbox updates the value\", function() {\n  checkboxView = Ember.Checkbox.create({ checked: true });\n  Ember.run(function() { checkboxView.appendTo('#qunit-fixture'); });\n\n  equal(get(checkboxView, 'checked'), true, \"precond - initially starts with a true value\");\n  equal(!!checkboxView.$().attr('checked'), true, \"precond - the initial checked property is true\");\n\n  // Can't find a way to programatically trigger a checkbox in IE and have it generate the\n  // same events as if a user actually clicks.\n  if (!Ember.$.browser.msie) {\n    checkboxView.$()[0].click();\n  } else {\n    checkboxView.$().trigger('click');\n    checkboxView.$().removeAttr('checked').trigger('change');\n  }\n\n  equal(checkboxView.$().prop('checked'), false, \"after clicking a checkbox, the checked property changed\");\n  equal(get(checkboxView, 'checked'), false, \"changing the checkbox causes the view's value to get updated\");\n});\n\n})();\n//@ sourceURL=ember-handlebars/~tests/controls/checkbox_test");