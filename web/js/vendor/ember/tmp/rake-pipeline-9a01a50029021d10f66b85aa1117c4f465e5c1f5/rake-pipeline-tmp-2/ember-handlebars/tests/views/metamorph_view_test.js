minispade.register('ember-handlebars/~tests/views/metamorph_view_test', "(function() {var view, childView, metamorphView;\n\nmodule(\"Metamorph views\", {\n  setup: function() {\n    view = Ember.View.create({\n      render: function(buffer) {\n        buffer.push(\"<h1>View</h1>\");\n        this.appendChild(metamorphView);\n      }\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      view.destroy();\n      if (childView && !childView.isDestroyed) {\n        childView.destroy();\n      }\n\n      if (metamorphView && !metamorphView.isDestroyed) {\n        metamorphView.destroy();\n      }\n    });\n  }\n});\n\nvar get = Ember.get, set = Ember.set;\n\ntest(\"a Metamorph view is not a view's parentView\", function() {\n  childView = Ember.View.create({\n    render: function(buffer) {\n      buffer.push(\"<p>Bye bros</p>\");\n    }\n  });\n\n  metamorphView = Ember._MetamorphView.create({\n    render: function(buffer) {\n      buffer.push(\"<h2>Meta</h2>\");\n      this.appendChild(childView);\n    }\n  });\n\n  Ember.run(function() {\n    view.appendTo(\"#qunit-fixture\");\n  });\n\n  equal(get(childView, 'parentView'), view, \"A child of a metamorph view cannot see the metamorph view as its parent\");\n\n  var children = get(view, 'childViews');\n\n  equal(get(children, 'length'), 1, \"precond - there is only one child of the main node\");\n  equal(children.objectAt(0), childView, \"... and it is not the metamorph\");\n});\n\nmodule(\"Metamorph views correctly handle DOM\", {\n  setup: function() {\n    view = Ember.View.create({\n      render: function(buffer) {\n        buffer.push(\"<h1>View</h1>\");\n        this.appendChild(metamorphView);\n      }\n    });\n\n    metamorphView = Ember._MetamorphView.create({\n      powerRanger: \"Jason\",\n\n      render: function(buffer) {\n        buffer.push(\"<h2 id='from-meta'>\"+get(this, 'powerRanger')+\"</h2>\");\n      }\n    });\n\n    Ember.run(function() {\n      view.appendTo(\"#qunit-fixture\");\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      view.destroy();\n      if (!metamorphView.isDestroyed) {\n        metamorphView.destroy();\n      }\n    });\n  }\n});\n\ntest(\"a metamorph view generates without a DOM node\", function() {\n  var meta = Ember.$(\"> h2\", \"#\" + get(view, 'elementId'));\n\n  equal(meta.length, 1, \"The metamorph element should be directly inside its parent\");\n});\n\ntest(\"a metamorph view can be removed from the DOM\", function() {\n  Ember.run(function() {\n    metamorphView.destroy();\n  });\n\n  var meta = Ember.$('#from-morph');\n  equal(meta.length, 0, \"the associated DOM was removed\");\n});\n\ntest(\"a metamorph view can be rerendered\", function() {\n  equal(Ember.$('#from-meta').text(), \"Jason\", \"precond - renders to the DOM\");\n\n  set(metamorphView, 'powerRanger', 'Trini');\n  Ember.run(function() {\n    metamorphView.rerender();\n  });\n\n  equal(Ember.$('#from-meta').text(), \"Trini\", \"updates value when re-rendering\");\n});\n\n\n// Redefining without setup/teardown\nmodule(\"Metamorph views correctly handle DOM\");\n\ntest(\"a metamorph view calls its childrens' willInsertElement and didInsertElement\", function(){\n  var parentView;\n  var willInsertElementCalled = false;\n  var didInsertElementCalled = false;\n  var didInsertElementSawElement = false;\n\n  parentView = Ember.View.create({\n    ViewWithCallback: Ember.View.extend({\n      template: Ember.Handlebars.compile('<div id=\"do-i-exist\"></div>'),\n\n      willInsertElement: function(){\n        willInsertElementCalled = true;\n      },\n      didInsertElement: function(){\n        didInsertElementCalled = true;\n        didInsertElementSawElement = (this.$('div').length === 1);\n      }\n    }),\n\n    template: Ember.Handlebars.compile('{{#if condition}}{{view \"ViewWithCallback\"}}{{/if}}'),\n    condition: false\n  });\n\n  Ember.run(function() {\n    parentView.append();\n  });\n  Ember.run(function() {\n    parentView.set('condition', true);\n  });\n\n  ok(willInsertElementCalled, \"willInsertElement called\");\n  ok(didInsertElementCalled, \"didInsertElement called\");\n  ok(didInsertElementSawElement, \"didInsertElement saw element\");\n  \n  Ember.run(function(){\n    parentView.destroy();\n  });\n\n});\n\ntest(\"replacing a Metamorph should invalidate childView elements\", function() {\n  var insertedElement;\n\n  view = Ember.View.create({\n    show: false,\n\n    CustomView: Ember.View.extend({\n      init: function() {\n        this._super();\n        // This will be called in preRender\n        // We want it to cache a null value\n        // Hopefully it will be invalidated when `show` is toggled\n        this.get('element');\n      },\n\n      didInsertElement: function(){\n        insertedElement = this.get('element');\n      }\n    }),\n\n    template: Ember.Handlebars.compile(\"{{#if show}}{{view CustomView}}{{/if}}\")\n  });\n\n  Ember.run(function(){ view.append(); });\n\n  Ember.run(function(){ view.set('show', true); });\n\n  ok(insertedElement, \"should have an element\");\n\n  Ember.run(function(){ view.destroy(); });\n});\n\n})();\n//@ sourceURL=ember-handlebars/~tests/views/metamorph_view_test");