minispade.register('ember-handlebars/~tests/helpers/action_test', "(function() {var dispatcher, view,\n    ActionHelper = Ember.Handlebars.ActionHelper,\n    originalRegisterAction = ActionHelper.registerAction;\n\nvar appendView = function() {\n  Ember.run(function() { view.appendTo('#qunit-fixture'); });\n};\n\nmodule(\"Ember.Handlebars - action helper\", {\n  setup: function() {\n    dispatcher = Ember.EventDispatcher.create();\n    dispatcher.setup();\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      dispatcher.destroy();\n      view.destroy();\n    });\n  }\n});\n\ntest(\"should output a data attribute with a guid\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>edit</a>')\n  });\n\n  appendView();\n\n  ok(view.$('a').attr('data-ember-action').match(/\\d+/), \"A data-ember-action attribute with a guid was added\");\n});\n\ntest(\"should by default register a click event\", function() {\n  var registeredEventName;\n\n  ActionHelper.registerAction = function(actionName, options) {\n    registeredEventName = options.eventName;\n  };\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>edit</a>')\n  });\n\n  appendView();\n\n  equal(registeredEventName, 'click', \"The click event was properly registered\");\n\n  ActionHelper.registerAction = originalRegisterAction;\n});\n\ntest(\"should allow alternative events to be handled\", function() {\n  var registeredEventName;\n\n  ActionHelper.registerAction = function(actionName, options) {\n    registeredEventName = options.eventName;\n  };\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\" on=\"mouseUp\"}}>edit</a>')\n  });\n\n  appendView();\n\n  equal(registeredEventName, 'mouseUp', \"The alternative mouseUp event was properly registered\");\n\n  ActionHelper.registerAction = originalRegisterAction;\n});\n\ntest(\"should by default target the parent view\", function() {\n  var registeredTarget;\n\n  ActionHelper.registerAction = function(actionName, options) {\n    registeredTarget = options.target;\n  };\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>edit</a>')\n  });\n\n  appendView();\n\n  equal(registeredTarget, view, \"The parent view was registered as the target\");\n\n  ActionHelper.registerAction = originalRegisterAction;\n});\n\ntest(\"should by default target the state manager on the controller if it exists\", function() {\n  var registeredTarget;\n\n  var sent = 0;\n\n  view = Ember.View.create({\n    controller: Ember.Object.create({\n      target: Ember.Object.create({\n        isState: true,\n        send: function(context) {\n          sent++;\n        }\n      })\n    }),\n    template: Ember.Handlebars.compile('<a id=\"ember-link\" href=\"#\" {{action \"edit\"}}>edit</a>')\n  });\n\n  appendView();\n\n  Ember.$(\"#ember-link\").click();\n  equal(sent, 1, \"The action was sent to the state manager\");\n});\n\ntest(\"should allow a target to be specified\", function() {\n  var registeredTarget;\n\n  ActionHelper.registerAction = function(actionName, options) {\n    registeredTarget = options.target;\n  };\n\n  var anotherTarget = Ember.View.create();\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\" target=\"anotherTarget\"}}>edit</a>'),\n    anotherTarget: anotherTarget\n  });\n\n  appendView();\n\n  equal(registeredTarget, anotherTarget, \"The specified target was registered\");\n\n  ActionHelper.registerAction = originalRegisterAction;\n});\n\ntest(\"should register an event handler\", function() {\n  var eventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>click me</a>'),\n    edit: function() { eventHandlerWasCalled = true; }\n  });\n\n  appendView();\n\n  var actionId = view.$('a[data-ember-action]').attr('data-ember-action');\n\n  ok(Ember.Handlebars.ActionHelper.registeredActions[actionId], \"The action was registered\");\n\n  view.$('a').trigger('click');\n\n  ok(eventHandlerWasCalled, \"The event handler was called\");\n});\n\ntest(\"should be able to use action more than once for the same event within a view\", function() {\n  var editWasCalled = false,\n      deleteWasCalled = false,\n      originalEventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\n      '<a id=\"edit\" href=\"#\" {{action \"edit\"}}>edit</a><a id=\"delete\" href=\"#\" {{action \"delete\"}}>delete</a>'\n    ),\n    click: function() { originalEventHandlerWasCalled = true; },\n    edit: function() { editWasCalled = true; return false; },\n    \"delete\": function() { deleteWasCalled = true; return false; }\n  });\n\n  appendView();\n\n  view.$('#edit').trigger('click');\n\n  ok(editWasCalled && !deleteWasCalled && !originalEventHandlerWasCalled, \"Only the edit action was called\");\n\n  editWasCalled = deleteWasCalled = originalEventHandlerWasCalled = false;\n\n  view.$('#delete').trigger('click');\n\n  ok(!editWasCalled && deleteWasCalled && !originalEventHandlerWasCalled, \"Only the delete action was called\");\n\n  editWasCalled = deleteWasCalled = originalEventHandlerWasCalled = false;\n\n  view.$().trigger('click');\n\n  ok(!editWasCalled && !deleteWasCalled && originalEventHandlerWasCalled, \"Only the original event handler was called\");\n});\n\ntest(\"should work properly in an #each block\", function() {\n  var eventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    items: Ember.A([1, 2, 3, 4]),\n    template: Ember.Handlebars.compile('{{#each items}}<a href=\"#\" {{action \"edit\"}}>click me</a>{{/each}}'),\n    edit: function() { eventHandlerWasCalled = true; }\n  });\n\n  appendView();\n\n  view.$('a').trigger('click');\n\n  ok(eventHandlerWasCalled, \"The event handler was called\");\n});\n\ntest(\"should work properly in a #with block\", function() {\n  var eventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    something: {ohai: 'there'},\n    template: Ember.Handlebars.compile('{{#with something}}<a href=\"#\" {{action \"edit\"}}>click me</a>{{/with}}'),\n    edit: function() { eventHandlerWasCalled = true; }\n  });\n\n  appendView();\n\n  view.$('a').trigger('click');\n\n  ok(eventHandlerWasCalled, \"The event handler was called\");\n});\n\ntest(\"should unregister event handlers on rerender\", function() {\n  var eventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>click me</a>'),\n    edit: function() { eventHandlerWasCalled = true; }\n  });\n  \n  appendView();\n  \n  var previousActionId = view.$('a[data-ember-action]').attr('data-ember-action');\n  \n  Ember.run(function(){\n    view.rerender();\n  });\n  \n  ok(!Ember.Handlebars.ActionHelper.registeredActions[previousActionId], \"On rerender, the event handler was removed\");\n  \n  var newActionId = view.$('a[data-ember-action]').attr('data-ember-action');\n  \n  ok(Ember.Handlebars.ActionHelper.registeredActions[newActionId], \"After rerender completes, a new event handler was added\");\n});\n\ntest(\"should properly capture events on child elements of a container with an action\", function() {\n  var eventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<div {{action \"edit\"}}><button>click me</button></div>'),\n    edit: function() { eventHandlerWasCalled = true; }\n  });\n\n  appendView();\n\n  view.$('button').trigger('click');\n\n  ok(eventHandlerWasCalled, \"Event on a child element triggered the action of it's parent\");\n});\n\ntest(\"should allow bubbling of events from action helper to original parent event\", function() {\n  var eventHandlerWasCalled = false,\n      originalEventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>click me</a>'),\n    click: function() { originalEventHandlerWasCalled = true; },\n    edit: function() { eventHandlerWasCalled = true; }\n  });\n\n  appendView();\n\n  view.$('a').trigger('click');\n\n  ok(eventHandlerWasCalled && originalEventHandlerWasCalled, \"Both event handlers were called\");\n});\n\ntest(\"should not bubble an event from action helper to original parent event if it returns false\", function() {\n  var eventHandlerWasCalled = false,\n      originalEventHandlerWasCalled = false;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>click me</a>'),\n    click: function() { originalEventHandlerWasCalled = true; },\n    edit: function() { eventHandlerWasCalled = true; return false; }\n  });\n\n  appendView();\n\n  view.$('a').trigger('click');\n\n  ok(eventHandlerWasCalled, \"The child handler was called\");\n  ok(!originalEventHandlerWasCalled, \"The parent handler was not called\");\n});\n\ntest(\"should be compatible with sending events to a state manager\", function() {\n  var eventNameCalled,\n      eventObjectSent,\n      manager = {\n        isState: true,\n        send: function(eventName, eventObject) { eventNameCalled = eventName; eventObjectSent = eventObject; }\n      };\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\" target=\"manager\"}}>click me</a>'),\n    manager: manager\n  });\n\n  appendView();\n\n  view.$('a').trigger('click');\n\n  equal(eventNameCalled, \"edit\", \"The state manager's send method was called\");\n  ok(eventObjectSent, \"The state manager's send method was called with an event object\");\n});\n\ntest(\"should allow 'send' as action name (#594)\", function() {\n  var eventHandlerWasCalled = false;\n  var eventObjectSent;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"send\" }}>send</a>'),\n    send: function(evt){ eventHandlerWasCalled = true; eventObjectSent = evt; }\n  });\n\n  appendView();\n\n  view.$('a').trigger('click');\n\n  ok(eventHandlerWasCalled, \"The view's send method was called\");\n  ok(eventObjectSent, \"Callback was called with an event object\");\n});\n\n\ntest(\"should send the view, event and current Handlebars context to the action\", function() {\n  var passedTarget;\n  var passedView;\n  var passedEvent;\n  var passedContext;\n\n  var aTarget = Ember.View.create({\n    edit: function(event) {\n      passedTarget = this;\n      passedEvent = event;\n    }\n  });\n\n  var aContext = { aTarget: aTarget };\n\n  view = Ember.View.create({\n    aContext: aContext,\n    template: Ember.Handlebars.compile('{{#with aContext}}<a id=\"edit\" href=\"#\" {{action edit this target=\"aTarget\"}}>edit</a>{{/with}}')\n  });\n\n  appendView();\n\n  view.$('#edit').trigger('click');\n\n  strictEqual(passedTarget, aTarget, \"the action is called with the target as this\");\n  strictEqual(passedEvent.view, view, \"the view passed is the view containing the action helper\");\n  deepEqual(passedEvent.context, aContext, \"the context is passed\");\n  equal(passedEvent.type, 'click', \"the event passed is the event triggered for the action helper\");\n});\n\ntest(\"should only trigger actions for the event they were registered on\", function() {\n  var editWasCalled = false;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<a href=\"#\" {{action \"edit\"}}>edit</a>'),\n    edit: function() { editWasCalled = true; }\n  });\n\n  appendView();\n  \n  view.$('a').trigger('mouseover');\n\n  ok(!editWasCalled, \"The action wasn't called\");\n});\n\ntest(\"should allow a context to be specified\", function() {\n  var passedContext,\n      model = Ember.Object.create();\n\n  view = Ember.View.create({\n    people: Ember.A([model]),\n    template: Ember.Handlebars.compile('{{#each person in people}}<button {{action edit person}}>edit</button>{{/each}}'),\n    edit: function(event) {\n      passedContext = event.context;\n    }\n  });\n\n  appendView();\n\n  view.$('button').trigger('click');\n\n  equal(passedContext, model, \"the action was called with the passed context\");\n});\n\ntest(\"should allow multiple contexts to be specified\", function() {\n  var passedContexts,\n      models = [Ember.Object.create(), Ember.Object.create()];\n\n  view = Ember.View.create({\n    modelA: models[0],\n    modelB: models[1],\n    template: Ember.Handlebars.compile('<button {{action edit modelA modelB}}>edit</button>'),\n    edit: function(event) {\n      passedContexts = event.contexts;\n    }\n  });\n\n  appendView();\n\n  view.$('button').trigger('click');\n\n  deepEqual(passedContexts, models, \"the action was called with the passed contexts\");\n});\n\n})();\n//@ sourceURL=ember-handlebars/~tests/helpers/action_test");