minispade.register('ember-handlebars/~tests/handlebars_test', "(function() {// ==========================================================================\n// Project:   Ember Handlebars Views\n// Copyright: ©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TemplateTests:true MyApp:true App:true */\n\nvar get = Ember.get, set = Ember.set;\nvar forEach = Ember.EnumerableUtils.forEach;\n\nvar firstGrandchild = function(view) {\n  return get(get(view, 'childViews').objectAt(0), 'childViews').objectAt(0);\n};\nvar nthChild = function(view, nth) {\n  return get(view, 'childViews').objectAt(nth || 0);\n};\nvar firstChild = nthChild;\n\nvar originalLog, logCalls;\n\n(function() {\n\n  Ember.$.fn.caretPosition = function() {\n      var ctrl = this[0];\n\n      var CaretPos = 0;\n      // IE Support\n      if (document.selection) {\n\n          ctrl.focus();\n          var Sel = document.selection.createRange ();\n\n          Sel.moveStart ('character', -ctrl.value.length);\n\n          CaretPos = Sel.text.length;\n      }\n      // Firefox support\n      else if (ctrl.selectionStart || ctrl.selectionStart === '0') {\n          CaretPos = ctrl.selectionStart;\n      }\n\n      return (CaretPos);\n  };\n\n\n  Ember.$.fn.setCaretPosition = function(pos) {\n      var ctrl = this[0];\n\n      if(ctrl.setSelectionRange) {\n          ctrl.focus();\n          ctrl.setSelectionRange(pos,pos);\n      } else if (ctrl.createTextRange) {\n          var range = ctrl.createTextRange();\n          range.collapse(true);\n          range.moveEnd('character', pos);\n          range.moveStart('character', pos);\n          range.select();\n      }\n  };\n\n})();\n\nvar view;\n\nvar appendView = function() {\n  Ember.run(function() { view.appendTo('#qunit-fixture'); });\n};\n\nvar additionalTeardown;\n\n/**\n  This module specifically tests integration with Handlebars and Ember-specific\n  Handlebars extensions.\n\n  If you add additional template support to Ember.View, you should create a new\n  file in which to test.\n*/\nmodule(\"Ember.View - handlebars integration\", {\n  setup: function() {\n    window.TemplateTests = Ember.Namespace.create();\n  },\n\n  teardown: function() {\n    if (view) {\n      Ember.run(function() {\n        view.destroy();\n      });\n      view = null;\n    }\n    window.TemplateTests = undefined;\n  }\n});\n\ntest(\"template view should call the function of the associated template\", function() {\n  view = Ember.View.create({\n    templateName: 'test_template',\n    templates: Ember.Object.create({\n      test_template: Ember.Handlebars.compile(\"<h1 id='twas-called'>template was called</h1>\")\n    })\n  });\n\n  appendView();\n\n  ok(view.$('#twas-called').length, \"the named template was called\");\n});\n\ntest(\"template view should call the function of the associated template with itself as the context\", function() {\n  view = Ember.View.create({\n    templateName: 'test_template',\n\n    _personName: \"Tom DAAAALE\",\n    _i: 0,\n\n    personName: Ember.computed(function() {\n      this._i++;\n      return this._personName + this._i;\n    }).cacheable(),\n\n    templates: Ember.Object.create({\n      test_template: Ember.Handlebars.compile(\"<h1 id='twas-called'>template was called for {{personName}}. Yea {{personName}}</h1>\")\n    })\n  });\n\n  appendView();\n\n  equal(\"template was called for Tom DAAAALE1. Yea Tom DAAAALE1\", view.$('#twas-called').text(), \"the named template was called with the view as the data source\");\n});\n\ntest(\"should allow values from normal JavaScript hash objects to be used\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#with person}}{{firstName}} {{lastName}} (and {{pet.name}}){{/with}}'),\n\n    person: {\n      firstName: 'Señor',\n      lastName: 'CFC',\n      pet: {\n        name: 'Fido'\n      }\n    }\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"Señor CFC (and Fido)\", \"prints out values from a hash\");\n});\n\ntest(\"htmlSafe should return an instance of Handlebars.SafeString\", function() {\n  var safeString = Ember.String.htmlSafe(\"you need to be more <b>bold</b>\");\n\n  ok(safeString instanceof Handlebars.SafeString, \"should return SafeString\");\n});\n\ntest(\"should escape HTML in normal mustaches\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{output}}'),\n    output: \"you need to be more <b>bold</b>\"\n  });\n\n  Ember.run(function() { view.appendTo('#qunit-fixture'); });\n  equal(view.$('b').length, 0, \"does not create an element\");\n  equal(view.$().text(), 'you need to be more <b>bold</b>', \"inserts entities, not elements\");\n\n  Ember.run(function() { set(view, 'output', \"you are so <i>super</i>\"); });\n  equal(view.$().text(), 'you are so <i>super</i>', \"updates with entities, not elements\");\n  equal(view.$('i').length, 0, \"does not create an element when value is updated\");\n});\n\ntest(\"should not escape HTML in triple mustaches\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{{output}}}'),\n    output: \"you need to be more <b>bold</b>\"\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('b').length, 1, \"creates an element\");\n\n  Ember.run(function() {\n    set(view, 'output', \"you are so <i>super</i>\");\n  });\n\n  equal(view.$('i').length, 1, \"creates an element when value is updated\");\n});\n\ntest(\"should not escape HTML if string is a Handlebars.SafeString\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{output}}'),\n    output: new Handlebars.SafeString(\"you need to be more <b>bold</b>\")\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('b').length, 1, \"creates an element\");\n\n  Ember.run(function() {\n    set(view, 'output', new Handlebars.SafeString(\"you are so <i>super</i>\"));\n  });\n\n  equal(view.$('i').length, 1, \"creates an element when value is updated\");\n});\n\nTemplateTests = {};\n\ntest(\"child views can be inserted using the {{view}} Handlebars helper\", function() {\n  var templates = Ember.Object.create({\n    nester: Ember.Handlebars.compile(\"<h1 id='hello-world'>Hello {{world}}</h1>{{view \\\"TemplateTests.LabelView\\\"}}\"),\n    nested: Ember.Handlebars.compile(\"<div id='child-view'>Goodbye {{cruel}} {{world}}</div>\")\n  });\n\n  TemplateTests.LabelView = Ember.View.extend({\n    tagName: \"aside\",\n    world: \"world?\",\n    templateName: 'nested',\n    templates: templates\n  });\n\n  view = Ember.View.create({\n    world: \"world!\",\n    templateName: 'nester',\n    templates: templates\n  });\n\n  if (Ember.VIEW_PRESERVES_CONTEXT) {\n    view.set('cruel', \"cruel\");\n  } else {\n    TemplateTests.LabelView.reopen({ cruel: \"cruel\" });\n  }\n\n  appendView();\n\n  ok(view.$(\"#hello-world:contains('Hello world!')\").length, \"The parent view renders its contents\");\n\n  if (Ember.VIEW_PRESERVES_CONTEXT) {\n    ok(view.$(\"#child-view:contains('Goodbye cruel world!')\").length === 1, \"The child view renders its content once\");\n    ok(view.$().text().match(/Hello world!.*Goodbye cruel world\\!/), \"parent view should appear before the child view\");\n  } else {\n    ok(view.$(\"#child-view:contains('Goodbye cruel world?')\").length === 1, \"The child view renders its content once\");\n    ok(view.$().text().match(/Hello world!.*Goodbye cruel world\\?/), \"parent view should appear before the child view\");\n  }\n});\n\ntest(\"should accept relative paths to views\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('Hey look, at {{view \"myCool.view\"}}'),\n\n    myCool: Ember.Object.create({\n      view: Ember.View.extend({\n        template: Ember.Handlebars.compile(\"my cool view\")\n      })\n    })\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"Hey look, at my cool view\");\n});\n\ntest(\"child views can be inserted inside a bind block\", function() {\n  var templates = Ember.Object.create({\n    nester: Ember.Handlebars.compile(\"<h1 id='hello-world'>Hello {{world}}</h1>{{view \\\"TemplateTests.BQView\\\"}}\"),\n    nested: Ember.Handlebars.compile(\"<div id='child-view'>Goodbye {{#with content}}{{blah}} {{view \\\"TemplateTests.OtherView\\\"}}{{/with}} {{world}}</div>\"),\n    other: Ember.Handlebars.compile(\"cruel\")\n  });\n\n  TemplateTests.BQView = Ember.View.extend({\n    tagName: \"blockquote\",\n    cruel: \"cruel\",\n    world: \"world?\",\n    templateName: 'nested',\n    templates: templates\n  });\n\n  TemplateTests.OtherView = Ember.View.extend({\n    templates: templates,\n    templateName: 'other'\n  });\n\n  view = Ember.View.create({\n    world: \"world!\",\n    templateName: 'nester',\n    templates: templates\n  });\n\n  if (Ember.VIEW_PRESERVES_CONTEXT) {\n    view.set('content', Ember.Object.create({ blah: \"wot\" }));\n  } else {\n    TemplateTests.BQView.reopen({ content: Ember.Object.create({ blah: \"wot\" }) });\n  }\n\n  appendView();\n\n  ok(view.$(\"#hello-world:contains('Hello world!')\").length, \"The parent view renders its contents\");\n\n  if (Ember.VIEW_PRESERVES_CONTEXT) {\n    ok(view.$(\"blockquote\").text().match(/Goodbye.*wot.*cruel.*world\\!/), \"The child view renders its content once\");\n    ok(view.$().text().match(/Hello world!.*Goodbye.*wot.*cruel.*world\\!/), \"parent view should appear before the child view\");\n  } else {\n    ok(view.$(\"blockquote\").text().match(/Goodbye.*wot.*cruel.*world\\?/), \"The child view renders its content once\");\n    ok(view.$().text().match(/Hello world!.*Goodbye.*wot.*cruel.*world\\?/), \"parent view should appear before the child view\");\n  }\n});\n\ntest(\"Ember.View should bind properties in the parent context\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{wham}}-{{../blam}}{{/with}}</h1>'),\n\n    content: Ember.Object.create({\n      wham: 'bam'\n    }),\n\n    blam: \"shazam\"\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('#first').text(), \"bam-shazam\", \"renders parent properties\");\n});\n\n\ntest(\"Ember.View should bind properties in the grandparent context\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{#with thankYou}}{{value}}-{{../wham}}-{{../../blam}}{{/with}}{{/with}}</h1>'),\n\n    content: Ember.Object.create({\n      wham: 'bam',\n      thankYou: Ember.Object.create({\n        value: \"ma'am\"\n      })\n    }),\n\n    blam: \"shazam\"\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('#first').text(), \"ma'am-bam-shazam\", \"renders grandparent properties\");\n});\n\ntest(\"Ember.View should update when a property changes and the bind helper is used\", function() {\n  var templates = Ember.Object.create({\n   foo: Ember.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{bind \"wham\"}}{{/with}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: Ember.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\"\n    })\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('#first').text(), \"bam\", \"precond - view renders Handlebars template\");\n\n  Ember.run(function() { set(get(view, 'content'), 'wham', 'bazam'); });\n  equal(view.$('#first').text(), \"bazam\", \"view updates when a bound property changes\");\n});\n\ntest(\"Ember.View should update when a property changes and no bind helper is used\", function() {\n  var templates = Ember.Object.create({\n   foo: Ember.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{wham}}{{/with}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: Ember.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\"\n    })\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('#first').text(), \"bam\", \"precond - view renders Handlebars template\");\n\n  Ember.run(function() { set(get(view, 'content'), 'wham', 'bazam'); });\n\n  equal(view.$('#first').text(), \"bazam\", \"view updates when a bound property changes\");\n});\n\ntest(\"Ember.View should update when the property used with the #with helper changes\", function() {\n  var templates = Ember.Object.create({\n   foo: Ember.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{wham}}{{/with}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: Ember.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\"\n    })\n  });\n\n  appendView();\n\n  equal(view.$('#first').text(), \"bam\", \"precond - view renders Handlebars template\");\n\n  Ember.run(function() {\n    set(view, 'content', Ember.Object.create({\n      wham: 'bazam'\n    }));\n  });\n\n  equal(view.$('#first').text(), \"bazam\", \"view updates when a bound property changes\");\n});\n\ntest(\"should not update when a property is removed from the view\", function() {\n  var templates = Ember.Object.create({\n    foo: Ember.Handlebars.compile('<h1 id=\"first\">{{#bind \"content\"}}{{#bind \"foo\"}}{{bind \"baz\"}}{{/bind}}{{/bind}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: Ember.Object.create({\n      foo: Ember.Object.create({\n        baz: \"unicorns\"\n      })\n    })\n  });\n\n  appendView();\n\n  equal(view.$('#first').text(), \"unicorns\", \"precond - renders the bound value\");\n\n  var oldContent = get(view, 'content');\n\n  Ember.run(function() {\n    set(view, 'content', Ember.Object.create({\n      foo: Ember.Object.create({\n        baz: \"ninjas\"\n      })\n    }));\n  });\n\n  equal(view.$('#first').text(), 'ninjas', \"updates to new content value\");\n\n  Ember.run(function() {\n    set(oldContent, 'foo.baz', 'rockstars');\n  });\n\n  Ember.run(function() {\n    set(oldContent, 'foo.baz', 'ewoks');\n  });\n\n  equal(view.$('#first').text(), \"ninjas\", \"does not update removed object\");\n});\n\ntest(\"Handlebars templates update properties if a content object changes\", function() {\n  var templates;\n\n  templates = Ember.Object.create({\n    menu: Ember.Handlebars.compile('<h1>Today\\'s Menu</h1>{{#bind \"coffee\"}}<h2>{{color}} coffee</h2><span id=\"price\">{{bind \"price\"}}</span>{{/bind}}')\n  });\n\n  Ember.run(function() {\n    view = Ember.View.create({\n      templateName: 'menu',\n      templates: templates,\n\n      coffee: Ember.Object.create({\n        color: 'brown',\n        price: '$4'\n      })\n    });\n  });\n\n  appendView();\n\n  equal(view.$('h2').text(), \"brown coffee\", \"precond - renders color correctly\");\n  equal(view.$('#price').text(), '$4', \"precond - renders price correctly\");\n\n  Ember.run(function() {\n    set(view, 'coffee', Ember.Object.create({\n      color: \"mauve\",\n      price: \"$4.50\"\n    }));\n  });\n\n  equal(view.$('h2').text(), \"mauve coffee\", \"should update name field when content changes\");\n  equal(view.$('#price').text(), \"$4.50\", \"should update price field when content changes\");\n\n  Ember.run(function() {\n    set(view, 'coffee', Ember.Object.create({\n      color: \"mauve\",\n      price: \"$5.50\"\n    }));\n  });\n\n  equal(view.$('h2').text(), \"mauve coffee\", \"should update name field when content changes\");\n  equal(view.$('#price').text(), \"$5.50\", \"should update price field when content changes\");\n\n  Ember.run(function() {\n    set(view, 'coffee.price', \"$5\");\n  });\n\n  equal(view.$('#price').text(), \"$5\", \"should update price field when price property is changed\");\n\n  Ember.run(function() {\n    view.destroy();\n  });\n});\n\ntest(\"Template updates correctly if a path is passed to the bind helper\", function() {\n  var templates;\n\n  templates = Ember.Object.create({\n    menu: Ember.Handlebars.compile('<h1>{{bind \"coffee.price\"}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'menu',\n    templates: templates,\n\n    coffee: Ember.Object.create({\n      price: '$4'\n    })\n  });\n\n  appendView();\n\n  equal(view.$('h1').text(), \"$4\", \"precond - renders price\");\n\n  Ember.run(function() {\n    set(view, 'coffee.price', \"$5\");\n  });\n\n  equal(view.$('h1').text(), \"$5\", \"updates when property changes\");\n\n  Ember.run(function() {\n    set(view, 'coffee', { price: \"$6\" });\n  });\n\n  equal(view.$('h1').text(), \"$6\", \"updates when parent property changes\");\n});\n\n// test(\"Template updates correctly if a path is passed to the bind helper and the context object is an Ember.ObjectController\", function() {\n//   var templates;\n\n//   templates = Ember.Object.create({\n//     menu: Ember.Handlebars.compile('<h1>{{bind \"coffee.price\"}}</h1>')\n//   });\n\n//   var controller = Ember.ObjectController.create();\n//   var realObject = Ember.Object.create({\n//     price: \"$4\"\n//   });\n\n//   set(controller, 'content', realObject);\n\n//   var view = Ember.View.create({\n//     templateName: 'menu',\n//     templates: templates,\n\n//     coffee: controller\n//   });\n\n//   view.createElement();\n\n//   equal(view.$('h1').text(), \"$4\", \"precond - renders price\");\n\n//   set(realObject, 'price', \"$5\");\n\n//   equal(view.$('h1').text(), \"$5\", \"updates when property is set on real object\");\n\n//   Ember.run(function() {\n//     set(controller, 'price', \"$6\" );\n//   });\n\n//   equal(view.$('h1').text(), \"$6\", \"updates when property is set on object controller\");\n// });\n\ntest(\"should update the block when object passed to #if helper changes\", function() {\n  var templates;\n\n  templates = Ember.Object.create({\n    menu: Ember.Handlebars.compile('<h1>{{#if inception}}{{INCEPTION}}{{/if}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'menu',\n    templates: templates,\n\n    INCEPTION: \"BOOOOOOOONG doodoodoodoodooodoodoodoo\",\n    inception: 'OOOOoooooOOOOOOooooooo'\n  });\n\n  appendView();\n\n  equal(view.$('h1').text(), \"BOOOOOOOONG doodoodoodoodooodoodoodoo\", \"renders block if a string\");\n\n  var tests = [false, null, undefined, [], '', 0];\n\n  forEach(tests, function(val) {\n    Ember.run(function() {\n      set(view, 'inception', val);\n    });\n\n    equal(view.$('h1').text(), '', Ember.String.fmt(\"hides block when conditional is '%@'\", [String(val)]));\n\n    Ember.run(function() {\n      set(view, 'inception', true);\n    });\n\n    equal(view.$('h1').text(), \"BOOOOOOOONG doodoodoodoodooodoodoodoo\", \"precond - renders block when conditional is true\");\n  });\n});\n\ntest(\"should update the block when object passed to #unless helper changes\", function() {\n  var templates;\n\n  templates = Ember.Object.create({\n    advice: Ember.Handlebars.compile('<h1>{{#unless onDrugs}}{{doWellInSchool}}{{/unless}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'advice',\n    templates: templates,\n\n    onDrugs: true,\n    doWellInSchool: \"Eat your vegetables\"\n  });\n\n  appendView();\n\n  equal(view.$('h1').text(), \"\", \"hides block if true\");\n\n  var tests = [false, null, undefined, [], '', 0];\n\n  forEach(tests, function(val) {\n    Ember.run(function() {\n      set(view, 'onDrugs', val);\n    });\n\n    equal(view.$('h1').text(), 'Eat your vegetables', Ember.String.fmt(\"renders block when conditional is '%@'; %@\", [String(val), Ember.typeOf(val)]));\n\n    Ember.run(function() {\n      set(view, 'onDrugs', true);\n    });\n\n    equal(view.$('h1').text(), \"\", \"precond - hides block when conditional is true\");\n  });\n});\n\ntest(\"should update the block when object passed to #if helper changes and an inverse is supplied\", function() {\n  var templates;\n\n  templates = Ember.Object.create({\n    menu: Ember.Handlebars.compile('<h1>{{#if inception}}{{INCEPTION}}{{else}}{{SAD}}{{/if}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'menu',\n    templates: templates,\n\n    INCEPTION: \"BOOOOOOOONG doodoodoodoodooodoodoodoo\",\n    inception: false,\n    SAD: 'BOONG?'\n  });\n\n  appendView();\n\n  equal(view.$('h1').text(), \"BOONG?\", \"renders alternate if false\");\n\n  Ember.run(function() { set(view, 'inception', true); });\n\n  var tests = [false, null, undefined, [], '', 0];\n\n  forEach(tests, function(val) {\n    Ember.run(function() {\n      set(view, 'inception', val);\n    });\n\n    equal(view.$('h1').text(), 'BOONG?', Ember.String.fmt(\"renders alternate if %@\", [String(val)]));\n\n    Ember.run(function() {\n      set(view, 'inception', true);\n    });\n\n    equal(view.$('h1').text(), \"BOOOOOOOONG doodoodoodoodooodoodoodoo\", \"precond - renders block when conditional is true\");\n  });\n});\n\n// test(\"Should insert a localized string if the {{loc}} helper is used\", function() {\n//   Ember.stringsFor('en', {\n//     'Brazil': 'Brasilia'\n//   });\n\n//   templates = Ember.Object.create({\n//     'loc': Ember.Handlebars.compile('<h1>Country: {{loc \"Brazil\"}}')\n//   });\n\n//   var view = Ember.View.create({\n//     templateName: 'loc',\n//     templates: templates,\n\n//     country: 'Brazil'\n//   });\n\n//   view.createElement();\n//   equal(view.$('h1').text(), 'Country: Brasilia', \"returns localized value\");\n// });\n\ntest(\"Template views return a no-op function if their template cannot be found\", function() {\n  view = Ember.View.create({\n    templateName: 'cantBeFound'\n  });\n\n  raises(function() {\n    var template = get(view, 'template');\n\n    ok(Ember.typeOf(template) === 'function', 'template should be a function');\n    equal(template(), '', 'should return an empty string');\n  });\n});\n\ntest(\"Template views add an elementId to child views created using the view helper\", function() {\n  var templates = Ember.Object.create({\n    parent: Ember.Handlebars.compile('<div>{{view \"TemplateTests.ChildView\"}}</div>'),\n    child: Ember.Handlebars.compile(\"I can't believe it's not butter.\")\n  });\n\n  TemplateTests.ChildView = Ember.View.extend({\n    templates: templates,\n    templateName: 'child'\n  });\n\n  view = Ember.View.create({\n    templates: templates,\n    templateName: 'parent'\n  });\n\n  appendView();\n  var childView = get(view, 'childViews.firstObject');\n  equal(view.$().children().first().children().first().attr('id'), get(childView, 'elementId'));\n});\n\ntest(\"views set the template of their children to a passed block\", function() {\n  var templates = Ember.Object.create({\n    parent: Ember.Handlebars.compile('<h1>{{#view \"TemplateTests.NoTemplateView\"}}<span>It worked!</span>{{/view}}</h1>')\n  });\n\n  TemplateTests.NoTemplateView = Ember.View.extend();\n\n  view = Ember.View.create({\n    templates: templates,\n    templateName: 'parent'\n  });\n\n  appendView();\n  ok(view.$('h1:has(span)').length === 1, \"renders the passed template inside the parent template\");\n});\n\nif (Ember.VIEW_PRESERVES_CONTEXT) {\n\n  test(\"views render their template in the context of the parent view's context\", function() {\n    var templates = Ember.Object.create({\n      parent: Ember.Handlebars.compile('<h1>{{#with content}}{{#view}}{{firstName}} {{lastName}}{{/view}}{{/with}}</h1>')\n    });\n\n    view = Ember.View.create({\n      templates: templates,\n      templateName: 'parent',\n\n      content: {\n        firstName: \"Lana\",\n        lastName: \"del Heeeyyyyyy\"\n      }\n    });\n\n    appendView();\n    equal(view.$('h1').text(), \"Lana del Heeeyyyyyy\", \"renders properties from parent context\");\n  });\n\n  test(\"views make a view keyword available that allows template to reference view context\", function() {\n    var templates = Ember.Object.create({\n      parent: Ember.Handlebars.compile('<h1>{{#with content}}{{#view subview}}{{view.firstName}} {{lastName}}{{/view}}{{/with}}</h1>')\n    });\n\n    view = Ember.View.create({\n      templates: templates,\n      templateName: 'parent',\n\n      content: {\n        subview: Ember.View.extend({\n          firstName: \"Brodele\"\n        }),\n        firstName: \"Lana\",\n        lastName: \"del Heeeyyyyyy\"\n      }\n    });\n\n    appendView();\n    equal(view.$('h1').text(), \"Brodele del Heeeyyyyyy\", \"renders properties from parent context\");\n  });\n\n} else {\n\n  test(\"should pass hash arguments to the view object\", function() {\n    TemplateTests.bindTestObject = Ember.Object.create({\n      bar: 'bat'\n    });\n\n    TemplateTests.HashArgTemplateView = Ember.View.extend({\n    });\n\n    Ember.run(function() {\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile('{{#view TemplateTests.HashArgTemplateView fooBinding=\"TemplateTests.bindTestObject.bar\"}}{{foo}}{{/view}}')\n      });\n\n      appendView();\n    });\n\n    equal(view.$().text(), \"bat\", \"prints initial bound value\");\n\n    Ember.run(function() {\n      set(TemplateTests.bindTestObject, 'bar', 'brains');\n    });\n\n    equal(view.$().text(), \"brains\", \"prints updated bound value\");\n  });\n\n}\n\ntest(\"should warn if setting a template on a view with a templateName already specified\", function() {\n  view = Ember.View.create({\n    childView: Ember.View.extend({\n      templateName: 'foo'\n    }),\n\n    template: Ember.Handlebars.compile('{{#view childView}}test{{/view}}')\n  });\n\n  raises(function() {\n    appendView();\n  }, Error, \"raises if conflicting template and templateName are provided\");\n\n  Ember.run(function() {\n    view.destroy();\n  });\n\n  view = Ember.View.create({\n    childView: Ember.View.extend(),\n    template: Ember.Handlebars.compile('{{#view childView templateName=\"foo\"}}test{{/view}}')\n  });\n\n  raises(function() {\n    appendView();\n  }, Error, \"raises if conflicting template and templateName are provided via a Handlebars template\");\n});\n\ntest(\"Child views created using the view helper should have their parent view set properly\", function() {\n  TemplateTests = {};\n\n  var template = '{{#view \"Ember.View\"}}{{#view \"Ember.View\"}}{{view \"Ember.View\"}}{{/view}}{{/view}}';\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(template)\n  });\n\n  appendView();\n\n  var childView = firstGrandchild(view);\n  equal(childView, get(firstChild(childView), 'parentView'), 'parent view is correct');\n});\n\ntest(\"Child views created using the view helper should have their IDs registered for events\", function() {\n  TemplateTests = {};\n\n  var template = '{{view \"Ember.View\"}}{{view \"Ember.View\" id=\"templateViewTest\"}}';\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(template)\n  });\n\n  appendView();\n\n  var childView = firstChild(view);\n  var id = childView.$()[0].id;\n  equal(Ember.View.views[id], childView, 'childView without passed ID is registered with Ember.View.views so that it can properly receive events from RootResponder');\n\n  childView = nthChild(view, 1);\n  id = childView.$()[0].id;\n  equal(id, 'templateViewTest', 'precond -- id of childView should be set correctly');\n  equal(Ember.View.views[id], childView, 'childView with passed ID is registered with Ember.View.views so that it can properly receive events from RootResponder');\n});\n\ntest(\"Child views created using the view helper and that have a viewName should be registered as properties on their parentView\", function() {\n  TemplateTests = {};\n\n  var template = '{{#view Ember.View}}{{view Ember.View viewName=\"ohai\"}}{{/view}}';\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(template)\n  });\n\n  appendView();\n\n  var parentView = firstChild(view),\n      childView  = firstGrandchild(view);\n  equal(get(parentView, 'ohai'), childView);\n});\n\ntest(\"Collection views that specify an example view class have their children be of that class\", function() {\n  TemplateTests.ExampleViewCollection = Ember.CollectionView.extend({\n    itemViewClass: Ember.View.extend({\n      isCustom: true\n    }),\n\n    content: Ember.A(['foo'])\n  });\n\n  var parentView = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection \"TemplateTests.ExampleViewCollection\"}}OHAI{{/collection}}')\n  });\n\n  Ember.run(function() {\n    parentView.append();\n  });\n\n  ok(firstGrandchild(parentView).isCustom, \"uses the example view class\");\n\n  Ember.run(function() {\n    parentView.destroy();\n  });\n});\n\ntest(\"itemViewClass works in the #collection helper\", function() {\n  TemplateTests.ExampleController = Ember.ArrayProxy.create({\n    content: Ember.A(['alpha'])\n  });\n\n  TemplateTests.ExampleItemView = Ember.View.extend({\n    isAlsoCustom: true\n  });\n\n  var parentView = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection contentBinding=\"TemplateTests.ExampleController\" itemViewClass=\"TemplateTests.ExampleItemView\"}}beta{{/collection}}')\n  });\n\n  Ember.run(function() {\n    parentView.append();\n  });\n\n  ok(firstGrandchild(parentView).isAlsoCustom, \"uses the example view class specified in the #collection helper\");\n\n  Ember.run(function() {\n    parentView.destroy();\n  });\n});\n\ntest(\"itemViewClass works in the #collection helper relatively\", function() {\n  TemplateTests.ExampleController = Ember.ArrayProxy.create({\n    content: Ember.A(['alpha'])\n  });\n\n  TemplateTests.ExampleItemView = Ember.View.extend({\n    isAlsoCustom: true\n  });\n\n  TemplateTests.CollectionView = Ember.CollectionView.extend({\n    possibleItemView: TemplateTests.ExampleItemView\n  });\n\n  var parentView = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#collection TemplateTests.CollectionView contentBinding=\"TemplateTests.ExampleController\" itemViewClass=\"possibleItemView\"}}beta{{/collection}}')\n  });\n\n  Ember.run(function() {\n    parentView.append();\n  });\n\n  ok(firstGrandchild(parentView).isAlsoCustom, \"uses the example view class specified in the #collection helper\");\n\n  Ember.run(function() {\n    parentView.destroy();\n  });\n});\n\ntest(\"should update boundIf blocks if the conditional changes\", function() {\n  var templates = Ember.Object.create({\n   foo: Ember.Handlebars.compile('<h1 id=\"first\">{{#boundIf \"content.myApp.isEnabled\"}}{{content.wham}}{{/boundIf}}</h1>')\n  });\n\n  view = Ember.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: Ember.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\",\n      myApp: Ember.Object.create({\n        isEnabled: true\n      })\n    })\n  });\n\n  appendView();\n\n  equal(view.$('#first').text(), \"bam\", \"renders block when condition is true\");\n\n  Ember.run(function() {\n    set(get(view, 'content'), 'myApp.isEnabled', false);\n  });\n\n  equal(view.$('#first').text(), \"\", \"re-renders without block when condition is false\");\n\n  Ember.run(function() {\n    set(get(view, 'content'), 'myApp.isEnabled', true);\n  });\n\n  equal(view.$('#first').text(), \"bam\", \"re-renders block when condition changes to true\");\n});\n\ntest(\"should not update boundIf if truthiness does not change\", function() {\n  var renderCount = 0;\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<h1 id=\"first\">{{#boundIf \"shouldDisplay\"}}{{view InnerViewClass}}{{/boundIf}}</h1>'),\n\n    shouldDisplay: true,\n\n    InnerViewClass: Ember.View.extend({\n      template: Ember.Handlebars.compile(\"bam\"),\n\n      render: function() {\n        renderCount++;\n        return this._super.apply(this, arguments);\n      }\n    })\n  });\n\n  appendView();\n\n  equal(renderCount, 1, \"precond - should have rendered once\");\n  equal(view.$('#first').text(), \"bam\", \"renders block when condition is true\");\n\n  Ember.run(function() {\n    set(view, 'shouldDisplay', 1);\n  });\n\n  equal(renderCount, 1, \"should not have rerendered\");\n  equal(view.$('#first').text(), \"bam\", \"renders block when condition is true\");\n});\n\ntest(\"boundIf should support parent access\", function(){\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\n      '<h1 id=\"first\">{{#with content}}{{#with thankYou}}'+\n        '{{#boundIf ../show}}parent{{/boundIf}}-{{#boundIf ../../show}}grandparent{{/boundIf}}'+\n      '{{/with}}{{/with}}</h1>'\n    ),\n\n    content: Ember.Object.create({\n      show: true,\n      thankYou: Ember.Object.create()\n    }),\n\n    show: true\n  });\n\n  appendView();\n\n  equal(view.$('#first').text(), \"parent-grandparent\", \"renders boundIfs using ..\");\n});\n\ntest(\"{{view}} id attribute should set id on layer\", function() {\n  var templates = Ember.Object.create({\n    foo: Ember.Handlebars.compile('{{#view \"TemplateTests.IdView\" id=\"bar\"}}baz{{/view}}')\n  });\n\n  TemplateTests.IdView = Ember.View;\n\n  view = Ember.View.create({\n    templateName: 'foo',\n    templates: templates\n  });\n\n  appendView();\n\n  equal(view.$('#bar').length, 1, \"adds id attribute to layer\");\n  equal(view.$('#bar').text(), 'baz', \"emits content\");\n});\n\ntest(\"{{view}} class attribute should set class on layer\", function() {\n  var templates = Ember.Object.create({\n    foo: Ember.Handlebars.compile('{{#view \"TemplateTests.IdView\" class=\"bar\"}}baz{{/view}}')\n  });\n\n  TemplateTests.IdView = Ember.View;\n\n  view = Ember.View.create({\n    templateName: 'foo',\n    templates: templates\n  });\n\n  appendView();\n\n  equal(view.$('.bar').length, 1, \"adds class attribute to layer\");\n  equal(view.$('.bar').text(), 'baz', \"emits content\");\n});\n\ntest(\"{{view}} should not allow attributeBindings to be set\", function() {\n  raises(function() {\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile('{{view \"Ember.View\" attributeBindings=\"one two\"}}')\n    });\n    appendView();\n  }, /Setting 'attributeBindings' via Handlebars is not allowed/, \"should raise attributeBindings error\");\n});\n\ntest(\"{{view}} should be able to point to a local view\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{view common}}\"),\n\n    common: Ember.View.extend({\n      template: Ember.Handlebars.compile(\"common\")\n    })\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"common\", \"tries to look up view name locally\");\n});\n\ntest(\"{{view}} should evaluate class bindings set to global paths\", function() {\n  Ember.run(function() {\n    window.App = Ember.Application.create({\n      isApp:       true,\n      isGreat:     true,\n      directClass: \"app-direct\",\n      isEnabled:   true\n    });\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{view Ember.TextField class=\"unbound\" classBinding=\"App.isGreat:great App.directClass App.isApp App.isEnabled:enabled:disabled\"}}')\n  });\n\n  appendView();\n\n  ok(view.$('input').hasClass('unbound'),     \"sets unbound classes directly\");\n  ok(view.$('input').hasClass('great'),       \"evaluates classes bound to global paths\");\n  ok(view.$('input').hasClass('app-direct'),  \"evaluates classes bound directly to global paths\");\n  ok(view.$('input').hasClass('is-app'),      \"evaluates classes bound directly to booleans in global paths - dasherizes and sets class when true\");\n  ok(view.$('input').hasClass('enabled'),     \"evaluates ternary operator in classBindings\");\n  ok(!view.$('input').hasClass('disabled'),   \"evaluates ternary operator in classBindings\");\n\n  Ember.run(function() {\n    App.set('isApp', false);\n    App.set('isEnabled', false);\n  });\n\n  ok(!view.$('input').hasClass('is-app'),     \"evaluates classes bound directly to booleans in global paths - removes class when false\");\n  ok(!view.$('input').hasClass('enabled'),    \"evaluates ternary operator in classBindings\");\n  ok(view.$('input').hasClass('disabled'),    \"evaluates ternary operator in classBindings\");\n\n  Ember.run(function() {\n    window.App.destroy();\n  });\n});\n\ntest(\"{{view}} should evaluate class bindings set in the current context\", function() {\n  view = Ember.View.create({\n    isView:      true,\n    isEditable:  true,\n    directClass: \"view-direct\",\n    isEnabled: true,\n    template: Ember.Handlebars.compile('{{view Ember.TextField class=\"unbound\" classBinding=\"isEditable:editable directClass isView isEnabled:enabled:disabled\"}}')\n  });\n\n  appendView();\n\n  ok(view.$('input').hasClass('unbound'),     \"sets unbound classes directly\");\n  ok(view.$('input').hasClass('editable'),    \"evaluates classes bound in the current context\");\n  ok(view.$('input').hasClass('view-direct'), \"evaluates classes bound directly in the current context\");\n  ok(view.$('input').hasClass('is-view'),     \"evaluates classes bound directly to booleans in the current context - dasherizes and sets class when true\");\n  ok(view.$('input').hasClass('enabled'),     \"evaluates ternary operator in classBindings\");\n  ok(!view.$('input').hasClass('disabled'),   \"evaluates ternary operator in classBindings\");\n\n  Ember.run(function() {\n    view.set('isView', false);\n    view.set('isEnabled', false);\n  });\n\n  ok(!view.$('input').hasClass('is-view'),    \"evaluates classes bound directly to booleans in the current context - removes class when false\");\n  ok(!view.$('input').hasClass('enabled'),    \"evaluates ternary operator in classBindings\");\n  ok(view.$('input').hasClass('disabled'),    \"evaluates ternary operator in classBindings\");\n});\n\ntest(\"{{view}} should evaluate class bindings set with either classBinding or classNameBindings\", function() {\n  Ember.run(function() {\n    window.App = Ember.Application.create({\n      isGreat: true,\n      isEnabled: true\n    });\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{view Ember.TextField class=\"unbound\" classBinding=\"App.isGreat:great App.isEnabled:enabled:disabled\" classNameBindings=\"App.isGreat:really-great App.isEnabled:really-enabled:really-disabled\"}}')\n  });\n\n  appendView();\n\n  ok(view.$('input').hasClass('unbound'),          \"sets unbound classes directly\");\n  ok(view.$('input').hasClass('great'),            \"evaluates classBinding\");\n  ok(view.$('input').hasClass('really-great'),     \"evaluates classNameBinding\");\n  ok(view.$('input').hasClass('enabled'),          \"evaluates ternary operator in classBindings\");\n  ok(view.$('input').hasClass('really-enabled'),   \"evaluates ternary operator in classBindings\");\n  ok(!view.$('input').hasClass('disabled'),        \"evaluates ternary operator in classBindings\");\n  ok(!view.$('input').hasClass('really-disabled'), \"evaluates ternary operator in classBindings\");\n\n  Ember.run(function() {\n    App.set('isEnabled', false);\n  });\n\n  ok(!view.$('input').hasClass('enabled'),        \"evaluates ternary operator in classBindings\");\n  ok(!view.$('input').hasClass('really-enabled'), \"evaluates ternary operator in classBindings\");\n  ok(view.$('input').hasClass('disabled'),        \"evaluates ternary operator in classBindings\");\n  ok(view.$('input').hasClass('really-disabled'), \"evaluates ternary operator in classBindings\");\n\n  Ember.run(function() {\n    window.App.destroy();\n  });\n});\n\ntest(\"{{view}} should evaluate other attribute bindings set to global paths\", function() {\n  Ember.run(function() {\n    window.App = Ember.Application.create({\n      name: \"myApp\"\n    });\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{view Ember.TextField valueBinding=\"App.name\"}}')\n  });\n\n  appendView();\n\n  equal(view.$('input').attr('value'), \"myApp\", \"evaluates attributes bound to global paths\");\n\n  Ember.run(function() {\n    window.App.destroy();\n  });\n});\n\ntest(\"{{view}} should evaluate other attributes bindings set in the current context\", function() {\n  view = Ember.View.create({\n    name: \"myView\",\n    template: Ember.Handlebars.compile('{{view Ember.TextField valueBinding=\"name\"}}')\n  });\n\n  appendView();\n\n  equal(view.$('input').attr('value'), \"myView\", \"evaluates attributes bound in the current context\");\n});\n\ntest(\"{{view}} should be able to bind class names to truthy properties\", function() {\n  var templates = Ember.Object.create({\n    template: Ember.Handlebars.compile('{{#view \"TemplateTests.classBindingView\" classBinding=\"number:is-truthy\"}}foo{{/view}}')\n  });\n\n  TemplateTests.classBindingView = Ember.View.extend();\n\n  view = Ember.View.create({\n    number: 5,\n    templateName: 'template',\n    templates: templates\n  });\n\n  appendView();\n\n  equal(view.$('.is-truthy').length, 1, \"sets class name\");\n\n  Ember.run(function() {\n    set(view, 'number', 0);\n  });\n\n  equal(view.$('.is-truthy').length, 0, \"removes class name if bound property is set to falsey\");\n});\n\ntest(\"should be able to bind element attributes using {{bindAttr}}\", function() {\n  var template = Ember.Handlebars.compile('<img {{bindAttr src=\"content.url\" alt=\"content.title\"}}>');\n\n  view = Ember.View.create({\n    template: template,\n    content: Ember.Object.create({\n      url: \"http://www.emberjs.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    })\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('src'), \"http://www.emberjs.com/assets/images/logo.png\", \"sets src attribute\");\n  equal(view.$('img').attr('alt'), \"The SproutCore Logo\", \"sets alt attribute\");\n\n  Ember.run(function() {\n    set(view, 'content.title', \"El logo de Eember\");\n  });\n\n  equal(view.$('img').attr('alt'), \"El logo de Eember\", \"updates alt attribute when content's title attribute changes\");\n\n  Ember.run(function() {\n    set(view, 'content', Ember.Object.create({\n      url: \"http://www.thegooglez.com/theydonnothing\",\n      title: \"I CAN HAZ SEARCH\"\n    }));\n  });\n\n  equal(view.$('img').attr('alt'), \"I CAN HAZ SEARCH\", \"updates alt attribute when content object changes\");\n\n  Ember.run(function() {\n    set(view, 'content', {\n      url: \"http://www.emberjs.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    });\n  });\n\n  equal(view.$('img').attr('alt'), \"The SproutCore Logo\", \"updates alt attribute when content object is a hash\");\n\n  Ember.run(function() {\n    set(view, 'content', Ember.Object.create({\n      url: \"http://www.emberjs.com/assets/images/logo.png\",\n      title: Ember.computed(function() {\n        return \"Nanananana Ember!\";\n      })\n    }));\n  });\n\n  equal(view.$('img').attr('alt'), \"Nanananana Ember!\", \"updates alt attribute when title property is computed\");\n});\n\ntest(\"should be able to bind to view attributes with {{bindAttr}}\", function() {\n  view = Ember.View.create({\n    value: 'Test',\n    template: Ember.Handlebars.compile('<img src=\"test.jpg\" {{bindAttr alt=\"view.value\"}}>')\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('alt'), \"Test\", \"renders initial value\");\n\n  Ember.run(function() {\n    view.set('value', 'Updated');\n  });\n\n  equal(view.$('img').attr('alt'), \"Updated\", \"updates value\");\n});\n\ntest(\"should be able to bind to globals with {{bindAttr}}\", function() {\n  TemplateTests.set('value', 'Test');\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<img src=\"test.jpg\" {{bindAttr alt=\"TemplateTests.value\"}}>')\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('alt'), \"Test\", \"renders initial value\");\n\n  Ember.run(function() {\n    TemplateTests.set('value', 'Updated');\n  });\n\n  equal(view.$('img').attr('alt'), \"Updated\", \"updates value\");\n});\n\ntest(\"should not allow XSS injection via {{bindAttr}}\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<img src=\"test.jpg\" {{bindAttr alt=\"content.value\"}}>'),\n    content: {\n      value: 'Trololol\" onmouseover=\"alert(\\'HAX!\\');'\n    }\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('onmouseover'), undefined);\n  // If the whole string is here, then it means we got properly escaped\n  equal(view.$('img').attr('alt'), 'Trololol\" onmouseover=\"alert(\\'HAX!\\');');\n});\n\ntest(\"should be able to bind use {{bindAttr}} more than once on an element\", function() {\n  var template = Ember.Handlebars.compile('<img {{bindAttr src=\"content.url\"}} {{bindAttr alt=\"content.title\"}}>');\n\n  view = Ember.View.create({\n    template: template,\n    content: Ember.Object.create({\n      url: \"http://www.emberjs.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    })\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('src'), \"http://www.emberjs.com/assets/images/logo.png\", \"sets src attribute\");\n  equal(view.$('img').attr('alt'), \"The SproutCore Logo\", \"sets alt attribute\");\n\n  Ember.run(function() {\n    set(view, 'content.title', \"El logo de Eember\");\n  });\n\n  equal(view.$('img').attr('alt'), \"El logo de Eember\", \"updates alt attribute when content's title attribute changes\");\n\n  Ember.run(function() {\n    set(view, 'content', Ember.Object.create({\n      url: \"http://www.thegooglez.com/theydonnothing\",\n      title: \"I CAN HAZ SEARCH\"\n    }));\n  });\n\n  equal(view.$('img').attr('alt'), \"I CAN HAZ SEARCH\", \"updates alt attribute when content object changes\");\n\n  Ember.run(function() {\n    set(view, 'content', {\n      url: \"http://www.emberjs.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    });\n  });\n\n  equal(view.$('img').attr('alt'), \"The SproutCore Logo\", \"updates alt attribute when content object is a hash\");\n\n  Ember.run(function() {\n    set(view, 'content', Ember.Object.create({\n      url: \"http://www.emberjs.com/assets/images/logo.png\",\n      title: Ember.computed(function() {\n        return \"Nanananana Ember!\";\n      })\n    }));\n  });\n\n  equal(view.$('img').attr('alt'), \"Nanananana Ember!\", \"updates alt attribute when title property is computed\");\n\n});\n\ntest(\"should not reset cursor position when text field receives keyUp event\", function() {\n  view = Ember.TextField.create({\n    value: \"Broseidon, King of the Brocean\"\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  view.$().val('Brosiedoon, King of the Brocean');\n  view.$().setCaretPosition(5);\n\n  Ember.run(function() {\n    view.trigger('keyUp', {});\n  });\n\n  equal(view.$().caretPosition(), 5, \"The keyUp event should not result in the cursor being reset due to the bindAttr observers\");\n\n  Ember.run(function() {\n    view.destroy();\n  });\n});\n\ntest(\"should be able to bind element attributes using {{bindAttr}} inside a block\", function() {\n  var template = Ember.Handlebars.compile('{{#with content}}<img {{bindAttr src=\"url\" alt=\"title\"}}>{{/with}}');\n\n  view = Ember.View.create({\n    template: template,\n    content: Ember.Object.create({\n      url: \"http://www.emberjs.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    })\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('src'), \"http://www.emberjs.com/assets/images/logo.png\", \"sets src attribute\");\n  equal(view.$('img').attr('alt'), \"The SproutCore Logo\", \"sets alt attribute\");\n\n  Ember.run(function() {\n    set(view, 'content.title', \"El logo de Eember\");\n  });\n\n  equal(view.$('img').attr('alt'), \"El logo de Eember\", \"updates alt attribute when content's title attribute changes\");\n});\n\ntest(\"should be able to bind class attribute with {{bindAttr}}\", function() {\n  var template = Ember.Handlebars.compile('<img {{bindAttr class=\"foo\"}}>');\n\n  view = Ember.View.create({\n    template: template,\n    foo: 'bar'\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('class'), 'bar', \"renders class\");\n\n  Ember.run(function() {\n    set(view, 'foo', 'baz');\n  });\n\n  equal(view.$('img').attr('class'), 'baz', \"updates class\");\n});\n\ntest(\"should be able to bind class attribute via a truthy property with {{bindAttr}}\", function() {\n  var template = Ember.Handlebars.compile('<img {{bindAttr class=\"isNumber:is-truthy\"}}>');\n\n  view = Ember.View.create({\n    template: template,\n    isNumber: 5\n  });\n\n  appendView();\n\n  equal(view.$('.is-truthy').length, 1, \"sets class name\");\n\n  Ember.run(function() {\n    set(view, 'isNumber', 0);\n  });\n\n  equal(view.$('.is-truthy').length, 0, \"removes class name if bound property is set to something non-truthy\");\n});\n\ntest(\"should be able to bind class to view attribute with {{bindAttr}}\", function() {\n  var template = Ember.Handlebars.compile('<img {{bindAttr class=\"view.foo\"}}>');\n\n  view = Ember.View.create({\n    template: template,\n    foo: 'bar'\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('class'), 'bar', \"renders class\");\n\n  Ember.run(function() {\n    set(view, 'foo', 'baz');\n  });\n\n  equal(view.$('img').attr('class'), 'baz', \"updates class\");\n});\n\ntest(\"should not allow XSS injection via {{bindAttr}} with class\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<img {{bindAttr class=\"foo\"}}>'),\n    foo: '\" onmouseover=\"alert(\\'I am in your classes hacking your app\\');'\n  });\n\n  appendView();\n\n  equal(view.$('img').attr('onmouseover'), undefined);\n  // If the whole string is here, then it means we got properly escaped\n  equal(view.$('img').attr('class'), '\" onmouseover=\"alert(\\'I am in your classes hacking your app\\');');\n});\n\ntest(\"should be able to bind class attribute using ternary operator in {{bindAttr}}\", function() {\n  var template = Ember.Handlebars.compile('<img {{bindAttr class=\"content.isDisabled:disabled:enabled\"}} />');\n  var content = Ember.Object.create({\n    isDisabled: true\n  });\n\n  view = Ember.View.create({\n    template: template,\n    content: content\n  });\n\n  appendView();\n\n  ok(view.$('img').hasClass('disabled'), 'disabled class is rendered');\n  ok(!view.$('img').hasClass('enabled'), 'enabled class is not rendered');\n\n  Ember.run(function() {\n    set(content, 'isDisabled', false);\n  });\n\n  ok(!view.$('img').hasClass('disabled'), 'disabled class is not rendered');\n  ok(view.$('img').hasClass('enabled'), 'enabled class is rendered');\n});\n\ntest(\"should be able to add multiple classes using {{bindAttr class}}\", function() {\n  var template = Ember.Handlebars.compile('<div {{bindAttr class=\"content.isAwesomeSauce content.isAlsoCool content.isAmazing:amazing :is-super-duper content.isEnabled:enabled:disabled\"}}></div>');\n  var content = Ember.Object.create({\n    isAwesomeSauce: true,\n    isAlsoCool: true,\n    isAmazing: true,\n    isEnabled: true\n  });\n\n  view = Ember.View.create({\n    template: template,\n    content: content\n  });\n\n  appendView();\n\n  ok(view.$('div').hasClass('is-awesome-sauce'), \"dasherizes first property and sets classname\");\n  ok(view.$('div').hasClass('is-also-cool'), \"dasherizes second property and sets classname\");\n  ok(view.$('div').hasClass('amazing'), \"uses alias for third property and sets classname\");\n  ok(view.$('div').hasClass('is-super-duper'), \"static class is present\");\n  ok(view.$('div').hasClass('enabled'), \"truthy class in ternary classname definition is rendered\");\n  ok(!view.$('div').hasClass('disabled'), \"falsy class in ternary classname definition is not rendered\");\n\n  Ember.run(function() {\n    set(content, 'isAwesomeSauce', false);\n    set(content, 'isAmazing', false);\n    set(content, 'isEnabled', false);\n  });\n\n  ok(!view.$('div').hasClass('is-awesome-sauce'), \"removes dasherized class when property is set to false\");\n  ok(!view.$('div').hasClass('amazing'), \"removes aliased class when property is set to false\");\n  ok(view.$('div').hasClass('is-super-duper'), \"static class is still present\");\n  ok(!view.$('div').hasClass('enabled'), \"truthy class in ternary classname definition is not rendered\");\n  ok(view.$('div').hasClass('disabled'), \"falsy class in ternary classname definition is rendered\");\n});\n\ntest(\"should be able to bind classes to globals with {{bindAttr class}}\", function() {\n  TemplateTests.set('isOpen', true);\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('<img src=\"test.jpg\" {{bindAttr class=\"TemplateTests.isOpen\"}}>')\n  });\n\n  appendView();\n\n  ok(view.$('img').hasClass('is-open'), \"sets classname to the dasherized value of the global property\");\n\n  Ember.run(function() {\n    TemplateTests.set('isOpen', false);\n  });\n\n  ok(!view.$('img').hasClass('is-open'), \"removes the classname when the global property has changed\");\n});\n\ntest(\"should be able to bindAttr to 'this' in an {{#each}} block\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#each images}}<img {{bindAttr src=\"this\"}}>{{/each}}'),\n    images: Ember.A(['one.png', 'two.jpg', 'three.gif'])\n  });\n\n  appendView();\n\n  var images = view.$('img');\n  ok(/one\\.png$/.test(images[0].src));\n  ok(/two\\.jpg$/.test(images[1].src));\n  ok(/three\\.gif$/.test(images[2].src));\n});\n\ntest(\"should be able to bind classes to 'this' in an {{#each}} block with {{bindAttr class}}\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#each items}}<li {{bindAttr class=\"this\"}}>Item</li>{{/each}}'),\n    items: Ember.A(['a', 'b', 'c'])\n  });\n\n  appendView();\n\n  ok(view.$('li').eq(0).hasClass('a'), \"sets classname to the value of the first item\");\n  ok(view.$('li').eq(1).hasClass('b'), \"sets classname to the value of the second item\");\n  ok(view.$('li').eq(2).hasClass('c'), \"sets classname to the value of the third item\");\n});\n\ntest(\"should be able to output a property without binding\", function(){\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\n      '<div id=\"first\">{{unbound content.anUnboundString}}</div>'+\n      '{{#with content}}<div id=\"second\">{{unbound ../anotherUnboundString}}</div>{{/with}}'\n    ),\n\n    content: Ember.Object.create({\n      anUnboundString: \"No spans here, son.\"\n    }),\n\n    anotherUnboundString: \"Not here, either.\"\n  });\n\n  appendView();\n\n  equal(view.$('#first').html(), \"No spans here, son.\");\n  equal(view.$('#second').html(), \"Not here, either.\");\n});\n\ntest(\"should allow standard Handlebars template usage\", function() {\n  view = Ember.View.create({\n    name: \"Erik\",\n    template: Handlebars.compile(\"Hello, {{name}}\")\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$().text(), \"Hello, Erik\");\n});\n\ntest(\"should be able to use standard Handlebars #each helper\", function() {\n  view = Ember.View.create({\n    items: ['a', 'b', 'c'],\n    template: Handlebars.compile(\"{{#each items}}{{this}}{{/each}}\")\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$().html(), \"abc\");\n});\n\ntest(\"should be able to use unbound helper in #each helper\", function() {\n  view = Ember.View.create({\n    items: Ember.A(['a', 'b', 'c', 1, 2, 3]),\n    template: Ember.Handlebars.compile(\n      \"<ul>{{#each items}}<li>{{unbound this}}</li>{{/each}}</ul>\")\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"abc123\");\n  equal(view.$('li').children().length, 0, \"No markers\");\n});\n\ntest(\"should be able to use unbound helper in #each helper (with objects)\", function() {\n  view = Ember.View.create({\n    items: Ember.A([{wham: 'bam'}, {wham: 1}]),\n    template: Ember.Handlebars.compile(\n      \"<ul>{{#each items}}<li>{{unbound wham}}</li>{{/each}}</ul>\")\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"bam1\");\n  equal(view.$('li').children().length, 0, \"No markers\");\n});\n\ntest(\"should work with precompiled templates\", function() {\n  var templateString = Ember.Handlebars.precompile(\"{{value}}\"),\n      compiledTemplate = Ember.Handlebars.template(eval('('+templateString+')'));\n  view = Ember.View.create({\n    value: \"rendered\",\n    template: compiledTemplate\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"rendered\", \"the precompiled template was rendered\");\n\n  Ember.run(function() { view.set('value', 'updated'); });\n\n  equal(view.$().text(), \"updated\", \"the precompiled template was updated\");\n});\n\ntest(\"should expose a controller keyword when present on the view\", function() {\n  var templateString = \"{{controller.foo}}{{#view}}{{controller.baz}}{{/view}}\";\n  view = Ember.View.create({\n    controller: Ember.Object.create({\n      foo: \"bar\",\n      baz: \"bang\"\n    }),\n\n    template: Ember.Handlebars.compile(templateString)\n  });\n\n  Ember.run(function() {\n    view.appendTo(\"#qunit-fixture\");\n  });\n\n  equal(view.$().text(), \"barbang\", \"renders values from controller and parent controller\");\n\n  var controller = get(view, 'controller');\n\n  Ember.run(function() {\n    controller.set('foo', \"BAR\");\n    controller.set('baz', \"BLARGH\");\n  });\n\n  equal(view.$().text(), \"BARBLARGH\", \"updates the DOM when a bound value is updated\");\n\n  Ember.run(function() {\n    view.destroy();\n  });\n\n  view = Ember.View.create({\n    controller: \"aString\",\n    template: Ember.Handlebars.compile(\"{{controller}}\")\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$().text(), \"aString\", \"renders the controller itself if no additional path is specified\");\n});\n\ntest(\"should expose a controller keyword that can be used in conditionals\", function() {\n  var templateString = \"{{#view}}{{#if controller}}{{controller.foo}}{{/if}}{{/view}}\";\n  view = Ember.View.create({\n    controller: Ember.Object.create({\n      foo: \"bar\"\n    }),\n\n    template: Ember.Handlebars.compile(templateString)\n  });\n\n  Ember.run(function() {\n    view.appendTo(\"#qunit-fixture\");\n  });\n\n  equal(view.$().text(), \"bar\", \"renders values from controller and parent controller\");\n\n  Ember.run(function() {\n    view.set('controller', null);\n  });\n\n  equal(view.$().text(), \"\", \"updates the DOM when the controller is changed\");\n});\n\ntest(\"should expose a controller keyword that persists through Ember.ContainerView\", function() {\n  var templateString = \"{{view Ember.ContainerView}}\";\n  view = Ember.View.create({\n    controller: Ember.Object.create({\n      foo: \"bar\"\n    }),\n\n    template: Ember.Handlebars.compile(templateString)\n  });\n\n  Ember.run(function() {\n    view.appendTo(\"#qunit-fixture\");\n  });\n\n  var containerView = get(view, 'childViews.firstObject');\n  var viewInstanceToBeInserted = Ember.View.create({\n    template: Ember.Handlebars.compile('{{controller.foo}}')\n  });\n\n  Ember.run(function() {\n    get(containerView, 'childViews').pushObject(viewInstanceToBeInserted);\n  });\n\n  equal(viewInstanceToBeInserted.$().text(), \"bar\", \"renders value from parent's controller\");\n});\n\ntest(\"should expose a view keyword\", function() {\n  var templateString = '{{#with differentContent}}{{view.foo}}{{#view baz=\"bang\"}}{{view.baz}}{{/view}}{{/with}}';\n  view = Ember.View.create({\n    differentContent: {\n      view: {\n        foo: \"WRONG\",\n        baz: \"WRONG\"\n      }\n    },\n\n    foo: \"bar\",\n\n    template: Ember.Handlebars.compile(templateString)\n  });\n\n  Ember.run(function() {\n    view.appendTo(\"#qunit-fixture\");\n  });\n\n  equal(view.$().text(), \"barbang\", \"renders values from view and child view\");\n});\n\ntest(\"Ember.Button targets should respect keywords\", function() {\n  Ember.TESTING_DEPRECATION = true;\n\n  try {\n    var templateString = '{{#with view.anObject}}{{view Ember.Button target=\"controller.foo\"}}{{/with}}';\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile(templateString),\n      anObject: {},\n      controller: {\n        foo: \"bar\"\n      }\n    });\n\n    Ember.run(function() {\n      view.appendTo('#qunit-fixture');\n    });\n\n    var button = view.get('childViews').objectAt(0);\n    equal(button.get('targetObject'), \"bar\", \"resolves the target\");\n  } finally {\n    Ember.TESTING_DEPRECATION = false;\n  }\n});\n\ntest(\"should be able to explicitly set a view's context\", function() {\n  var context = Ember.Object.create({\n    test: 'test'\n  });\n\n  TemplateTests.CustomContextView = Ember.View.extend({\n    context: context,\n    template: Ember.Handlebars.compile(\"{{test}}\")\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{view TemplateTests.CustomContextView}}\")\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"test\");\n});\n\nmodule(\"Ember.View - handlebars integration\", {\n  setup: function() {\n    originalLog = Ember.Logger.log;\n    logCalls = [];\n    Ember.Logger.log = function(arg) { logCalls.push(arg); };\n  },\n\n  teardown: function() {\n    if (view) {\n      Ember.run(function() {\n        view.destroy();\n      });\n      view = null;\n    }\n\n    Ember.Logger.log = originalLog;\n  }\n});\n\ntest(\"should be able to log a property\", function(){\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{log value}}{{#with content}}{{log ../valueTwo}}{{/with}}'),\n\n    value: 'one',\n    valueTwo: 'two',\n\n    content: Ember.Object.create({})\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"\", \"shouldn't render any text\");\n  equal(logCalls[0], 'one', \"should call log with value\");\n  equal(logCalls[1], 'two', \"should call log with valueTwo\");\n});\n\ntest(\"should be able to log a view property\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{log view.value}}'),\n    value: 'one'\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"\", \"shouldn't render any text\");\n  equal(logCalls[0], 'one', \"should call log with value\");\n});\n\ntest(\"should be able to log `this`\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#each items}}{{log this}}{{/each}}'),\n    items: Ember.A(['one', 'two'])\n  });\n\n  appendView();\n\n  equal(view.$().text(), \"\", \"shouldn't render any text\");\n  equal(logCalls[0], 'one', \"should call log with item one\");\n  equal(logCalls[1], 'two', \"should call log with item two\");\n});\n\n\nmodule(\"Templates redrawing and bindings\", {\n  setup: function(){\n    MyApp = Ember.Object.create({});\n  },\n  teardown: function(){\n    Ember.run(function() {\n      if (view) view.destroy();\n    });\n    window.MyApp = null;\n  }\n});\n\ntest(\"should be able to update when bound property updates\", function(){\n  MyApp.set('controller', Ember.Object.create({name: 'first'}));\n\n  var View = Ember.View.extend({\n    template: Ember.Handlebars.compile('<i>{{value.name}}, {{computed}}</i>'),\n    valueBinding: 'MyApp.controller',\n    computed: Ember.computed(function(){\n      return this.get('value.name') + ' - computed';\n    }).property('value').volatile()\n  });\n  \n  Ember.run(function(){\n    view = View.create();\n  });\n  \n  appendView();\n\n  Ember.run(function(){\n    MyApp.set('controller', Ember.Object.create({\n      name: 'second'\n    }));\n  });\n\n  equal(view.get('computed'), \"second - computed\", \"view computed properties correctly update\");\n  equal(view.$('i').text(), 'second, second - computed', \"view rerenders when bound properties change\");\n});\n\ntest(\"properties within an if statement should not fail on re-render\", function(){\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#if value}}{{value}}{{/if}}'),\n    value: null\n  });\n\n  appendView();\n\n  equal(view.$().text(), '');\n\n  Ember.run(function(){\n    view.set('value', 'test');\n  });\n\n  equal(view.$().text(), 'test');\n\n  Ember.run(function(){\n    view.set('value', null);\n  });\n\n  equal(view.$().text(), '');\n});\n\ntest(\"views within an if statement should be sane on re-render\", function(){\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#if display}}{{view Ember.TextField}}{{/if}}'),\n    display: false\n  });\n\n  appendView();\n\n  equal(view.$('input').length, 0);\n\n  Ember.run(function(){\n    // Setting twice will trigger the observer twice, this is intentional\n    view.set('display', true);\n    view.set('display', 'yes');\n  });\n\n  var textfield = view.$('input');\n  equal(textfield.length, 1);\n\n  // Make sure the view is still registered in Ember.View.views\n  ok(Ember.View.views[textfield.attr('id')]);\n});\n\ntest(\"the {{this}} helper should not fail on removal\", function(){\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#if show}}{{#each list}}{{this}}{{/each}}{{/if}}'),\n    show: true,\n    list: Ember.A(['a', 'b', 'c'])\n  });\n\n  appendView();\n\n  equal(view.$().text(), 'abc', \"should start property - precond\");\n\n  Ember.run(function(){\n    view.set('show', false);\n  });\n\n  equal(view.$().text(), '');\n});\n\ntest(\"bindings should be relative to the current context\", function() {\n  view = Ember.View.create({\n    museumOpen: true,\n\n    museumDetails: Ember.Object.create({\n      name: \"SFMoMA\",\n      price: 20\n    }),\n\n    museumView: Ember.View.extend({\n      template: Ember.Handlebars.compile('Name: {{view.name}} Price: ${{view.dollars}}')\n    }),\n\n    template: Ember.Handlebars.compile('{{#if museumOpen}} {{view museumView nameBinding=\"museumDetails.name\" dollarsBinding=\"museumDetails.price\"}} {{/if}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(Ember.$.trim(view.$().text()), \"Name: SFMoMA Price: $20\", \"should print baz twice\");\n});\n\ntest(\"bindings should respect keywords\", function() {\n  view = Ember.View.create({\n    museumOpen: true,\n\n    controller: {\n      museumOpen: true,\n      museumDetails: Ember.Object.create({\n        name: \"SFMoMA\",\n        price: 20\n      })\n    },\n\n    museumView: Ember.View.extend({\n      template: Ember.Handlebars.compile('Name: {{view.name}} Price: ${{view.dollars}}')\n    }),\n\n    template: Ember.Handlebars.compile('{{#if view.museumOpen}}{{view view.museumView nameBinding=\"controller.museumDetails.name\" dollarsBinding=\"controller.museumDetails.price\"}}{{/if}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(Ember.$.trim(view.$().text()), \"Name: SFMoMA Price: $20\", \"should print baz twice\");\n});\n\ntest(\"bindings can be 'this', in which case they *are* the current context\", function() {\n  view = Ember.View.create({\n    museumOpen: true,\n\n    museumDetails: Ember.Object.create({\n      name: \"SFMoMA\",\n      price: 20,\n      museumView: Ember.View.extend({\n        template: Ember.Handlebars.compile('Name: {{view.museum.name}} Price: ${{view.museum.price}}')\n      })\n    }),\n\n\n    template: Ember.Handlebars.compile('{{#if museumOpen}} {{#with museumDetails}}{{view museumView museumBinding=\"this\"}} {{/with}}{{/if}}')\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(Ember.$.trim(view.$().text()), \"Name: SFMoMA Price: $20\", \"should print baz twice\");\n});\n\n// https://github.com/emberjs/ember.js/issues/120\n\ntest(\"should not enter an infinite loop when binding an attribute in Handlebars\", function() {\n  expect(0);\n\n  Ember.run(function() {\n    window.App = Ember.Application.create();\n  });\n\n  App.test = Ember.Object.create({ href: 'test' });\n  App.Link = Ember.View.extend({\n    classNames: ['app-link'],\n    tagName: 'a',\n    attributeBindings: ['href'],\n    href: '#none',\n\n    click: function() {\n      return false;\n    }\n  });\n\n  var parentView = Ember.View.create({\n    template: Ember.Handlebars.compile('{{#view App.Link hrefBinding=\"App.test.href\"}} Test {{/view}}')\n  });\n\n\n  Ember.run(function() {\n    parentView.appendTo('#qunit-fixture');\n    // App.Link.create().appendTo('#qunit-fixture');\n  });\n  // equal(view.$().attr('href'), 'test');\n\n  Ember.run(function() {\n    parentView.destroy();\n  });\n\n  Ember.run(function() {\n    window.App.destroy();\n  });\n});\n\ntest(\"should render other templates using the {{template}} helper\", function() {\n  // save a reference to the current global templates hash so we can restore it\n  // after the test.\n  var oldTemplates = Ember.TEMPLATES;\n\n  try {\n    Ember.TEMPLATES = {\n      sub_template: Ember.Handlebars.compile(\"sub-template\")\n    };\n\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile('This {{template \"sub_template\"}} is pretty great.')\n    });\n\n    Ember.run(function() {\n      view.appendTo('#qunit-fixture');\n    });\n\n    equal(Ember.$.trim(view.$().text()), \"This sub-template is pretty great.\");\n  } finally {\n   Ember.TEMPLATES = oldTemplates;\n  }\n});\n\ntest(\"should update bound values after the view is removed and then re-appended\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{#if showStuff}}{{boundValue}}{{else}}Not true.{{/if}}\"),\n    showStuff: true,\n    boundValue: \"foo\"\n  });\n  \n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n  \n  equal(Ember.$.trim(view.$().text()), \"foo\");\n  Ember.run(function() {\n    set(view, 'showStuff', false);\n  });\n  equal(Ember.$.trim(view.$().text()), \"Not true.\");\n  \n  Ember.run(function() {\n    set(view, 'showStuff', true);\n  });\n  equal(Ember.$.trim(view.$().text()), \"foo\");\n  \n  Ember.run(function() {\n    view.remove();\n    set(view, 'showStuff', false);\n  });\n  Ember.run(function() {\n    set(view, 'showStuff', true);\n  });\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n  \n  Ember.run(function() {\n    set(view, 'boundValue', \"bar\");\n  });\n  equal(Ember.$.trim(view.$().text()), \"bar\");\n});\n\ntest(\"should update bound values after view's parent is removed and then re-appended\", function() {\n  var parentView = Ember.ContainerView.create({\n    childViews: ['testView'],\n  \n    testView: Ember.View.create({\n      template: Ember.Handlebars.compile(\"{{#if showStuff}}{{boundValue}}{{else}}Not true.{{/if}}\")\n    })\n  });\n  \n  var targetView = Ember.VIEW_PRESERVES_CONTEXT ? parentView : parentView.get('testView');\n  \n  targetView.setProperties({\n    showStuff: true,\n    boundValue: \"foo\"\n  });\n  \n  Ember.run(function() {\n    parentView.appendTo('#qunit-fixture');\n  });\n  view = parentView.get('testView');\n  \n  equal(Ember.$.trim(view.$().text()), \"foo\");\n  Ember.run(function() {\n    set(targetView, 'showStuff', false);\n  });\n  equal(Ember.$.trim(view.$().text()), \"Not true.\");\n  \n  Ember.run(function() {\n    set(targetView, 'showStuff', true);\n  });\n  equal(Ember.$.trim(view.$().text()), \"foo\");\n  \n  \n  Ember.run(function() {\n    parentView.remove();\n    set(targetView, 'showStuff', false);\n  });\n  Ember.run(function() {\n    set(targetView, 'showStuff', true);\n  });\n  Ember.run(function() {\n    parentView.appendTo('#qunit-fixture');\n  });\n  \n  Ember.run(function() {\n    set(targetView, 'boundValue', \"bar\");\n  });\n  equal(Ember.$.trim(view.$().text()), \"bar\");\n});\n\ntest(\"should call a registered helper for mustache without parameters\", function() {\n  Ember.Handlebars.registerHelper('foobar', function() {\n    return 'foobar';\n  });\n\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{foobar}}\")\n  });\n\n  appendView();\n\n  ok(view.$().text() === 'foobar', \"Regular helper was invoked correctly\");\n});\n\ntest(\"should bind to the property if no registered helper found for a mustache without parameters\", function() {\n  view = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{foobarProperty}}\"),\n    foobarProperty: Ember.computed(function() {\n      return 'foobarProperty';\n    })\n  });\n\n  appendView();\n\n  ok(view.$().text() === 'foobarProperty', \"Property was bound to correctly\");\n});\n\ntest(\"should accept bindings as a string or an Ember.Binding\", function() {\n  var viewClass = Ember.View.extend({\n    template: Ember.Handlebars.compile(\"binding: {{view.bindingTest}}, string: {{view.stringTest}}\")\n  });\n\n  Ember.Handlebars.registerHelper('boogie', function(id, options) {\n    options.hash = options.hash || {};\n    options.hash.bindingTestBinding = Ember.Binding.oneWay('bindingContext.' + id);\n    options.hash.stringTestBinding = id;\n    return Ember.Handlebars.ViewHelper.helper(this, viewClass, options);\n  });\n\n  view = Ember.View.create({\n    content: Ember.Object.create({\n      direction: 'down'\n    }),\n    template: Ember.Handlebars.compile(\"{{boogie content.direction}}\")\n  });\n\n  appendView();\n\n  equal(Ember.$.trim(view.$().text()), \"binding: down, string: down\");\n});\n\n})();\n//@ sourceURL=ember-handlebars/~tests/handlebars_test");