minispade.register('ember-handlebars/~tests/helpers/with_test', "(function() {/*globals Foo */\n\nvar appendView = function(view) {\n  Ember.run(function() { view.appendTo('#qunit-fixture'); });\n};\n\nvar view;\n\nmodule(\"Handlebars {{#with}} helper\", {\n  setup: function() {\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile(\"{{#with person as tom}}{{title}}: {{tom.name}}{{/with}}\"),\n      title: \"Señor Engineer\",\n      person: { name: \"Tom Dale\" }\n    });\n\n    appendView(view);\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      view.destroy();\n    });\n  }\n});\n\ntest(\"it should support #with foo as bar\", function() {\n  equal(view.$().text(), \"Señor Engineer: Tom Dale\", \"should be properly scoped\");\n});\n\ntest(\"updating the context should update the alias\", function() {\n  Ember.run(function() {\n    view.set('person', {\n      name: \"Yehuda Katz\"\n    });\n  });\n\n  equal(view.$().text(), \"Señor Engineer: Yehuda Katz\", \"should be properly scoped after updating\");\n});\n\ntest(\"updating a property on the context should update the HTML\", function() {\n  Ember.run(function() {\n    Ember.set(view, 'person.name', \"Yehuda Katz\");\n  });\n\n  equal(view.$().text(), \"Señor Engineer: Yehuda Katz\", \"should be properly scoped after updating\");\n});\n\ntest(\"updating a property on the view should update the HTML\", function() {\n  Ember.run(function() {\n    view.set('title', \"Señorette Engineer\");\n  });\n\n  equal(view.$().text(), \"Señorette Engineer: Tom Dale\", \"should be properly scoped after updating\");\n});\n\nmodule(\"Handlebars {{#with}} globals helper\", {\n  setup: function() {\n    window.Foo = { bar: 'baz' };\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile(\"{{#with Foo.bar as qux}}{{qux}}{{/with}}\")\n    });\n\n    appendView(view);\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      window.Foo = null;\n      view.destroy();\n    });\n  }\n});\n\ntest(\"it should support #with Foo.bar as qux\", function() {\n  equal(view.$().text(), \"baz\", \"should be properly scoped\");\n\n  Ember.run(function() {\n    Ember.set(Foo, 'bar', 'updated');\n  });\n\n  equal(view.$().text(), \"updated\", \"should update\");\n});\n\nmodule(\"Handlebars {{#with keyword as foo}}\");\n\ntest(\"it should support #with view as foo\", function() {\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{#with view as myView}}{{myView.name}}{{/with}}\"),\n    name: \"Sonics\"\n  });\n\n  appendView(view);\n  equal(view.$().text(), \"Sonics\", \"should be properly scoped\");\n\n  Ember.run(function() {\n    Ember.set(view, 'name', \"Thunder\");\n  });\n\n  equal(view.$().text(), \"Thunder\", \"should update\");\n});\n\ntest(\"it should support #with foo as bar, then #with bar as qux\", function() {\n  var view = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{#with view.name as foo}}{{#with foo as bar}}{{bar}}{{/with}}{{/with}}\"),\n    name: \"caterpillar\"\n  });\n\n  appendView(view);\n  equal(view.$().text(), \"caterpillar\", \"should be properly scoped\");\n\n  Ember.run(function() {\n    Ember.set(view, 'name', \"butterfly\");\n  });\n\n  equal(view.$().text(), \"butterfly\", \"should update\");\n});\n\nif (Ember.VIEW_PRESERVES_CONTEXT) {\n  module(\"Handlebars {{#with this as foo}}\");\n\n  test(\"it should support #with this as qux\", function() {\n    var view = Ember.View.create({\n      template: Ember.Handlebars.compile(\"{{#with this as person}}{{person.name}}{{/with}}\"),\n      controller: Ember.Object.create({ name: \"Los Pivots\" })\n    });\n\n    appendView(view);\n    equal(view.$().text(), \"Los Pivots\", \"should be properly scoped\");\n\n    Ember.run(function() {\n      Ember.set(view, 'controller.name', \"l'Pivots\");\n    });\n\n    equal(view.$().text(), \"l'Pivots\", \"should update\");\n  });\n}\n\n})();\n//@ sourceURL=ember-handlebars/~tests/helpers/with_test");