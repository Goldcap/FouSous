minispade.register('ember-handlebars/~tests/helpers/each_test', "(function() {var people, view;\nvar template;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\n\nmodule(\"the #each helper\", {\n  setup: function() {\n    template = templateFor(\"{{#each people}}{{name}}{{/each}}\");\n    people = Ember.A([{ name: \"Steve Holt\" }, { name: \"Annabelle\" }]);\n\n    view = Ember.View.create({\n      template: template,\n      people: people\n    });\n\n    append(view);\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      view.destroy();\n      view = null;\n    });\n  }\n});\n\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\nvar assertHTML = function(view, expectedHTML) {\n  var html = view.$().html();\n\n  // IE 8 (and prior?) adds the \\r\\n\n  html = html.replace(/<script[^>]*><\\/script>/ig, '').replace(/[\\r\\n]/g, '');\n\n  equal(html, expectedHTML);\n};\n\ntest(\"it renders the template for each item in an array\", function() {\n  assertHTML(view, \"Steve HoltAnnabelle\");\n});\n\ntest(\"it updates the view if an item is added\", function() {\n  Ember.run(function() {\n    people.pushObject({ name: \"Tom Dale\" });\n  });\n\n  assertHTML(view, \"Steve HoltAnnabelleTom Dale\");\n});\n\ntest(\"it allows you to access the current context using {{this}}\", function() {\n  view = Ember.View.create({\n    template: templateFor(\"{{#each people}}{{this}}{{/each}}\"),\n    people: Ember.A(['Black Francis', 'Joey Santiago', 'Kim Deal', 'David Lovering'])\n  });\n\n  append(view);\n\n  assertHTML(view, \"Black FrancisJoey SantiagoKim DealDavid Lovering\");\n});\n\ntest(\"it updates the view if an item is removed\", function() {\n  Ember.run(function() {\n    people.removeAt(0);\n  });\n\n  assertHTML(view, \"Annabelle\");\n});\n\ntest(\"it updates the view if an item is replaced\", function() {\n  Ember.run(function() {\n    people.removeAt(0);\n    people.insertAt(0, { name: \"Kazuki\" });\n  });\n\n  assertHTML(view, \"KazukiAnnabelle\");\n});\n\ntest(\"can add and replace in the same runloop\", function() {\n  Ember.run(function() {\n    people.pushObject({ name: \"Tom Dale\" });\n    people.removeAt(0);\n    people.insertAt(0, { name: \"Kazuki\" });\n  });\n\n  assertHTML(view, \"KazukiAnnabelleTom Dale\");\n});\n\ntest(\"can add and replace the object before the add in the same runloop\", function() {\n  Ember.run(function() {\n    people.pushObject({ name: \"Tom Dale\" });\n    people.removeAt(1);\n    people.insertAt(1, { name: \"Kazuki\" });\n  });\n\n  assertHTML(view, \"Steve HoltKazukiTom Dale\");\n});\n\ntest(\"can add and replace complicatedly\", function() {\n  Ember.run(function() {\n    people.pushObject({ name: \"Tom Dale\" });\n    people.removeAt(1);\n    people.insertAt(1, { name: \"Kazuki\" });\n    people.pushObject({ name: \"Firestone\" });\n    people.pushObject({ name: \"McMunch\" });\n    people.removeAt(3);\n  });\n\n  assertHTML(view, \"Steve HoltKazukiTom DaleMcMunch\");\n});\n\ntest(\"can add and replace complicatedly harder\", function() {\n  Ember.run(function() {\n    people.pushObject({ name: \"Tom Dale\" });\n    people.removeAt(1);\n    people.insertAt(1, { name: \"Kazuki\" });\n    people.pushObject({ name: \"Firestone\" });\n    people.pushObject({ name: \"McMunch\" });\n    people.removeAt(2);\n  });\n\n  assertHTML(view, \"Steve HoltKazukiFirestoneMcMunch\");\n});\n\ntest(\"it works inside a ul element\", function() {\n  var ulView = Ember.View.create({\n    template: templateFor('<ul>{{#each people}}<li>{{name}}</li>{{/each}}</ul>'),\n    people: people\n  });\n\n  append(ulView);\n\n  equal(ulView.$('li').length, 2, \"renders two <li> elements\");\n\n  Ember.run(function() {\n    people.pushObject({name: \"Black Francis\"});\n  });\n\n  equal(ulView.$('li').length, 3, \"renders an additional <li> element when an object is added\");\n});\n\ntest(\"it works inside a table element\", function() {\n  var tableView = Ember.View.create({\n    template: templateFor('<table><tbody>{{#each people}}<tr><td>{{name}}</td></tr>{{/each}}</tbody></table>'),\n    people: people\n  });\n\n  append(tableView);\n\n  equal(tableView.$('td').length, 2, \"renders two <td> elements\");\n\n  Ember.run(function() {\n    people.pushObject({name: \"Black Francis\"});\n  });\n\n  equal(tableView.$('td').length, 3, \"renders an additional <td> element when an object is added\");\n\n  Ember.run(function() {\n    people.insertAt(0, {name: \"Kim Deal\"});\n  });\n\n  equal(tableView.$('td').length, 4, \"renders an additional <td> when an object is inserted at the beginning of the array\");\n});\n\ntest(\"it supports {{else}}\", function() {\n  view = Ember.View.create({\n    template: templateFor(\"{{#each items}}{{this}}{{else}}Nothing{{/each}}\"),\n    items: Ember.A(['one', 'two'])\n  });\n\n  append(view);\n\n  assertHTML(view, \"onetwo\");\n\n  stop();\n\n  // We really need to make sure we get to the re-render\n  Ember.run.next(function() {\n    Ember.run(function() {\n      view.set('items', Ember.A([]));\n    });\n\n    start();\n\n    assertHTML(view, \"Nothing\");\n  });\n});\n\ntest(\"it works with the controller keyword\", function() {\n  var controller = Ember.ArrayController.create({\n    content: Ember.A([\"foo\", \"bar\", \"baz\"])\n  });\n\n  view = Ember.View.create({\n    controller: controller,\n    template: templateFor(\"{{#view}}{{#each controller}}{{this}}{{/each}}{{/view}}\")\n  });\n\n  append(view);\n\n  equal(view.$().text(), \"foobarbaz\");\n});\n\nif (Ember.VIEW_PRESERVES_CONTEXT) {\n\n  module(\"{{#each foo in bar}}\");\n\n  test(\"#each accepts a name binding and does not change the context\", function() {\n    view = Ember.View.create({\n      template: templateFor(\"{{#each item in items}}{{title}} {{item}}{{/each}}\"),\n      title: \"My Cool Each Test\",\n      items: Ember.A([1, 2])\n    });\n\n    append(view);\n\n    equal(view.$().text(), \"My Cool Each Test 1My Cool Each Test 2\");\n  });\n\n  test(\"#each accepts a name binding and can display child properties\", function() {\n    view = Ember.View.create({\n      template: templateFor(\"{{#each item in items}}{{title}} {{item.name}}{{/each}}\"),\n      title: \"My Cool Each Test\",\n      items: Ember.A([{ name: 1 }, { name: 2 }])\n    });\n\n    append(view);\n\n    equal(view.$().text(), \"My Cool Each Test 1My Cool Each Test 2\");\n  });\n\n  test(\"#each accepts 'this' as the right hand side\", function() {\n    view = Ember.View.create({\n      template: templateFor(\"{{#each item in this}}{{view.title}} {{item.name}}{{/each}}\"),\n      title: \"My Cool Each Test\",\n      controller: Ember.A([{ name: 1 }, { name: 2 }])\n    });\n\n    append(view);\n\n    equal(view.$().text(), \"My Cool Each Test 1My Cool Each Test 2\");\n  });\n\n  test(\"views inside #each preserve the new context\", function() {\n    var controller = Ember.A([ { name: \"Adam\" }, { name: \"Steve\" } ]);\n\n    view = Ember.View.create({\n      controller: controller,\n      template: templateFor('{{#each controller}}{{#view}}{{name}}{{/view}}{{/each}}')\n    });\n\n    append(view);\n\n    equal(view.$().text(), \"AdamSteve\");\n  });\n\n  test(\"controller is assignable inside an #each\", function() {\n    var controller = Ember.ArrayController.create({\n      content: Ember.A([ { name: \"Adam\" }, { name: \"Steve\" } ])\n    });\n\n    view = Ember.View.create({\n      controller: controller,\n      template: templateFor('{{#each itemController in this}}{{#view controllerBinding=\"itemController\"}}{{name}}{{/view}}{{/each}}')\n    });\n\n    append(view);\n\n    equal(view.$().text(), \"AdamSteve\");\n  });\n\n}\n\n})();\n//@ sourceURL=ember-handlebars/~tests/helpers/each_test");