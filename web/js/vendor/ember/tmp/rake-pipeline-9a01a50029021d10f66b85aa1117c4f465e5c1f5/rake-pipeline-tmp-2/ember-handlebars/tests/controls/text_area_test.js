minispade.register('ember-handlebars/~tests/controls/text_area_test', "(function() {// ==========================================================================\n// Project:   Ember Handlebars Views\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TestObject:true */\n\nvar textArea;\nvar get = Ember.get, set = Ember.set;\n\nmodule(\"Ember.TextArea\", {\n  setup: function() {\n    TestObject = Ember.Object.create({\n      value: null\n    });\n\n    textArea = Ember.TextArea.create();\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      textArea.destroy();\n    });\n    TestObject = textArea = null;\n  }\n});\n\nfunction append() {\n  Ember.run(function() {\n    textArea.appendTo('#qunit-fixture');\n  });\n}\n\ntest(\"should become disabled if the disabled attribute is true\", function() {\n  textArea.set('disabled', true);\n  append();\n\n  ok(textArea.$().is(\":disabled\"));\n});\n\ntest(\"should become disabled if the disabled attribute is true\", function() {\n  append();\n  ok(textArea.$().is(\":not(:disabled)\"));\n\n  Ember.run(function() { textArea.set('disabled', true); });\n  ok(textArea.$().is(\":disabled\"));\n\n  Ember.run(function() { textArea.set('disabled', false); });\n  ok(textArea.$().is(\":not(:disabled)\"));\n});\n\ntest(\"input value is updated when setting value property of view\", function() {\n  Ember.run(function() {\n    set(textArea, 'value', 'foo');\n    textArea.append();\n  });\n\n  equal(textArea.$().val(), \"foo\", \"renders text field with value\");\n\n  Ember.run(function() { set(textArea, 'value', 'bar'); });\n\n  equal(textArea.$().val(), \"bar\", \"updates text field after value changes\");\n});\n\ntest(\"input placeholder is updated when setting placeholder property of view\", function() {\n  Ember.run(function() {\n    set(textArea, 'placeholder', 'foo');\n    textArea.append();\n  });\n\n  equal(textArea.$().attr('placeholder'), \"foo\", \"renders text area with placeholder\");\n\n  Ember.run(function() { set(textArea, 'placeholder', 'bar'); });\n\n  equal(textArea.$().attr('placeholder'), \"bar\", \"updates text area after placeholder changes\");\n});\n\ntest(\"input maxlength is updated when setting maxlength property of view\", function() {\n  Ember.run(function() {\n    set(textArea, 'maxlength', '300');\n    textArea.append();\n  });\n\n  equal(textArea.$().attr('maxlength'), \"300\", \"renders text area with maxlength\");\n\n  Ember.run(function() { set(textArea, 'maxlength', '400'); });\n\n  equal(textArea.$().attr('maxlength'), \"400\", \"updates text area after maxlength changes\");\n});\n\ntest(\"input rows is updated when setting rows property of view\", function() {\n  Ember.run(function() {\n    set(textArea, 'rows', '3');\n    textArea.append();\n  });\n\n  equal(textArea.$().attr('rows'), \"3\", \"renders text area with rows\");\n\n  Ember.run(function() { set(textArea, 'rows', '4'); });\n\n  equal(textArea.$().attr('rows'), \"4\", \"updates text area after rows changes\");\n});\n\ntest(\"input cols is updated when setting cols property of view\", function() {\n  Ember.run(function() {\n    set(textArea, 'cols', '30');\n    textArea.append();\n  });\n\n  equal(textArea.$().attr('cols'), \"30\", \"renders text area with cols\");\n\n  Ember.run(function() { set(textArea, 'cols', '40'); });\n\n  equal(textArea.$().attr('cols'), \"40\", \"updates text area after cols changes\");\n});\n\ntest(\"input tabindex is updated when setting tabindex property of view\", function() {\n  Ember.run(function() {\n    set(textArea, 'tabindex', '4');\n    textArea.append();\n  });\n\n  equal(textArea.$().attr('tabindex'), \"4\", \"renders text area with the tabindex\");\n\n  Ember.run(function() { set(textArea, 'tabindex', '1'); });\n\n  equal(textArea.$().attr('tabindex'), \"1\", \"updates text area after tabindex changes\");\n});\n\ntest(\"value binding works properly for inputs that haven't been created\", function() {\n\n  Ember.run(function() {\n    textArea = Ember.TextArea.create({\n      valueBinding: 'TestObject.value'\n    });\n  });\n\n  equal(get(textArea, 'value'), null, \"precond - default value is null\");\n  equal(textArea.$(), undefined, \"precond - view doesn't have its layer created yet, thus no input element\");\n\n  Ember.run(function() {\n    set(TestObject, 'value', 'ohai');\n  });\n\n  equal(get(textArea, 'value'), 'ohai', \"value property was properly updated\");\n\n  Ember.run(function() { textArea.append(); });\n\n  equal(get(textArea, 'value'), 'ohai', \"value property remains the same once the view has been appended\");\n  equal(textArea.$().val(), 'ohai', \"value is reflected in the input element once it is created\");\n});\n\ntest(\"should call the insertNewline method when return key is pressed\", function() {\n  var wasCalled;\n  var event = Ember.Object.create({\n    keyCode: 13\n  });\n\n  Ember.run(function() { textArea.append(); });\n\n  textArea.insertNewline = function() {\n    wasCalled = true;\n  };\n\n  textArea.trigger('keyUp', event);\n  ok(wasCalled, \"invokes insertNewline method\");\n});\n\ntest(\"should call the cancel method when escape key is pressed\", function() {\n  var wasCalled;\n  var event = Ember.Object.create({\n    keyCode: 27\n  });\n\n  Ember.run(function() { textArea.append(); });\n\n  textArea.cancel = function() {\n    wasCalled = true;\n  };\n\n  textArea.trigger('keyUp', event);\n  ok(wasCalled, \"invokes cancel method\");\n});\n\n// test(\"listens for focus and blur events\", function() {\n//   var focusCalled = 0;\n//   var blurCalled = 0;\n\n//   textArea.focus = function() {\n//     focusCalled++;\n//   };\n//   textArea.blur = function() {\n//     blurCalled++;\n//   };\n\n//   equal(focusCalled+blurCalled, 0, \"precond - no callbacks called yet\");\n\n//   textArea.$().focus();\n//   equal(focusCalled, 1, \"focus called after field receives focus\");\n\n//   textArea.$().blur();\n//   equal(blurCalled, 1, \"blur alled after field blurs\");\n// });\n\n// test(\"calls correct method for key events\", function() {\n//   var insertNewlineCalled = 0;\n//   var cancelCalled = 0;\n\n//   textArea.insertNewline = function() {\n//     insertNewlineCalled++;\n//     return true;\n//   };\n//   textArea.cancel = function() {\n//     cancelCalled++;\n//     return true;\n//   };\n\n//   textArea.$().focus();\n//   equal(insertNewlineCalled+cancelCalled, 0, \"precond - no callbacks called yet\");\n\n//   Ember.RootResponder.responder.keyup(new Ember.Event({ type: 'keyup', keyCode: 13 }));\n//   equal(insertNewlineCalled, 1, \"calls insertNewline after hitting return\");\n\n//   Ember.RootResponder.responder.keyup(new Ember.Event({ type: 'keyup', keyCode: 27 }));\n//   equal(cancelCalled, 1, \"calls cancel after pressing escape key\");\n// });\n\n\n})();\n//@ sourceURL=ember-handlebars/~tests/controls/text_area_test");