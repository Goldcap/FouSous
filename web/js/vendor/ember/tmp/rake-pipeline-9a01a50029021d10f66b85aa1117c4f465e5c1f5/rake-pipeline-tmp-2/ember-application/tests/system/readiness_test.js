minispade.register('ember-application/~tests/system/readiness_test', "(function() {var jQuery, Application, application;\nvar readyWasCalled, domReady, readyCallback;\n\n// We are using a small mock of jQuery because jQuery is third-party code with\n// very well-defined semantics, and we want to confirm that a jQuery stub run\n// in a more minimal server environment that implements this behavior will be\n// sufficient for Ember's requirements.\n\nmodule(\"Application readiness\", {\n  setup: function() {\n    readyWasCalled = 0;\n\n    var jQueryInstance = {\n      ready: function(callback) {\n        readyCallback = callback;\n        if (jQuery.isReady) {\n          domReady();\n        }\n      }\n    };\n\n    jQuery = function() {\n      return jQueryInstance;\n    };\n    jQuery.isReady = false;\n\n    var domReadyCalled = 0;\n    domReady = function() {\n      if (domReadyCalled !== 0) { return; }\n      domReadyCalled++;\n      readyCallback();\n    };\n\n    Application = Ember.Application.extend({\n      $: jQuery,\n\n      ready: function() {\n        readyWasCalled++;\n      }\n    });\n  },\n\n  teardown: function() {\n    if (application) {\n      Ember.run(function() { application.destroy(); });\n    }\n  }\n});\n\n// These tests are confirming that if the callbacks passed into jQuery's ready hook is called\n// synchronously during the application's initialization, we get the same behavior as if\n// it was triggered after initialization.\n\ntest(\"Ember.Application's ready event is called right away if jQuery is already ready\", function() {\n  jQuery.isReady = true;\n\n  Ember.run(function() {\n    application = Application.create().initialize();\n  });\n\n  equal(readyWasCalled, 1, \"ready was called\");\n\n  Ember.run(function() {\n    domReady();\n  });\n\n  equal(readyWasCalled, 1, \"application's ready was not called again\");\n});\n\ntest(\"Ember.Application's ready event is called after the document becomes ready\", function() {\n  Ember.run(function() {\n    application = Application.create().initialize();\n  });\n\n  equal(readyWasCalled, 0, \"ready wasn't called yet\");\n\n  Ember.run(function() {\n    domReady();\n  });\n\n  equal(readyWasCalled, 1, \"ready was called now that DOM is ready\");\n});\n\ntest(\"Ember.Application's ready event can be deferred by other components\", function() {\n  Ember.run(function() {\n    application = Application.create();\n  });\n\n  application.deferReadiness();\n\n  Ember.run(function() {\n    application.initialize();\n  });\n\n  equal(readyWasCalled, 0, \"ready wasn't called yet\");\n\n  Ember.run(function() {\n    domReady();\n  });\n\n  equal(readyWasCalled, 0, \"ready wasn't called yet\");\n\n  Ember.run(function() {\n    application.advanceReadiness();\n  });\n\n  equal(readyWasCalled, 1, \"ready was called now all readiness deferrals are advanced\");\n});\n\ntest(\"Ember.Application's ready event can be deferred by other components\", function() {\n  jQuery.isReady = true;\n\n  Ember.run(function() {\n    application = Application.create();\n  });\n\n  application.deferReadiness();\n\n  Ember.run(function() {\n    application.initialize();\n  });\n\n  equal(readyWasCalled, 0, \"ready wasn't called yet\");\n\n  Ember.run(function() {\n    application.advanceReadiness();\n  });\n\n  equal(readyWasCalled, 1, \"ready was called now all readiness deferrals are advanced\");\n\n  raises(function() {\n    application.deferReadiness();\n  }, Error);\n});\n\n})();\n//@ sourceURL=ember-application/~tests/system/readiness_test");