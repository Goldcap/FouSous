minispade.register('ember-application/~tests/system/action_url_test', "(function() {// FIXME: Move this to an integration test pacakge with proper requires\ntry {\nminispade.require('ember-handlebars');\n} catch(e) { }\n\nmodule(\"the {{action}} helper with href attribute\");\n\nvar compile = function(string) {\n  return Ember.Handlebars.compile(string);\n};\n\nvar namespace = {\n  \"Component\": {\n    toString: function() { return \"Component\"; },\n    find: function() { return { id: 1 }; }\n  }\n};\n\ntest(\"it generates the URL from the target\", function() {\n  var view = Ember.View.create({\n    template: compile(\"<a {{action show href=true}}>Hi</a>\")\n  });\n\n  var controller = Ember.Object.create(Ember.ControllerMixin, {\n    target: {\n      urlForEvent: function(event, context) {\n        return \"/foo/bar\";\n      }\n    }\n  });\n\n  Ember.run(function() {\n    view.set('controller', controller);\n    view.appendTo('#qunit-fixture');\n  });\n\n  ok(view.$().html().match(/href=['\"].*\\/foo\\/bar['\"]/), \"The html (\" + view.$().html() + \") does not have the href /foo/bar in it\");\n});\n\ntest(\"it does not generate the URL when href property is not specified\", function() {\n  var view = Ember.View.create({\n    template: compile(\"<a {{action show}}>Hi</a>\")\n  });\n\n  var controller = Ember.Object.create(Ember.ControllerMixin, {\n    target: {\n      urlForEvent: function(event, context) {\n        return \"/foo/bar\";\n      }\n    }\n  });\n\n  Ember.run(function() {\n    view.set('controller', controller);\n    view.appendTo('#qunit-fixture');\n  });\n\n  ok(!view.$().html().match(/href=['\"]\\/foo\\/bar['\"]/), \"The html (\" + view.$().html() + \") has the href /foo/bar in it\");\n});\n\ntest(\"it sets an URL with a context\", function() {\n  var router = Ember.Router.create({\n    location: {\n      formatURL: function(url) {\n        return url;\n      },\n      setURL: Ember.K\n    },\n    namespace: namespace,\n    root: Ember.Route.create({\n      index: Ember.Route.create({\n        route: '/',\n\n        showDashboard: function(router) {\n          router.transitionTo('dashboard');\n        },\n\n        eventTransitions: {\n          showDashboard: 'dashboard'\n        }\n      }),\n\n      dashboard: Ember.Route.create({\n        route: '/dashboard/:component_id'\n      })\n    })\n  });\n\n  Ember.run(function() {\n    router.route(\"/\");\n  });\n\n  equal(router.get('currentState.path'), \"root.index\", \"precond - the current stat is root.index\");\n\n  var view = Ember.View.create({\n    template: compile('<a {{action showDashboard controller.component href=true}}>test</a>')\n  });\n\n  var controller = {\n    target: router,\n    component: { id: 1 }\n  };\n\n  Ember.run(function() {\n    view.set('controller', controller);\n    view.appendTo('#qunit-fixture');\n  });\n\n  ok(view.$().html().match(/href=['\"].*\\/dashboard\\/1['\"]/), \"The html (\" + view.$().html() + \") has the href /dashboard/1 in it\");\n});\n\ntest(\"it does not trigger action with special clicks\", function() {\n  var dispatcher = Ember.EventDispatcher.create();\n  dispatcher.setup();\n\n  var showCalled = false;\n\n  var view = Ember.View.create({\n    template: compile(\"<a {{action show href=true}}>Hi</a>\")\n  });\n\n  var controller = Ember.Object.create(Ember.ControllerMixin, {\n    target: {\n      urlForEvent: function(event, context) {\n        return \"/foo/bar\";\n      },\n\n      show: function() {\n        showCalled = true;\n      }\n    }\n  });\n\n  Ember.run(function() {\n    view.set('controller', controller);\n    view.appendTo('#qunit-fixture');\n  });\n\n  function checkClick(prop, value, expected) {\n    var event = Ember.$.Event(\"click\");\n    event[prop] = value;\n    view.$('a').trigger(event);\n    if (expected) {\n      ok(showCalled, \"should call action with \"+prop+\":\"+value);\n      ok(event.isDefaultPrevented(), \"should prevent default\");\n    } else {\n      ok(!showCalled, \"should not call action with \"+prop+\":\"+value);\n      ok(!event.isDefaultPrevented(), \"should not prevent default\");\n    }\n  }\n\n  checkClick('ctrlKey', true, false);\n  checkClick('altKey', true, false);\n  checkClick('metaKey', true, false);\n  checkClick('shiftKey', true, false);\n  checkClick('which', 2, false);\n\n  checkClick('which', 1, true);\n  checkClick('which', undefined, true); // IE <9\n\n  Ember.run(function() {\n    dispatcher.destroy();\n  });\n});\n\n})();\n//@ sourceURL=ember-application/~tests/system/action_url_test");