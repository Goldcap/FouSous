minispade.register('ember-application/~tests/system/application_test', "(function() {// ==========================================================================\n// Project:   Ember - JavaScript Application Framework\n// Copyright: ©2006-2011 Strobe Inc. and contributors.\n//            Portions ©2008-2011 Apple Inc. All rights reserved.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar view;\nvar application;\nvar set = Ember.set, get = Ember.get;\n\nmodule(\"Ember.Application\", {\n  setup: function() {\n    Ember.$(\"#qunit-fixture\").html(\"<div id='one'><div id='one-child'>HI</div></div><div id='two'>HI</div>\");\n    Ember.run(function() {\n      application = Ember.Application.create({ rootElement: '#one' });\n      application.initialize();\n    });\n  },\n\n  teardown: function() {\n    if (application) {\n      Ember.run(function(){ application.destroy(); });\n    }\n  }\n});\n\ntest(\"you can make a new application in a non-overlapping element\", function() {\n  var app;\n  Ember.run(function() {\n    app = Ember.Application.create({ rootElement: '#two' });\n  });\n  Ember.run(function() {\n    app.destroy();\n  });\n  ok(true, \"should not raise\");\n});\n\ntest(\"you cannot make a new application that is a parent of an existing application\", function() {\n  raises(function() {\n    Ember.run(function() {\n      Ember.Application.create({ rootElement: '#qunit-fixture' }).initialize();\n    });\n  }, Error);\n});\n\ntest(\"you cannot make a new application that is a descendent of an existing application\", function() {\n  raises(function() {\n    Ember.run(function() {\n      Ember.Application.create({ rootElement: '#one-child' }).initialize();\n    });\n  }, Error);\n});\n\ntest(\"you cannot make a new application that is a duplicate of an existing application\", function() {\n  raises(function() {\n    Ember.run(function() {\n      Ember.Application.create({ rootElement: '#one' }).initialize();\n    });\n  }, Error);\n});\n\ntest(\"you cannot make two default applications without a rootElement error\", function() {\n  // Teardown existing\n  Ember.run(function() {\n    application.destroy();\n  });\n\n  Ember.run(function() {\n    application = Ember.Application.create().initialize();\n  });\n  raises(function() {\n    Ember.run(function() {\n      Ember.Application.create().initialize();\n    });\n  }, Error);\n});\n\ntest(\"acts like a namespace\", function() {\n  var app;\n  Ember.run(function() {\n    app = window.TestApp = Ember.Application.create({rootElement: '#two'});\n  });\n  app.Foo = Ember.Object.extend();\n  equal(app.Foo.toString(), \"TestApp.Foo\", \"Classes pick up their parent namespace\");\n  Ember.run(function() {\n    app.destroy();\n  });\n  window.TestApp = undefined;\n});\n\nvar app;\n\nmodule(\"Ember.Application initialization\", {\n  teardown: function() {\n    Ember.run(function(){ app.destroy(); });\n  }\n});\n\ntest(\"initialize controllers into a state manager\", function() {\n  Ember.run(function() {\n    app = Ember.Application.create();\n  });\n\n  app.FooController = Ember.Object.extend();\n  app.BarController = Ember.ArrayController.extend();\n  app.Foo = Ember.Object.create();\n  app.fooController = Ember.Object.create();\n\n  var stateManager = Ember.Object.create();\n\n  Ember.run(function() { app.initialize(stateManager); });\n\n  ok(get(stateManager, 'fooController') instanceof app.FooController, \"fooController was assigned\");\n  ok(get(stateManager, 'barController') instanceof app.BarController, \"barController was assigned\");\n  ok(get(stateManager, 'foo') === undefined, \"foo was not assigned\");\n\n  equal(get(stateManager, 'fooController.target'), stateManager, \"the state manager is assigned\");\n  equal(get(stateManager, 'barController.target'), stateManager, \"the state manager is assigned\");\n  equal(get(stateManager, 'fooController.namespace'), app, \"the namespace is assigned\");\n  equal(get(stateManager, 'fooController.namespace'), app, \"the namespace is assigned\");\n});\n\ntest('initialized application go to initial route', function() {\n  Ember.run(function() {\n    app = Ember.Application.create({\n      rootElement: '#qunit-fixture'\n    });\n\n    app.stateManager = Ember.Router.create({\n      location: {\n        getURL: function() {\n          return '/';\n        },\n        setURL: function() {},\n        onUpdateURL: function() {}\n      },\n\n      root: Ember.Route.extend({\n        index: Ember.Route.extend({\n          route: '/'\n        })\n      })\n    });\n\n\n    app.ApplicationView = Ember.View.extend({\n      template: function() { return \"Hello!\"; }\n    });\n\n    app.ApplicationController = Ember.Controller.extend();\n\n    Ember.run(function() { app.initialize(app.stateManager); });\n  });\n\n  equal(app.get('router.currentState.path'), 'root.index', \"The router moved the state into the right place\");\n});\n\ntest(\"initialize application with stateManager via initialize call\", function() {\n  Ember.run(function() {\n    app = Ember.Application.create({\n      rootElement: '#qunit-fixture'\n    });\n\n    app.Router = Ember.Router.extend({\n      location: 'none',\n\n      root: Ember.Route.extend({\n        index: Ember.Route.extend({\n          route: '/'\n        })\n      })\n    });\n\n    app.ApplicationView = Ember.View.extend({\n      template: function() { return \"Hello!\"; }\n    });\n\n    app.ApplicationController = Ember.Controller.extend();\n\n    app.initialize(app.Router.create());\n  });\n\n  equal(app.get('router') instanceof Ember.Router, true, \"Router was set from initialize call\");\n  equal(app.get('router.location') instanceof Ember.NoneLocation, true, \"Location was set from location implementation name\");\n  equal(app.get('router.currentState.path'), 'root.index', \"The router moved the state into the right place\");\n});\n\ntest(\"initialize application with stateManager via initialize call from Router class\", function() {\n  Ember.run(function() {\n    app = Ember.Application.create({\n      rootElement: '#qunit-fixture'\n    });\n\n    app.Router = Ember.Router.extend({\n      location: 'none',\n\n      root: Ember.Route.extend({\n        index: Ember.Route.extend({\n          route: '/'\n        })\n      })\n    });\n\n    app.ApplicationView = Ember.View.extend({\n      template: function() { return \"Hello!\"; }\n    });\n\n    app.ApplicationController = Ember.Controller.extend();\n\n    app.initialize();\n  });\n\n  equal(app.get('router') instanceof Ember.Router, true, \"Router was set from initialize call\");\n  equal(app.get('router.currentState.path'), 'root.index', \"The router moved the state into the right place\");\n});\n\ntest(\"injections can be registered in a specified order\", function() {\n\n  var oldInjections = Ember.Application.injections;\n  var firstInjectionCalled = 0,\n      secondInjectionCalled = 0;\n\n  Ember.Application.injections = Ember.A();\n  Ember.Application.registerInjection({\n    name: 'second',\n    injection: function() {\n      ok(firstInjectionCalled > 0, 'first injection should be called first');\n      secondInjectionCalled++;\n    }\n  });\n\n  Ember.Application.registerInjection({\n    name: 'first',\n    injection: function() {\n      firstInjectionCalled++;\n      ok(secondInjectionCalled === 0, \"second injection should not have been called yet\");\n    },\n    before: 'second'\n  });\n\n  var router;\n  Ember.run(function() {\n    app = Ember.Application.create({\n      rootElement: '#qunit-fixture'\n    });\n    expect(get(Ember.keys(app), 'length') * 2);\n    router = Ember.Object.create();\n\n    app.initialize(router);\n  });\n\n  Ember.run(function() {\n    router.destroy();\n  });\n\n  Ember.Application.injections = oldInjections;\n});\n\ntest(\"ApplicationView is inserted into the page\", function() {\n  Ember.$(\"#qunit-fixture\").empty();\n\n  Ember.run(function() {\n    app = Ember.Application.create({\n      rootElement: '#qunit-fixture'\n    });\n\n    app.ApplicationView = Ember.View.extend({\n      template: function() { return \"Hello!\"; }\n    });\n\n    app.ApplicationController = Ember.Controller.extend();\n\n    app.Router = Ember.Router.extend({\n      location: 'none',\n\n      root: Ember.Route.extend({\n        index: Ember.Route.extend({\n          route: '/'\n        })\n      })\n    });\n\n    app.initialize();\n  });\n\n  equal(Ember.$(\"#qunit-fixture\").text(), \"Hello!\");\n});\n\ntest(\"ApplicationView and ApplicationController are assumed to exist in all Routers\", function() {\n  Ember.run(function() {\n    app = Ember.Application.create({\n      rootElement: '#qunit-fixture'\n    });\n  });\n\n  Ember.run(function() {\n    app.OneView = Ember.View.extend({\n      template: function() { return \"Hello!\"; }\n    });\n    app.OneController = Ember.Controller.extend();\n\n    app.Router = Ember.Router.extend({\n      location: 'hash',\n\n      root: Ember.Route.extend({\n        index: Ember.Route.extend({\n          route: '/'\n        })\n      })\n    });\n  });\n\n  raises(function(){ Ember.run(function() { app.initialize(); }); }, Error);\n\n});\n\ntest(\"ControllerObject class can be initialized with target, controllers and view properties\", function() {\n  var stateManager;\n\n  Ember.run(function() {\n    app = Ember.Application.create({\n      rootElement: '#qunit-fixture'\n    });\n\n    app.PostController = Ember.ObjectController.extend();\n\n    stateManager = Ember.StateManager.create();\n\n    Ember.run(function() { app.initialize(stateManager); });\n\n    stateManager.get('postController').set('view', Ember.View.create());\n  });\n\n  equal(app.get('router.postController.target') instanceof Ember.StateManager, true, \"controller has target\");\n  equal(app.get('router.postController.controllers') instanceof Ember.StateManager, true, \"controller has controllers\");\n  equal(app.get('router.postController.view') instanceof Ember.View, true, \"controller has view\");\n});\n\n})();\n//@ sourceURL=ember-application/~tests/system/application_test");