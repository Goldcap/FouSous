minispade.register('ember-views/~tests/views/view/attribute_bindings_test', "(function() {// ==========================================================================\n// Project:   Ember Views\n// Copyright: Â©2006-2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\n/*global Test:true*/\nvar set = Ember.set, get = Ember.get;\n\nvar view;\n\nmodule(\"Ember.View - Attribute Bindings\", {\n  teardown: function() {\n    if (view) {\n      Ember.run(function(){\n        view.destroy();\n      });\n      view = null;\n    }\n  }\n});\n\ntest(\"should render attribute bindings\", function() {\n  view = Ember.View.create({\n    classNameBindings: ['priority', 'isUrgent', 'isClassified:classified', 'canIgnore'],\n    attributeBindings: ['type', 'isDisabled:disabled', 'exploded', 'destroyed', 'exists', 'nothing', 'notDefined', 'notNumber', 'explosions'],\n\n    type: 'submit',\n    isDisabled: true,\n    exploded: false,\n    destroyed: false,\n    exists: true,\n    nothing: null,\n    notDefined: undefined,\n    notNumber: NaN\n  });\n\n  Ember.run(function(){\n    view.createElement();\n  });\n\n  equal(view.$().attr('type'), 'submit', \"updates type attribute\");\n  ok(view.$().attr('disabled'), \"supports customizing attribute name for Boolean values\");\n  ok(!view.$().attr('exploded'), \"removes exploded attribute when false\");\n  ok(!view.$().attr('destroyed'), \"removes destroyed attribute when false\");\n  ok(view.$().attr('exists'), \"adds exists attribute when true\");\n  ok(!view.$().attr('nothing'), \"removes nothing attribute when null\");\n  ok(!view.$().attr('notDefined'), \"removes notDefined attribute when undefined\");\n  ok(!view.$().attr('notNumber'), \"removes notNumber attribute when NaN\");\n});\n\ntest(\"should update attribute bindings\", function() {\n  view = Ember.View.create({\n    classNameBindings: ['priority', 'isUrgent', 'isClassified:classified', 'canIgnore'],\n    attributeBindings: ['type', 'isDisabled:disabled', 'exploded', 'destroyed', 'exists', 'nothing', 'notDefined', 'notNumber', 'explosions'],\n\n    type: 'reset',\n    isDisabled: true,\n    exploded: true,\n    destroyed: true,\n    exists: false,\n    nothing: true,\n    notDefined: true,\n    notNumber: true,\n    explosions: 15\n  });\n\n  Ember.run(function(){\n    view.createElement();\n  });\n\n  equal(view.$().attr('type'), 'reset', \"adds type attribute\");\n  ok(view.$().attr('disabled'), \"adds disabled attribute when true\");\n  ok(view.$().attr('exploded'), \"adds exploded attribute when true\");\n  ok(view.$().attr('destroyed'), \"adds destroyed attribute when true\");\n  ok(!view.$().attr('exists'), \"does not add exists attribute when false\");\n  ok(view.$().attr('nothing'), \"adds nothing attribute when true\");\n  ok(view.$().attr('notDefined'), \"adds notDefined attribute when true\");\n  ok(view.$().attr('notNumber'), \"adds notNumber attribute when true\");\n  equal(view.$().attr('explosions'), \"15\", \"adds integer attributes\");\n\n  Ember.run(function(){\n    view.set('type', 'submit');\n    view.set('isDisabled', false);\n    view.set('exploded', false);\n    view.set('destroyed', false);\n    view.set('exists', true);\n    view.set('nothing', null);\n    view.set('notDefined', undefined);\n    view.set('notNumber', NaN);\n  });\n\n  equal(view.$().attr('type'), 'submit', \"updates type attribute\");\n  ok(!view.$().attr('disabled'), \"removes disabled attribute when false\");\n  ok(!view.$().attr('exploded'), \"removes exploded attribute when false\");\n  ok(!view.$().attr('destroyed'), \"removes destroyed attribute when false\");\n  ok(view.$().attr('exists'), \"adds exists attribute when true\");\n  ok(!view.$().attr('nothing'), \"removes nothing attribute when null\");\n  ok(!view.$().attr('notDefined'), \"removes notDefined attribute when undefined\");\n  ok(!view.$().attr('notNumber'), \"removes notNumber attribute when NaN\");\n});\n\ntest(\"should allow attributes to be set in the inBuffer state\", function() {\n  var parentView, childViews;\n  Ember.run(function() {\n    window.Test = Ember.Namespace.create();\n    Test.controller = Ember.Object.create({\n      foo: 'bar'\n    });\n\n    parentView = Ember.ContainerView.create();\n\n    childViews = parentView.get('childViews');\n    childViews.pushObject(parentView.createChildView(Ember.View, {\n      template: function() {\n        return \"foo\";\n      },\n\n      fooBinding: 'Test.controller.foo',\n      attributeBindings: ['foo']\n    }));\n\n    childViews.pushObject(parentView.createChildView(Ember.View, {\n      template: function() {\n        Test.controller.set('foo', 'baz');\n        return \"bar\";\n      }\n    }));\n\n    childViews.pushObject(parentView.createChildView(Ember.View, {\n      template: function() {\n        return \"bat\";\n      }\n    }));\n  });\n\n  try {\n    Ember.TESTING_DEPRECATION = true;\n\n    Ember.run(function() {\n      parentView.append();\n    });\n  } finally {\n    Ember.TESTING_DEPRECATION = false;\n  }\n\n  equal(parentView.get('childViews')[0].$().attr('foo'), 'baz');\n\n  Ember.run(function(){\n    parentView.destroy();\n    Test.destroy();\n  });\n  \n});\n\n// This comes into play when using the {{#each}} helper. If the\n// passed array item is a String, it will be converted into a\n// String object instead of a normal string.\ntest(\"should allow binding to String objects\", function() {\n  view = Ember.View.create({\n    attributeBindings: ['foo'],\n    // JSHint doesn't like `new String` so we'll create it the same way it gets created in practice\n    foo: (function(){ return this; }).call(\"bar\")\n  });\n\n  Ember.run(function(){\n    view.createElement();\n  });\n  \n\n  equal(view.$().attr('foo'), 'bar', \"should convert String object to bare string\");\n});\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/attribute_bindings_test");