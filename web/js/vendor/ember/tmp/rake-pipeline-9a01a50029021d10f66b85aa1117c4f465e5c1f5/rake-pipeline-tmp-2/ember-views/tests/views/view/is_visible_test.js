minispade.register('ember-views/~tests/views/view/is_visible_test', "(function() {var get = Ember.get, set = Ember.set;\n\nvar View, view, parentBecameVisible, childBecameVisible, grandchildBecameVisible;\nvar parentBecameHidden, childBecameHidden, grandchildBecameHidden;\n\nmodule(\"Ember.View#isVisible\", {\n  setup: function() {\n    parentBecameVisible=0;\n    childBecameVisible=0;\n    grandchildBecameVisible=0;\n    parentBecameHidden=0;\n    childBecameHidden=0;\n    grandchildBecameHidden=0;\n\n    View = Ember.ContainerView.extend({\n      childViews: ['child'],\n      becameVisible: function() { parentBecameVisible++; },\n      becameHidden: function() { parentBecameHidden++; },\n\n      child: Ember.ContainerView.extend({\n        childViews: ['grandchild'],\n        becameVisible: function() { childBecameVisible++; },\n        becameHidden: function() { childBecameHidden++; },\n\n        grandchild: Ember.View.extend({\n          template: function() { return \"seems weird bro\"; },\n          becameVisible: function() { grandchildBecameVisible++; },\n          becameHidden: function() { grandchildBecameHidden++; }\n        })\n      })\n    });\n  },\n\n  teardown: function() {\n    if (view) { \n      Ember.run(function(){ view.destroy(); });\n    }\n  }\n});\n\ntest(\"should hide views when isVisible is false\", function() {\n  view = Ember.View.create({\n    isVisible: false\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().is(':hidden'), \"the view is hidden\");\n\n  set(view, 'isVisible', true);\n  ok(view.$().is(':visible'), \"the view is visible\");\n  view.remove();\n});\n\ntest(\"should hide element if isVisible is false before element is created\", function() {\n  view = Ember.View.create({\n    isVisible: false\n  });\n\n  ok(!get(view, 'isVisible'), \"precond - view is not visible\");\n\n  set(view, 'template', function() { return \"foo\"; });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().is(':hidden'), \"should be hidden\");\n\n  view.remove();\n  set(view, 'isVisible', true);\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().is(':visible'), \"view should be visible\");\n\n  Ember.run(function() {\n    view.remove();\n  });\n});\n\ntest(\"view should be notified after isVisible is set to false and the element has been hidden\", function() {\n  Ember.run(function(){\n    view = View.create({ isVisible: false });\n    view.append();\n  });\n\n  ok(view.$().is(':hidden'), \"precond - view is hidden when appended\");\n\n  Ember.run(function() {\n    view.set('isVisible', true);\n  });\n\n  ok(view.$().is(':visible'), \"precond - view is now visible\");\n  equal(parentBecameVisible, 1);\n  equal(childBecameVisible, 1);\n  equal(grandchildBecameVisible, 1);\n});\n\ntest(\"view should be notified after isVisible is set to false and the element has been hidden\", function() {\n  view = View.create({ isVisible: true });\n  var childView = view.get('childViews').objectAt(0);\n  var grandchildView = childView.get('childViews').objectAt(0);\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().is(':visible'), \"precond - view is visible when appended\");\n\n  Ember.run(function() {\n    childView.set('isVisible', false);\n  });\n\n  ok(childView.$().is(':hidden'), \"precond - view is now hidden\");\n\n  equal(childBecameHidden, 1);\n  equal(grandchildBecameHidden, 1);\n});\n\ntest(\"view should be notified after isVisible is set to true and the element has been shown\", function() {\n  view = View.create({ isVisible: false });\n  var childView = view.get('childViews').objectAt(0);\n  var grandchildView = childView.get('childViews').objectAt(0);\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().is(':hidden'), \"precond - view is hidden when appended\");\n\n  Ember.run(function() {\n    view.set('isVisible', true);\n  });\n\n  ok(view.$().is(':visible'), \"precond - view is now visible\");\n\n  equal(parentBecameVisible, 1);\n  equal(childBecameVisible, 1);\n  equal(grandchildBecameVisible, 1);\n});\n\ntest(\"if a view descends from a hidden view, making isVisible true should not trigger becameVisible\", function() {\n  view = View.create({ isVisible: true });\n  var childView = view.get('childViews').objectAt(0);\n  var grandchildView = childView.get('childViews').objectAt(0);\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().is(':visible'), \"precond - view is visible when appended\");\n\n  Ember.run(function() {\n    childView.set('isVisible', false);\n  });\n\n  Ember.run(function() {\n    view.set('isVisible', false);\n  });\n\n  childBecameVisible = 0;\n  grandchildBecameVisible = 0;\n\n  Ember.run(function() {\n    childView.set('isVisible', true);\n  });\n\n  equal(childBecameVisible, 0, \"the child did not become visible\");\n  equal(grandchildBecameVisible, 0, \"the grandchild did not become visible\");\n});\n\ntest(\"if a child view becomes visible while its parent is hidden, if its parent later becomes visible, it receives a becameVisible callback\", function() {\n  view = View.create({ isVisible: false });\n  var childView = view.get('childViews').objectAt(0);\n  var grandchildView = childView.get('childViews').objectAt(0);\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().is(':hidden'), \"precond - view is hidden when appended\");\n\n  Ember.run(function() {\n    childView.set('isVisible', true);\n  });\n\n  equal(childBecameVisible, 0, \"child did not become visible since parent is hidden\");\n  equal(grandchildBecameVisible, 0, \"grandchild did not become visible since parent is hidden\");\n\n  Ember.run(function() {\n    view.set('isVisible', true);\n  });\n\n  equal(parentBecameVisible, 1);\n  equal(childBecameVisible, 1);\n  equal(grandchildBecameVisible, 1);\n});\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/is_visible_test");