minispade.register('ember-views/~tests/views/view/create_element_test', "(function() {// ==========================================================================\n// Project:   Ember Views\n// Copyright: Â©2006-2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar set = Ember.set, get = Ember.get;\n\nmodule(\"Ember.View#createElement\");\n\ntest(\"returns the receiver\", function() {\n  var view = Ember.View.create(), ret;\n  \n  Ember.run(function(){\n    ret = view.createElement();\n  });\n  \n  equal(ret, view, 'returns receiver');\n});\n\ntest(\"calls render and turns resultant string into element\", function() {\n  var view = Ember.View.create({\n    tagName: 'span',\n\n    render: function(buffer) {\n      buffer.push(\"foo\");\n    }\n  });\n\n  equal(get(view, 'element'), null, 'precondition - has no element');\n  Ember.run(function(){\n    view.createElement();\n  });\n  \n\n  var elem = get(view, 'element');\n  ok(elem, 'has element now');\n  equal(elem.innerHTML, 'foo', 'has innerHTML from context');\n  equal(elem.tagName.toString().toLowerCase(), 'span', 'has tagName from view');\n});\n\ntest(\"generated element include HTML from child views as well\", function() {\n  var view = Ember.ContainerView.create({\n    childViews: [ Ember.View.create({ elementId: \"foo\" })]\n  });\n\n  Ember.run(function(){\n    view.createElement();\n  });\n  \n  ok(view.$('#foo').length, 'has element with child elementId');\n});\n\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/create_element_test");