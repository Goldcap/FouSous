minispade.register('ember-views/~tests/system/event_dispatcher_test', "(function() {// ==========================================================================\n// Project:   Ember - JavaScript Application Framework\n// Copyright: ©2006-2011 Strobe Inc. and contributors.\n//            Portions ©2008-2011 Apple Inc. All rights reserved.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar view;\nvar dispatcher;\nvar set = Ember.set, get = Ember.get;\n\nmodule(\"Ember.EventDispatcher\", {\n  setup: function() {\n    Ember.run(function() {\n      dispatcher = Ember.EventDispatcher.create();\n      dispatcher.setup();\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n      dispatcher.destroy();\n    });\n  }\n});\n\ntest(\"should dispatch events to views\", function() {\n  var receivedEvent;\n  var parentMouseDownCalled = 0;\n  var childKeyDownCalled = 0;\n  var parentKeyDownCalled = 0;\n\n  view = Ember.ContainerView.create({\n    childViews: ['child'],\n\n    child: Ember.View.extend({\n      render: function(buffer) {\n        buffer.push('<span id=\"wot\">ewot</span>');\n      },\n\n      keyDown: function(evt) {\n        childKeyDownCalled++;\n\n        return false;\n      }\n    }),\n\n    render: function(buffer) {\n      buffer.push('some <span id=\"awesome\">awesome</span> content');\n      this._super(buffer);\n    },\n\n    mouseDown: function(evt) {\n      parentMouseDownCalled++;\n      receivedEvent = evt;\n    },\n\n    keyDown: function(evt) {\n      parentKeyDownCalled++;\n    }\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  view.$().trigger('mousedown');\n\n  ok(receivedEvent, \"passes event to associated event method\");\n  receivedEvent = null;\n  parentMouseDownCalled = 0;\n\n  view.$('span#awesome').trigger('mousedown');\n  ok(receivedEvent, \"event bubbles up to nearest Ember.View\");\n  equal(parentMouseDownCalled, 1, \"does not trigger the parent handlers twice because of browser bubbling\");\n  receivedEvent = null;\n\n  Ember.$('#wot').trigger('mousedown');\n  ok(receivedEvent, \"event bubbles up to nearest Ember.View\");\n\n  Ember.$('#wot').trigger('keydown');\n  equal(childKeyDownCalled, 1, \"calls keyDown on child view\");\n  equal(parentKeyDownCalled, 0, \"does not call keyDown on parent if child handles event\");\n});\n\ntest(\"should not dispatch events to views not inDOM\", function() {\n  var receivedEvent;\n\n  view = Ember.View.create({\n    render: function(buffer) {\n      buffer.push('some <span id=\"awesome\">awesome</span> content');\n      this._super(buffer);\n    },\n\n    mouseDown: function(evt) {\n      receivedEvent = evt;\n    }\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  var $element = view.$();\n\n  Ember.run(function() {\n    view.set('element', null); // Force into preRender\n  });\n\n  $element.trigger('mousedown');\n\n  ok(!receivedEvent, \"does not pass event to associated event method\");\n  receivedEvent = null;\n\n  $element.find('span#awesome').trigger('mousedown');\n  ok(!receivedEvent, \"event does not bubble up to nearest Ember.View\");\n  receivedEvent = null;\n\n  // Cleanup\n  $element.remove();\n});\n\ntest(\"should send change events up view hierarchy if view contains form elements\", function() {\n  var receivedEvent;\n  view = Ember.View.create({\n    render: function(buffer) {\n      buffer.push('<input id=\"is-done\" type=\"checkbox\">');\n    },\n\n    change: function(evt) {\n      receivedEvent = evt;\n    }\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  Ember.$('#is-done').trigger('change');\n  ok(receivedEvent, \"calls change method when a child element is changed\");\n  equal(receivedEvent.target, Ember.$('#is-done')[0], \"target property is the element that was clicked\");\n});\n\ntest(\"events should stop propagating if the view is destroyed\", function() {\n  var parentViewReceived, receivedEvent;\n\n  var parentView = Ember.ContainerView.create({\n    change: function(evt) {\n      parentViewReceived = true;\n    }\n  });\n\n  view = parentView.createChildView(Ember.View, {\n    render: function(buffer) {\n      buffer.push('<input id=\"is-done\" type=\"checkbox\">');\n    },\n\n    change: function(evt) {\n      receivedEvent = true;\n      var self = this;\n      Ember.run(function() {\n        get(self, 'parentView').destroy();\n      });\n    }\n  });\n\n  Ember.get(parentView, 'childViews').pushObject(view);\n\n  Ember.run(function() {\n    parentView.append();\n  });\n\n  ok(Ember.$('#is-done').length, \"precond - view is in the DOM\");\n  Ember.$('#is-done').trigger('change');\n  ok(!Ember.$('#is-done').length, \"precond - view is not in the DOM\");\n  ok(receivedEvent, \"calls change method when a child element is changed\");\n  ok(!parentViewReceived, \"parent view does not receive the event\");\n});\n\ntest(\"should not interfere with event propagation\", function() {\n  var receivedEvent;\n  view = Ember.View.create({\n    render: function(buffer) {\n      buffer.push('<div id=\"propagate-test-div\"></div>');\n    }\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  Ember.$(window).bind('click', function(evt) {\n    receivedEvent = evt;\n  });\n\n  Ember.$('#propagate-test-div').click();\n\n  ok(receivedEvent, \"allowed event to propagate outside Ember\");\n  deepEqual(receivedEvent.target, Ember.$('#propagate-test-div')[0], \"target property is the element that was clicked\");\n});\n\ntest(\"should dispatch events to nearest event manager\", function() {\n  var receivedEvent=0;\n  view = Ember.ContainerView.create({\n    render: function(buffer) {\n      buffer.push('<input id=\"is-done\" type=\"checkbox\">');\n    },\n\n    eventManager: Ember.Object.create({\n      mouseDown: function() {\n        receivedEvent++;\n      }\n    }),\n\n    mouseDown: function() {}\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  Ember.$('#is-done').trigger('mousedown');\n  equal(receivedEvent, 1, \"event should go to manager and not view\");\n});\n\ntest(\"event manager should be able to re-dispatch events to view\", function() {\n\n  var receivedEvent=0;\n  view = Ember.ContainerView.create({\n    elementId: 'containerView',\n\n    eventManager: Ember.Object.create({\n      mouseDown: function(evt, view) {\n        // Re-dispatch event when you get it.\n        //\n        // The second parameter tells the dispatcher\n        // that this event has been handled. This\n        // API will clearly need to be reworked since\n        // multiple eventManagers in a single view\n        // hierarchy would break, but it shows that\n        // re-dispatching works\n        view.$().trigger('mousedown',this);\n      }\n    }),\n\n    childViews: ['child'],\n\n    child: Ember.View.extend({\n      elementId: 'nestedView',\n\n      mouseDown: function(evt) {\n        receivedEvent++;\n      }\n    }),\n\n    mouseDown: function(evt) {\n      receivedEvent++;\n    }\n  });\n\n  Ember.run(function() { view.append(); });\n\n  Ember.$('#nestedView').trigger('mousedown');\n  equal(receivedEvent, 2, \"event should go to manager and not view\");\n});\n\n})();\n//@ sourceURL=ember-views/~tests/system/event_dispatcher_test");