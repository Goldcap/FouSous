minispade.register('ember-views/~tests/system/render_buffer_test', "(function() {// ==========================================================================\n// Project:   Ember - JavaScript Application Framework\n// Copyright: Â©2006-2011 Apple Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar set = Ember.set, get = Ember.get;\n\n// .......................................................\n//  render()\n//\nmodule(\"Ember.RenderBuffer\");\n\ntest(\"RenderBuffers combine strings\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.push('a');\n  buffer.push('b');\n\n  equal(\"<div>ab</div>\", buffer.string(), \"Multiple pushes should concatenate\");\n});\n\ntest(\"It is possible to remove a RenderBuffer\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.push('a');\n\n  var second = buffer.begin('span').push('zomg');\n  second.end();\n\n  var third = buffer.begin('span').push('wotwot');\n  third.end();\n\n  buffer.push('b');\n\n  second.remove();\n\n  equal(buffer.string(), '<div>a<span>wotwot</span>b</div>', 'Removed elements are gone');\n});\n\ntest(\"It is possible to replace a RenderBuffer\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.push('a');\n\n  var second = buffer.begin('span').push('zomg');\n  second.end();\n\n  buffer.push('b');\n\n  var third = buffer.begin('span').push('wotwot');\n  third.end();\n\n  buffer.push('c');\n\n  var replacement = second.replaceWith('aside').push('replaced!');\n  replacement.end();\n\n  equal(buffer.string(), '<div>a<aside>replaced!</aside>b<span>wotwot</span>c</div>', 'Removed elements are absent in the final output');\n});\n\ntest(\"It is possible to insert a RenderBuffer after another one\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.push('a');\n\n  var second = buffer.begin('span').push('zomg');\n  second.end();\n\n  buffer.push('b');\n\n  var third = buffer.begin('span').push('wotwot');\n  third.end();\n\n  buffer.push('c');\n\n  var inserted = third.insertAfter('aside').push('inserted!');\n  inserted.end();\n\n  equal(buffer.string(), '<div>a<span>zomg</span>b<span>wotwot</span><aside>inserted!</aside>c</div>', 'Inserted objects are inserted in the final output');\n});\n\ntest(\"It is possible to prepend a child RenderBuffer\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.push('a');\n\n  var second = buffer.begin('span').push('zomg');\n  second.end();\n\n  buffer.push('b');\n\n  var third = buffer.begin('span').push('wotwot');\n  third.end();\n\n  buffer.push('c');\n\n  var prepended = buffer.prepend('aside').push('prepended!');\n  prepended.end();\n\n  equal(buffer.string(), '<div><aside>prepended!</aside>a<span>zomg</span>b<span>wotwot</span>c</div>', 'Prepended buffers are prepended to the final output');\n});\n\ntest(\"prevents XSS injection via `id`\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.id('hacked\" megahax=\"yes');\n\n  equal(buffer.string(), '<div id=\"hacked&quot; megahax=&quot;yes\"></div>');\n});\n\ntest(\"prevents XSS injection via `attr`\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.attr('id', 'trololol\" onmouseover=\"pwn()');\n  buffer.attr('class', \"hax><img src='trollface.png'\");\n\n  equal(buffer.string(), '<div id=\"trololol&quot; onmouseover=&quot;pwn()\" class=\"hax&gt;&lt;img src=&#x27;trollface.png&#x27;\"></div>');\n});\n\ntest(\"prevents XSS injection via `addClass`\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.addClass('megahax\" xss=\"true');\n\n  equal(buffer.string(), '<div class=\"megahax&quot; xss=&quot;true\"></div>');\n});\n\ntest(\"prevents XSS injection via `style`\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.style('color', 'blue;\" xss=\"true\" style=\"color:red');\n\n  equal(buffer.string(), '<div style=\"color:blue;&quot; xss=&quot;true&quot; style=&quot;color:red;\"></div>');\n});\n\n\nmodule(\"RenderBuffers without tagName\");\n\ntest(\"It is possible to create a RenderBuffer without a tagName\", function() {\n  var buffer = new Ember.RenderBuffer();\n  buffer.push('a');\n  buffer.push('b');\n  buffer.push('c');\n\n  equal(buffer.string(), \"abc\", \"Buffers without tagNames do not wrap the content in a tag\");\n});\n\ntest(\"it is possible to create a child render buffer without a tagName\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.push('a');\n\n  var second = buffer.begin().push('middle').end();\n\n  buffer.push('b');\n  buffer.push('c');\n\n  equal(buffer.string(), \"<div>amiddlebc</div>\", \"Buffers without tagNames do not wrap the content in a tag\");\n});\n\ntest(\"it is possible to replace a child render buffer initially created without a tagName\", function() {\n  var buffer = new Ember.RenderBuffer('div');\n\n  buffer.push('a');\n\n  var second = buffer.begin().push('middle');\n  second.end();\n\n  buffer.push('b');\n  buffer.push('c');\n\n  equal(buffer.string(), \"<div>amiddlebc</div>\", \"precond - Buffers without tagNames do not wrap the content in a tag\");\n\n  var replacement = second.replaceWith().push('new-mid');\n  replacement.end();\n\n  equal(buffer.string(), \"<div>anew-midbc</div>\", \"Replacements can operate on tagName-less buffers\");\n});\n\n})();\n//@ sourceURL=ember-views/~tests/system/render_buffer_test");