minispade.register('ember-views/~tests/views/view/element_test', "(function() {// ==========================================================================\n// Project:   Ember - JavaScript Application Framework\n// Copyright: Â©2006-2011 Apple Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar set = Ember.set, get = Ember.get;\n\nvar parentView, child, parentDom, childDom ;\n\nmodule(\"Ember.View#element\");\n\ntest(\"returns null if the view has no element and no parent view\", function() {\n  var view = Ember.View.create() ;\n  equal(get(view, 'parentView'), null, 'precond - has no parentView');\n  equal(get(view, 'element'), null, 'has no element');\n});\n\ntest(\"returns null if the view has no element and parent view has no element\", function() {\n  parentView = Ember.ContainerView.create({\n    childViews: [ Ember.View.extend() ]\n  });\n  var view = get(parentView, 'childViews').objectAt(0);\n\n  equal(get(view, 'parentView'), parentView, 'precond - has parent view');\n  equal(get(parentView, 'element'), null, 'parentView has no element');\n  equal(get(view, 'element'), null, ' has no element');\n});\n\ntest(\"returns element if you set the value\", function() {\n  var view = Ember.View.create();\n  equal(get(view, 'element'), null, 'precond- has no element');\n\n  var dom = document.createElement('div');\n  set(view, 'element', dom);\n\n  equal(get(view, 'element'), dom, 'now has set element');\n});\n\n\nmodule(\"Ember.View#element - autodiscovery\", {\n  setup: function() {\n\n    parentView = Ember.ContainerView.create({\n      childViews: [ Ember.View.extend({\n        elementId: 'child-view'\n      }) ]\n    });\n\n    child = get(parentView, 'childViews').objectAt(0);\n\n    // setup parent/child dom\n    parentDom = Ember.$(\"<div><div id='child-view'></div></div>\")[0];\n\n    // set parent element...\n    set(parentView, 'element', parentDom);\n  },\n\n  teardown: function() {\n    parentView = child = parentDom = childDom = null ;\n  }\n});\n\ntest(\"discovers element if has no element but parent view does have element\", function() {\n  equal(get(parentView, 'element'), parentDom, 'precond - parent has element');\n  ok(parentDom.firstChild, 'precond - parentDom has first child');\n\n  equal(child.$().attr('id'), 'child-view', 'view discovered child');\n});\n\ntest(\"should not allow the elementId to be changed\", function() {\n  var view = Ember.View.create({\n    elementId: 'one'\n  });\n\n  raises(function() {\n    view.set('elementId', 'two');\n  }, /Changing a view's elementId after creation is not allowed./, \"raises elementId changed exception\");\n\n  equal(view.get('elementId'), 'one', 'elementId is still \"one\"');\n});\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/element_test");