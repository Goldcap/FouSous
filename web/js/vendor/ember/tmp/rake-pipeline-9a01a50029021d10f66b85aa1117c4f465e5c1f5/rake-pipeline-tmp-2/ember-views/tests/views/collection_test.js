minispade.register('ember-views/~tests/views/collection_test', "(function() {// ==========================================================================\n// Project:   Ember - JavaScript Application Framework\n// Copyright: ©2006-2011 Strobe Inc. and contributors.\n//            ©2008-2011 Apple Inc. All rights reserved.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar set = Ember.set, get = Ember.get;\nvar forEach = Ember.EnumerableUtils.forEach;\nvar view;\n\nmodule(\"Ember.CollectionView\", {\n  setup: function() {\n    Ember.CollectionView.CONTAINER_MAP.del = 'em';\n  },\n  teardown: function() {\n    delete Ember.CollectionView.CONTAINER_MAP.del;\n    Ember.run(function(){\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"should render a view for each item in its content array\", function() {\n  view = Ember.CollectionView.create({\n    content: Ember.A([1, 2, 3, 4])\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n  equal(view.$('div').length, 4);\n});\n\ntest(\"should render the emptyView if content array is empty (view class)\", function() {\n  view = Ember.CollectionView.create({\n    tagName: 'del',\n    content: Ember.A(),\n\n    emptyView: Ember.View.extend({\n      tagName: 'kbd',\n      render: function(buf) {\n        buf.push(\"OY SORRY GUVNAH NO NEWS TODAY EH\");\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().find('kbd:contains(\"OY SORRY GUVNAH\")').length, \"displays empty view\");\n});\n\ntest(\"should render the emptyView if content array is empty (view instance)\", function() {\n  view = Ember.CollectionView.create({\n    tagName: 'del',\n    content: Ember.A(),\n\n    emptyView: Ember.View.create({\n      tagName: 'kbd',\n      render: function(buf) {\n        buf.push(\"OY SORRY GUVNAH NO NEWS TODAY EH\");\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().find('kbd:contains(\"OY SORRY GUVNAH\")').length, \"displays empty view\");\n});\n\ntest(\"should be able to override the tag name of itemViewClass even if tag is in default mapping\", function() {\n  view = Ember.CollectionView.create({\n    tagName: 'del',\n    content: Ember.A(['NEWS GUVNAH']),\n\n    itemViewClass: Ember.View.extend({\n      tagName: 'kbd',\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(view.$().find('kbd:contains(\"NEWS GUVNAH\")').length, \"displays the item view with proper tag name\");\n});\n\ntest(\"should allow custom item views by setting itemViewClass\", function() {\n  var passedContents = [];\n  view = Ember.CollectionView.create({\n    content: Ember.A(['foo', 'bar', 'baz']),\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        passedContents.push(get(this, 'content'));\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  deepEqual(passedContents, ['foo', 'bar', 'baz'], \"sets the content property on each item view\");\n\n  forEach(passedContents, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1);\n  });\n});\n\ntest(\"should insert a new item in DOM when an item is added to the content array\", function() {\n  var content = Ember.A(['foo', 'bar', 'baz']);\n\n  view = Ember.CollectionView.create({\n    content: content,\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  forEach(content, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1, \"precond - generates pre-existing items\");\n  });\n\n  Ember.run(function() {\n    content.insertAt(1, 'quux');\n  });\n\n  equal(view.$(':nth-child(2)').text(), 'quux');\n});\n\ntest(\"should remove an item from DOM when an item is removed from the content array\", function() {\n  var content = Ember.A(['foo', 'bar', 'baz']);\n\n  view = Ember.CollectionView.create({\n    content: content,\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  forEach(content, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1, \"precond - generates pre-existing items\");\n  });\n\n  Ember.run(function() {\n    content.removeAt(1);\n  });\n\n  forEach(content, function(item, idx) {\n    equal(view.$(Ember.String.fmt(':nth-child(%@)', [String(idx+1)])).text(), item);\n  });\n});\n\ntest(\"it updates the view if an item is replaced\", function() {\n  var content = Ember.A(['foo', 'bar', 'baz']);\n  view = Ember.CollectionView.create({\n    content: content,\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  forEach(content, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1, \"precond - generates pre-existing items\");\n  });\n\n  Ember.run(function() {\n    content.removeAt(1);\n    content.insertAt(1, \"Kazuki\" );\n  });\n\n  forEach(content, function(item, idx) {\n    equal(view.$(Ember.String.fmt(':nth-child(%@)', [String(idx+1)])).text(), item, \"postcond - correct array update\");\n  });\n});\n\ntest(\"can add and replace in the same runloop\", function() {\n  var content = Ember.A(['foo', 'bar', 'baz']);\n  view = Ember.CollectionView.create({\n    content: content,\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  forEach(content, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1, \"precond - generates pre-existing items\");\n  });\n\n  Ember.run(function() {\n    content.pushObject(\"Tom Dale\" );\n    content.removeAt(0);\n    content.insertAt(0, \"Kazuki\" );\n  });\n\n  forEach(content, function(item, idx) {\n    equal(view.$(Ember.String.fmt(':nth-child(%@)', [String(idx+1)])).text(), item, \"postcond - correct array update\");\n  });\n\n});\n\ntest(\"can add and replace the object before the add in the same runloop\", function() {\n  var content = Ember.A(['foo', 'bar', 'baz']);\n  view = Ember.CollectionView.create({\n    content: content,\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  forEach(content, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1, \"precond - generates pre-existing items\");\n  });\n\n  Ember.run(function() {\n    content.pushObject(\"Tom Dale\" );\n    content.removeAt(1);\n    content.insertAt(1, \"Kazuki\" );\n  });\n\n  forEach(content, function(item, idx) {\n    equal(view.$(Ember.String.fmt(':nth-child(%@)', [String(idx+1)])).text(), item, \"postcond - correct array update\");\n  });\n});\n\ntest(\"can add and replace complicatedly\", function() {\n  var content = Ember.A(['foo', 'bar', 'baz']);\n  view = Ember.CollectionView.create({\n    content: content,\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  forEach(content, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1, \"precond - generates pre-existing items\");\n  });\n\n  Ember.run(function() {\n    content.pushObject(\"Tom Dale\" );\n    content.removeAt(1);\n    content.insertAt(1, \"Kazuki\" );\n    content.pushObject(\"Firestone\" );\n    content.pushObject(\"McMunch\" );\n  });\n\n  forEach(content, function(item, idx) {\n    equal(view.$(Ember.String.fmt(':nth-child(%@)', [String(idx+1)])).text(), item, \"postcond - correct array update: \"+item.name+\"!=\"+view.$(Ember.String.fmt(':nth-child(%@)', [String(idx+1)])).text());\n  });\n});\n\ntest(\"can add and replace complicatedly harder\", function() {\n  var content = Ember.A(['foo', 'bar', 'baz']);\n  view = Ember.CollectionView.create({\n    content: content,\n\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'content'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  forEach(content, function(item) {\n    equal(view.$(':contains(\"'+item+'\")').length, 1, \"precond - generates pre-existing items\");\n  });\n\n  Ember.run(function() {\n    content.pushObject(\"Tom Dale\" );\n    content.removeAt(1);\n    content.insertAt(1, \"Kazuki\" );\n    content.pushObject(\"Firestone\" );\n    content.pushObject(\"McMunch\" );\n    content.removeAt(2);\n  });\n\n  forEach(content, function(item, idx) {\n    equal(view.$(Ember.String.fmt(':nth-child(%@)', [String(idx+1)])).text(), item, \"postcond - correct array update\");\n  });\n});\n\ntest(\"should allow changes to content object before layer is created\", function() {\n  view = Ember.CollectionView.create({\n    content: null\n  });\n\n\n  Ember.run(function() {\n    set(view, 'content', Ember.A());\n    set(view, 'content', Ember.A([1, 2, 3]));\n    set(view, 'content', Ember.A([1, 2]));\n    view.append();\n  });\n\n  ok(view.$().children().length);\n});\n\ntest(\"should fire life cycle events when elements are added and removed\", function() {\n  var view,\n    didInsertElement = 0,\n    willDestroyElement = 0,\n    willDestroy = 0,\n    content = Ember.A([1, 2, 3]);\n  Ember.run(function () {\n    view = Ember.CollectionView.create({\n      content: content,\n      itemViewClass: Ember.View.extend({\n        render: function(buf) {\n          buf.push(get(this, 'content'));\n        },\n        didInsertElement: function () {\n          didInsertElement++;\n        },\n        willDestroyElement: function () {\n          willDestroyElement++;\n        },\n        willDestroy: function () {\n          willDestroy++;\n          this._super();\n        }\n      })\n    });\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(didInsertElement, 3);\n  equal(willDestroyElement, 0);\n  equal(willDestroy, 0);\n  equal(view.$().text(), '123');\n\n  Ember.run(function () {\n    content.pushObject(4);\n    content.unshiftObject(0);\n  });\n\n\n  equal(didInsertElement, 5);\n  equal(willDestroyElement, 0);\n  equal(willDestroy, 0);\n  equal(view.$().text(), '01234');\n\n  Ember.run(function () {\n    content.popObject();\n    content.shiftObject();\n  });\n\n  equal(didInsertElement, 5);\n  equal(willDestroyElement, 2);\n  equal(willDestroy, 2);\n  equal(view.$().text(), '123');\n\n  Ember.run(function () {\n    view.set('content', Ember.A([7,8,9]));\n  });\n\n  equal(didInsertElement, 8);\n  equal(willDestroyElement, 5);\n  equal(willDestroy, 5);\n  equal(view.$().text(), '789');\n\n  Ember.run(function () {\n    view.destroy();\n  });\n\n  equal(didInsertElement, 8);\n  equal(willDestroyElement, 8);\n  equal(willDestroy, 8);\n});\n\ntest(\"should allow changing content property to be null\", function() {\n  view = Ember.CollectionView.create({\n    content: Ember.A([1, 2, 3]),\n\n    emptyView: Ember.View.extend({\n      template: function() { return \"(empty)\"; }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  equal(view.$().children().length, 3, \"precond - creates three elements\");\n\n  Ember.run(function() {\n    set(view, 'content', null);\n  });\n\n  equal(view.$().children().text(), \"(empty)\", \"should display empty view\");\n});\n\ntest(\"should allow items to access to the CollectionView's current index in the content array\", function() {\n  view = Ember.CollectionView.create({\n    content: Ember.A(['zero', 'one', 'two']),\n    itemViewClass: Ember.View.extend({\n      render: function(buf) {\n        buf.push(get(this, 'contentIndex'));\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  deepEqual(view.$(':nth-child(1)').text(), \"0\");\n  deepEqual(view.$(':nth-child(2)').text(), \"1\");\n  deepEqual(view.$(':nth-child(3)').text(), \"2\");\n});\n\ntest(\"should allow declaration of itemViewClass as a string\", function() {\n  view = Ember.CollectionView.create({\n    content: Ember.A([1, 2, 3]),\n    itemViewClass: 'Ember.View'\n  });\n\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equal(view.$('.ember-view').length, 3);\n});\n\ntest(\"should not render the emptyView if content is emptied and refilled in the same run loop\", function() {\n  view = Ember.CollectionView.create({\n    tagName: 'div',\n    content: Ember.A(['NEWS GUVNAH']),\n\n    emptyView: Ember.View.create({\n      tagName: 'kbd',\n      render: function(buf) {\n        buf.push(\"OY SORRY GUVNAH NO NEWS TODAY EH\");\n      }\n    })\n  });\n\n  Ember.run(function() {\n    view.append();\n  });\n  \n  equal(view.$().find('kbd:contains(\"OY SORRY GUVNAH\")').length, 0);\n\n  Ember.run(function() {\n    view.get('content').popObject();\n    view.get('content').pushObject(['NEWS GUVNAH']);\n  });\n  equal(view.$('div').length, 1);\n  equal(view.$().find('kbd:contains(\"OY SORRY GUVNAH\")').length, 0);\n});\n\ntest(\"a array_proxy that backs an sorted array_controller that backs a collection view functions properly\", function() {\n\n  var array = Ember.A([{ name: \"Other Katz\" }]);\n  var arrayProxy = Ember.ArrayProxy.create({content: array});\n\n  var sortedController = Ember.ArrayController.create({\n    content: arrayProxy,\n    sortProperties: ['name']\n  });\n\n  var container = Ember.CollectionView.create({\n    content: sortedController\n  });\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  Ember.run(function() {\n    arrayProxy.addObjects([{ name: \"Scumbag Demon\" }, { name: \"Lord British\" }]);\n  });\n\n  equal(container.get('content.length'), 3, 'ArrayController should have 3 entries');\n  equal(container.get('content.content.length'), 3, 'RecordArray should have 3 entries');\n  equal(container.get('childViews.length'), 3, 'CollectionView should have 3 entries');\n\n  Ember.run(function() {\n    container.destroy();\n  });\n});\n\n})();\n//@ sourceURL=ember-views/~tests/views/collection_test");