minispade.register('ember-views/~tests/views/container_view_test', "(function() {var get = Ember.get, set = Ember.set;\n\nmodule(\"ember-views/views/container_view_test\");\n\ntest(\"should be able to insert views after the DOM representation is created\", function() {\n  var container = Ember.ContainerView.create({\n    classNameBindings: ['name'],\n    name: 'foo'\n  });\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  var view = Ember.View.create({\n    template: function() {\n      return \"This is my moment\";\n    }\n  });\n\n  Ember.run(function() {\n    container.get('childViews').pushObject(view);\n  });\n\n  equal(container.$().text(), \"This is my moment\");\n\n  Ember.run(function(){\n    container.destroy();\n  });\n  \n});\n\ntest(\"should be able to observe properties that contain child views\", function() {\n  var container;\n\n  Ember.run(function() {\n    container = Ember.ContainerView.create({\n      childViews: ['displayView'],\n      displayIsDisplayedBinding: 'displayView.isDisplayed',\n\n      displayView: Ember.View.extend({\n        isDisplayed: true\n      })\n    });\n\n    container.appendTo('#qunit-fixture');\n  });\n\n  ok(container.get('displayIsDisplayed'), \"can bind to child view\");\n});\n\ntest(\"should set the parentView property on views that are added to the child views array\", function() {\n  var container = Ember.ContainerView.create(),\n      View = Ember.View.extend({\n        template: function() {\n          return \"This is my moment\";\n        }\n      }),\n      view = View.create(),\n      childViews = get(container, 'childViews');\n\n  childViews.pushObject(view);\n  equal(view.get('parentView'), container, \"sets the parent view after the childView is appended\");\n\n  Ember.run(function() {\n    childViews.removeObject(view);\n  });\n  equal(get(view, 'parentView'), null, \"sets parentView to null when a view is removed\");\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  Ember.run(function(){\n    childViews.pushObject(view);\n  });\n  \n  equal(get(view, 'parentView'), container, \"sets the parent view after the childView is appended\");\n\n  var secondView = View.create(),\n      thirdView = View.create(),\n      fourthView = View.create();\n  \n  Ember.run(function(){\n    childViews.pushObject(secondView);\n    childViews.replace(1, 0, [thirdView, fourthView]);\n  });\n  \n  equal(get(secondView, 'parentView'), container, \"sets the parent view of the second view\");\n  equal(get(thirdView, 'parentView'), container, \"sets the parent view of the third view\");\n  equal(get(fourthView, 'parentView'), container, \"sets the parent view of the fourth view\");\n  \n  childViews.replace(2, 2);\n  equal(get(view, 'parentView'), container, \"doesn't change non-removed view\");\n  equal(get(thirdView, 'parentView'), container, \"doesn't change non-removed view\");\n  equal(get(secondView, 'parentView'), null, \"clears the parent view of the third view\");\n  equal(get(fourthView, 'parentView'), null, \"clears the parent view of the fourth view\");\n});\n\ntest(\"views that are removed from a ContainerView should have their child views cleared\", function() {\n  var container = Ember.ContainerView.create();\n  var view = Ember.View.create({\n    remove: function() {\n      this._super();\n    },\n    template: function(context, options) {\n      options.data.view.appendChild(Ember.View);\n    }\n  });\n\n  get(container, 'childViews').pushObject(view);\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(get(view, 'childViews.length'), 1, \"precond - renders one child view\");\n  Ember.run(function() {\n    get(container, 'childViews').removeObject(view);\n  });\n  equal(get(view, 'childViews.length'), 0, \"child views are cleared when removed from container view\");\n});\n\ntest(\"if a ContainerView starts with an empy currentView, nothing is displayed\", function() {\n  var container = Ember.ContainerView.create();\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(container.$().text(), '', \"has a empty contents\");\n  equal(get(container, 'childViews.length'), 0, \"should not have any child views\");\n});\n\ntest(\"if a ContainerView starts with a currentView, it is rendered as a child view\", function() {\n  var controller = Ember.Controller.create();\n  var container = Ember.ContainerView.create({\n    controller: controller\n  });\n  var context = null;\n  var templateData = null;\n  var mainView = Ember.View.create({\n    template: function(ctx, opts) {\n      context = ctx;\n      templateData = opts.data;\n      return \"This is the main view.\";\n    }\n  });\n\n  set(container, 'currentView', mainView);\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(container.$().text(), \"This is the main view.\", \"should render its child\");\n  equal(get(container, 'childViews.length'), 1, \"should have one child view\");\n  equal(get(container, 'childViews').objectAt(0), mainView, \"should have the currentView as the only child view\");\n  equal(mainView.get('parentView'), container, \"parentView is setup\");\n  if (Ember.VIEW_PRESERVES_CONTEXT) {\n    equal(context, container.get('context'), 'context preserved');\n    equal(templateData.keywords.controller, controller, 'templateData is setup');\n    equal(templateData.keywords.view, mainView, 'templateData is setup');\n  }\n});\n\ntest(\"if a ContainerView is created with a currentView, it is rendered as a child view\", function() {\n  var context = null;\n  var templateData = null;\n  var mainView = Ember.View.create({\n    template: function(ctx, opts) {\n      context = ctx;\n      templateData = opts.data;\n      return \"This is the main view.\";\n    }\n  });\n\n  var controller = Ember.Controller.create();\n\n  var container = Ember.ContainerView.create({\n    currentView: mainView,\n    controller: controller\n  });\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(container.$().text(), \"This is the main view.\", \"should render its child\");\n  equal(get(container, 'childViews.length'), 1, \"should have one child view\");\n  equal(get(container, 'childViews').objectAt(0), mainView, \"should have the currentView as the only child view\");\n  equal(mainView.get('parentView'), container, \"parentView is setup\");\n  if (Ember.VIEW_PRESERVES_CONTEXT) {\n    equal(context, container.get('context'), 'context preserved');\n    equal(templateData.keywords.controller, controller, 'templateData is setup');\n    equal(templateData.keywords.view, mainView, 'templateData is setup');\n  }\n});\n\ntest(\"if a ContainerView starts with no currentView and then one is set, the ContainerView is updated\", function() {\n  var container = Ember.ContainerView.create();\n  var mainView = Ember.View.create({\n    template: function() {\n      return \"This is the main view.\";\n    }\n  });\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(container.$().text(), '', \"has a empty contents\");\n  equal(get(container, 'childViews.length'), 0, \"should not have any child views\");\n\n  Ember.run(function() {\n    set(container, 'currentView', mainView);\n  });\n\n  equal(container.$().text(), \"This is the main view.\", \"should render its child\");\n  equal(get(container, 'childViews.length'), 1, \"should have one child view\");\n  equal(get(container, 'childViews').objectAt(0), mainView, \"should have the currentView as the only child view\");\n});\n\ntest(\"if a ContainerView starts with a currentView and then is set to null, the ContainerView is updated\", function() {\n  var container = Ember.ContainerView.create();\n  var mainView = Ember.View.create({\n    template: function() {\n      return \"This is the main view.\";\n    }\n  });\n  container.set('currentView', mainView);\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(container.$().text(), \"This is the main view.\", \"should render its child\");\n  equal(get(container, 'childViews.length'), 1, \"should have one child view\");\n  equal(get(container, 'childViews').objectAt(0), mainView, \"should have the currentView as the only child view\");\n\n  Ember.run(function() {\n    set(container, 'currentView', null);\n  });\n\n  equal(container.$().text(), '', \"has a empty contents\");\n  equal(get(container, 'childViews.length'), 0, \"should not have any child views\");\n});\n\ntest(\"if a ContainerView starts with a currentView and then is set to null, the ContainerView is updated and the previous currentView is destroyed\", function() {\n  var container = Ember.ContainerView.create();\n  var mainView = Ember.View.create({\n    template: function() {\n      return \"This is the main view.\";\n    }\n  });\n  container.set('currentView', mainView);\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(container.$().text(), \"This is the main view.\", \"should render its child\");\n  equal(get(container, 'childViews.length'), 1, \"should have one child view\");\n  equal(get(container, 'childViews').objectAt(0), mainView, \"should have the currentView as the only child view\");\n\n  Ember.run(function() {\n    set(container, 'currentView', null);\n  });\n\n  equal(mainView.isDestroyed, true, 'should destroy the previous currentView.');\n\n  equal(container.$().text(), '', \"has a empty contents\");\n  equal(get(container, 'childViews.length'), 0, \"should not have any child views\");\n});\n\ntest(\"if a ContainerView starts with a currentView and then a different currentView is set, the old view is destroyed and the new one is added\", function() {\n  var container = Ember.ContainerView.create();\n  var mainView = Ember.View.create({\n    template: function() {\n      return \"This is the main view.\";\n    }\n  });\n\n  var secondaryView = Ember.View.create({\n    template: function() {\n      return \"This is the secondary view.\";\n    }\n  });\n\n  container.set('currentView', mainView);\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  equal(container.$().text(), \"This is the main view.\", \"should render its child\");\n  equal(get(container, 'childViews.length'), 1, \"should have one child view\");\n  equal(get(container, 'childViews').objectAt(0), mainView, \"should have the currentView as the only child view\");\n\n  Ember.run(function() {\n    set(container, 'currentView', secondaryView);\n  });\n\n  equal(mainView.isDestroyed, true, 'should destroy the previous currentView.');\n\n  equal(container.$().text(), \"This is the secondary view.\", \"should render its child\");\n  equal(get(container, 'childViews.length'), 1, \"should have one child view\");\n  equal(get(container, 'childViews').objectAt(0), secondaryView, \"should have the currentView as the only child view\");\n});\n\ntest(\"should be able to modify childViews many times during an run loop\", function () {\n\n  var container = Ember.ContainerView.create();\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  var one = Ember.View.create({\n    template: function() {\n      return 'one';\n    }\n  });\n\n  var two = Ember.View.create({\n    template: function() {\n      return 'two';\n    }\n  });\n\n  var three = Ember.View.create({\n    template: function() {\n      return 'three';\n    }\n  });\n\n  var childViews = container.get('childViews');\n\n  Ember.run(function() {\n    // initial order\n    childViews.pushObjects([three, one, two]);\n    // sort\n    childViews.removeObject(three);\n    childViews.pushObject(three);\n  });\n\n  equal(container.$().text(), 'onetwothree');\n});\n\ntest(\"should be able to modify childViews then remove the ContainerView in same run loop\", function () {\n  var container = Ember.ContainerView.create();\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  var childViews = container.get('childViews');\n  var count = 0;\n  var child = Ember.View.create({\n    template: function () { count++; return 'child'; }\n  });\n\n  Ember.run(function() {\n    childViews.pushObject(child);\n    container.remove();\n  });\n\n  equal(count, 0, 'did not render child');\n});\n\ntest(\"should be able to modify childViews then destroy the ContainerView in same run loop\", function () {\n    var container = Ember.ContainerView.create();\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  var childViews = container.get('childViews');\n  var count = 0;\n  var child = Ember.View.create({\n    template: function () { count++; return 'child'; }\n  });\n\n  Ember.run(function() {\n    childViews.pushObject(child);\n    container.destroy();\n  });\n\n  equal(count, 0, 'did not render child');\n});\n\n\ntest(\"should be able to modify childViews then rerender the ContainerView in same run loop\", function () {\n    var container = Ember.ContainerView.create();\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  var childViews = container.get('childViews');\n  var count = 0;\n  var child = Ember.View.create({\n    template: function () { count++; return 'child'; }\n  });\n\n  Ember.run(function() {\n    childViews.pushObject(child);\n    container.rerender();\n  });\n\n  equal(count, 1, 'rendered child only once');\n});\n\ntest(\"should be able to modify childViews then rerender then modify again the ContainerView in same run loop\", function () {\n  var container = Ember.ContainerView.create();\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  var childViews = container.get('childViews');\n  var Child = Ember.View.extend({\n    count: 0,\n    render: function (buffer) {\n      this.count++;\n      buffer.push(this.label);\n    }\n  });\n  var one = Child.create({label: 'one'});\n  var two = Child.create({label: 'two'});\n\n  Ember.run(function() {\n    childViews.pushObject(one);\n    childViews.pushObject(two);\n  });\n\n  equal(one.count, 1, 'rendered child only once');\n  equal(two.count, 1, 'rendered child only once');\n  equal(container.$().text(), 'onetwo');\n});\n\ntest(\"should be able to modify childViews then rerender again the ContainerView in same run loop and then modify again\", function () {\n  var container = Ember.ContainerView.create();\n\n  Ember.run(function() {\n    container.appendTo('#qunit-fixture');\n  });\n\n  var childViews = container.get('childViews');\n  var Child = Ember.View.extend({\n    count: 0,\n    render: function (buffer) {\n      this.count++;\n      buffer.push(this.label);\n    }\n  });\n  var one = Child.create({label: 'one'});\n  var two = Child.create({label: 'two'});\n\n  Ember.run(function() {\n    childViews.pushObject(one);\n    container.rerender();\n  });\n\n  equal(one.count, 1, 'rendered child only once');\n  equal(container.$().text(), 'one');\n\n  Ember.run(function () {\n    childViews.pushObject(two);\n  });\n\n  equal(one.count, 1, 'rendered child only once');\n  equal(two.count, 1, 'rendered child only once');\n  equal(container.$().text(), 'onetwo');\n});\n\n})();\n//@ sourceURL=ember-views/~tests/views/container_view_test");