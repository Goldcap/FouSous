minispade.register('ember-views/~tests/views/view/class_name_bindings_test', "(function() {// ==========================================================================\n// Project:   Ember Views\n// Copyright: Â©2006-2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar set = Ember.set, get = Ember.get;\n\nmodule(\"Ember.View - Class Name Bindings\");\n\ntest(\"should apply bound class names to the element\", function() {\n  var view = Ember.View.create({\n    classNameBindings: ['priority', 'isUrgent', 'isClassified:classified',\n                        'canIgnore', 'messages.count', 'messages.resent:is-resent', 'isNumber:is-number',\n                        'isEnabled:enabled:disabled'],\n\n    priority: 'high',\n    isUrgent: true,\n    isClassified: true,\n    canIgnore: false,\n    isNumber: 5,\n    isEnabled: true,\n\n    messages: {\n      count: 'five-messages',\n      resent: true\n    }\n  });\n\n  Ember.run(function(){\n    view.createElement();\n  });\n  \n  ok(view.$().hasClass('high'), \"adds string values as class name\");\n  ok(view.$().hasClass('is-urgent'), \"adds true Boolean values by dasherizing\");\n  ok(view.$().hasClass('classified'), \"supports customizing class name for Boolean values\");\n  ok(view.$().hasClass('five-messages'), \"supports paths in bindings\");\n  ok(view.$().hasClass('is-resent'), \"supports customing class name for paths\");\n  ok(view.$().hasClass('is-number'), \"supports colon syntax with truthy properties\");\n  ok(!view.$().hasClass('can-ignore'), \"does not add false Boolean values as class\");\n  ok(view.$().hasClass('enabled'), \"supports customizing class name for Boolean values with negation\");\n  ok(!view.$().hasClass('disabled'), \"does not add class name for negated binding\");\n});\n\ntest(\"should add, remove, or change class names if changed after element is created\", function() {\n  var view = Ember.View.create({\n    classNameBindings: ['priority', 'isUrgent', 'isClassified:classified',\n                        'canIgnore', 'messages.count', 'messages.resent:is-resent',\n                        'isEnabled:enabled:disabled'],\n\n    priority: 'high',\n    isUrgent: true,\n    isClassified: true,\n    canIgnore: false,\n    isEnabled: true,\n\n    messages: Ember.Object.create({\n      count: 'five-messages',\n      resent: false\n    })\n  });\n\n  Ember.run(function(){\n    view.createElement();\n    set(view, 'priority', 'orange');\n    set(view, 'isUrgent', false);\n    set(view, 'canIgnore', true);\n    set(view, 'isEnabled', false);\n    set(view, 'messages.count', 'six-messages');\n    set(view, 'messages.resent', true );\n  });\n\n  ok(view.$().hasClass('orange'), \"updates string values\");\n  ok(!view.$().hasClass('high'), \"removes old string value\");\n\n  ok(!view.$().hasClass('is-urgent', \"removes dasherized class when changed from true to false\"));\n  ok(view.$().hasClass('can-ignore'), \"adds dasherized class when changed from false to true\");\n\n  ok(view.$().hasClass('six-messages'), \"adds new value when path changes\");\n  ok(!view.$().hasClass('five-messages'), \"removes old value when path changes\");\n\n  ok(view.$().hasClass('is-resent'), \"adds customized class name when path changes\");\n\n  ok(!view.$().hasClass('enabled'), \"updates class name for negated binding\");\n  ok(view.$().hasClass('disabled'), \"adds negated class name for negated binding\");\n});\n\ntest(\":: class name syntax works with an empty true class\", function() {\n  var view = Ember.View.create({\n    isEnabled: false,\n    classNameBindings: ['isEnabled::not-enabled']\n  });\n\n  Ember.run(function(){ view.createElement(); });\n\n  equal(view.$().attr('class'), 'ember-view not-enabled', \"false class is rendered when property is false\");\n\n  Ember.run(function(){ view.set('isEnabled', true); });\n\n  equal(view.$().attr('class'), 'ember-view', \"no class is added when property is true and the class is empty\");\n});\n\ntest(\"classNames should not be duplicated on rerender\", function(){\n  var view;\n  \n  Ember.run(function(){\n    view = Ember.View.create({\n      classNameBindings: ['priority'],\n      priority: 'high'\n    });\n  });\n  \n\n  Ember.run(function(){\n    view.createElement();\n  });\n\n  equal(view.$().attr('class'), 'ember-view high');\n\n  Ember.run(function(){\n    view.rerender();\n  });\n\n  equal(view.$().attr('class'), 'ember-view high');\n});\n\ntest(\"classNames removed by a classNameBindings observer should not re-appear on rerender\", function(){\n  var view = Ember.View.create({\n    classNameBindings: ['isUrgent'],\n    isUrgent: true\n  });\n\n  Ember.run(function(){\n    view.createElement();\n  });\n\n  equal(view.$().attr('class'), 'ember-view is-urgent');\n\n  Ember.run(function(){\n    view.set('isUrgent', false);\n  });\n\n  equal(view.$().attr('class'), 'ember-view');\n\n  Ember.run(function(){\n    view.rerender();\n  });\n\n  equal(view.$().attr('class'), 'ember-view');\n});\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/class_name_bindings_test");