minispade.register('ember-views/~tests/views/view/child_views_test', "(function() {(function() {\n  var parentView, childView, childViews;\n  var get = Ember.get;\n\n  module('tests/views/view/child_views_tests.js', {\n    setup: function() {\n      parentView = Ember.View.create({\n        render: function(buffer) {\n          buffer.push('Em');\n          this.appendChild(childView);\n        }\n      });\n\n      childView = Ember.View.create({\n        template: function() { return 'ber'; }\n      });\n    },\n\n    teardown: function() {\n      Ember.run(function(){\n        parentView.destroy();\n            childView.destroy();\n      });\n      \n      childViews = null;\n    }\n  });\n\n  // no parent element, buffer, no element\n  // parent element\n\n  // no parent element, no buffer, no element\n  test(\"should render an inserted child view when the child is inserted before a DOM element is created\", function() {\n    Ember.run(function() {\n      parentView.append();\n    });\n\n    equal(parentView.$().text(), 'Ember', 'renders the child view after the parent view');\n  });\n\n  test(\"should not duplicate childViews when rerendering in buffer\", function() {\n\n    var Inner = Ember.View.extend({\n      template: function() { return ''; }\n    });\n\n    var Inner2 = Ember.View.extend({\n      template: function() { return ''; }\n    });\n\n    var Middle = Ember.View.extend({\n      render: function(buffer) {\n        this.appendChild(Inner);\n        this.appendChild(Inner2);\n      }\n    });\n\n    var outer = Ember.View.create({\n      render: function(buffer) {\n        this.middle = this.appendChild(Middle);\n      }\n    });\n\n    Ember.run(function() {\n      outer.renderToBuffer();\n    });\n\n    equal(outer.get('middle.childViews.length'), 2, 'precond middle has 2 child views rendered to buffer');\n\n    try {\n      Ember.TESTING_DEPRECATION = true;\n      Ember.run(function() {\n        outer.middle.rerender();\n      });\n    } finally {\n      Ember.TESTING_DEPRECATION = false;\n    }\n\n    equal(outer.get('middle.childViews.length'), 2, 'middle has 2 child views rendered to buffer');\n\n  });\n\n})();\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/child_views_test");