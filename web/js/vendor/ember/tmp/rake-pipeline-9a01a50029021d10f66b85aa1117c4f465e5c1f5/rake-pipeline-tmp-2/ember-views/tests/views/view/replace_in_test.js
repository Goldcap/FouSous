minispade.register('ember-views/~tests/views/view/replace_in_test', "(function() {// ==========================================================================\n// Project:   Ember Views\n// Copyright: Â©2006-2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar set = Ember.set, get = Ember.get;\n\nvar View, view, willDestroyCalled, childView;\n\nmodule(\"Ember.View - replaceIn()\", {\n  setup: function() {\n    View = Ember.View.extend({});\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      view.destroy();\n    });\n  }\n});\n\ntest(\"should be added to the specified element when calling replaceIn()\", function() {\n  Ember.$(\"#qunit-fixture\").html('<div id=\"menu\"></div>');\n\n  view = View.create();\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.replaceIn('#menu');\n  });\n\n  var viewElem = Ember.$('#menu').children();\n  ok(viewElem.length > 0, \"creates and replaces the view's element\");\n});\n\ntest(\"should remove previous elements when calling replaceIn()\", function() {\n  Ember.$(\"#qunit-fixture\").html('<div id=\"menu\"><p>Foo</p></div>');\n  var viewElem = Ember.$('#menu').children();\n\n  view = View.create();\n\n  ok(viewElem.length === 1, \"should have one element\");\n\n  Ember.run(function() {\n    view.replaceIn('#menu');\n  });\n\n  ok(viewElem.length === 1, \"should have one element\");\n\n});\n\nmodule(\"Ember.View - replaceIn() in a view hierarchy\", {\n  setup: function() {\n    View = Ember.ContainerView.extend({\n      childViews: ['child'],\n      child: Ember.View.extend({\n        elementId: 'child'\n      })\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      view.destroy();\n    });\n  }\n});\n\ntest(\"should be added to the specified element when calling replaceIn()\", function() {\n  Ember.$(\"#qunit-fixture\").html('<div id=\"menu\"></div>');\n\n  view = View.create();\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.replaceIn('#menu');\n  });\n\n  var viewElem = Ember.$('#menu #child');\n  ok(viewElem.length > 0, \"creates and replaces the view's element\");\n});\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/replace_in_test");