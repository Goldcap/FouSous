minispade.register('ember-views/~tests/views/view/append_to_test', "(function() {// ==========================================================================\n// Project:   Ember Views\n// Copyright: Â©2006-2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar set = Ember.set, get = Ember.get;\n\nvar View, view, willDestroyCalled, childView;\n\nmodule(\"Ember.View - append() and appendTo()\", {\n  setup: function() {\n    View = Ember.View.extend({});\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      if (!view.isDestroyed) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"should be added to the specified element when calling append()\", function() {\n  Ember.$(\"#qunit-fixture\").html('<div id=\"menu\"></div>');\n\n  view = View.create();\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.appendTo('#menu');\n  });\n\n  var viewElem = Ember.$('#menu').children();\n  ok(viewElem.length > 0, \"creates and appends the view's element\");\n});\n\ntest(\"should be added to the document body when calling appendTo()\", function() {\n  view = View.create({\n    render: function(buffer) {\n      buffer.push(\"foo bar baz\");\n    }\n  });\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  var viewElem = Ember.$(document.body).find(':contains(\"foo bar baz\")');\n  ok(viewElem.length > 0, \"creates and appends the view's element\");\n});\n\ntest(\"append calls willInsertElement and didInsertElement callbacks\", function(){\n  var willInsertElementCalled = false;\n  var willInsertElementCalledInChild = false;\n  var didInsertElementCalled = false;\n\n  var ViewWithCallback = View.extend({\n    willInsertElement: function(){\n      willInsertElementCalled = true;\n    },\n    didInsertElement: function(){\n      didInsertElementCalled = true;\n    },\n    render: function(buffer) {\n      this.appendChild(Ember.View.create({\n        willInsertElement: function() {\n          willInsertElementCalledInChild = true;\n        }\n      }));\n    }\n  });\n\n  view = ViewWithCallback.create();\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(willInsertElementCalled, \"willInsertElement called\");\n  ok(willInsertElementCalledInChild, \"willInsertElement called in child\");\n  ok(didInsertElementCalled, \"didInsertElement called\");\n});\n\ntest(\"remove removes an element from the DOM\", function() {\n  willDestroyCalled = 0;\n\n  view = View.create({\n    willDestroyElement: function() {\n      willDestroyCalled++;\n    }\n  });\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(Ember.$(\"#\" + get(view, 'elementId')).length === 1, \"precond - element was inserted\");\n\n  Ember.run(function() {\n    view.remove();\n  });\n\n  ok(Ember.$(\"#\" + get(view, 'elementId')).length === 0, \"remove removes an element from the DOM\");\n  ok(Ember.View.views[get(view, 'elementId')] === view, \"remove does not remove the view from the view hash\");\n  ok(!get(view, 'element'), \"remove nulls out the element\");\n  equal(willDestroyCalled, 1, \"the willDestroyElement hook was called once\");\n});\n\ntest(\"destroy more forcibly removes the view\", function() {\n  willDestroyCalled = 0;\n\n  view = View.create({\n    willDestroyElement: function() {\n      willDestroyCalled++;\n    }\n  });\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(Ember.$(\"#\" + get(view, 'elementId')).length === 1, \"precond - element was inserted\");\n\n  Ember.run(function() {\n    view.destroy();\n  });\n\n  ok(Ember.$(\"#\" + get(view, 'elementId')).length === 0, \"destroy removes an element from the DOM\");\n  ok(Ember.View.views[get(view, 'elementId')] === undefined, \"destroy removes a view from the global views hash\");\n  equal(get(view, 'isDestroyed'), true, \"the view is marked as destroyed\");\n  ok(!get(view, 'element'), \"the view no longer has an element\");\n  equal(willDestroyCalled, 1, \"the willDestroyElement hook was called once\");\n});\n\nmodule(\"Ember.View - append() and appendTo() in a view hierarchy\", {\n  setup: function() {\n    View = Ember.ContainerView.extend({\n      childViews: ['child'],\n      child: Ember.View.extend({\n        elementId: 'child'\n      })\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      if (!view.isDestroyed) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"should be added to the specified element when calling appendTo()\", function() {\n  Ember.$(\"#qunit-fixture\").html('<div id=\"menu\"></div>');\n\n  view = View.create();\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.appendTo('#menu');\n  });\n\n  var viewElem = Ember.$('#menu #child');\n  ok(viewElem.length > 0, \"creates and appends the view's element\");\n});\n\ntest(\"should be added to the document body when calling append()\", function() {\n  Ember.$(\"#qunit-fixture\").html('<div id=\"menu\"></div>');\n\n  view = View.create();\n\n  ok(!get(view, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  var viewElem = Ember.$('#child');\n  ok(viewElem.length > 0, \"creates and appends the view's element\");\n});\n\nmodule(\"Ember.View - removing views in a view hierarchy\", {\n  setup: function() {\n    willDestroyCalled = 0;\n\n    view = Ember.ContainerView.create({\n      childViews: ['child'],\n      child: Ember.View.create({\n        willDestroyElement: function() {\n          willDestroyCalled++;\n        }\n      })\n    });\n\n    childView = get(view, 'child');\n  },\n\n  teardown: function() {\n    Ember.run(function(){\n      if (!view.isDestroyed) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"remove removes child elements from the DOM\", function() {\n  ok(!get(childView, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(Ember.$(\"#\" + get(childView, 'elementId')).length === 1, \"precond - element was inserted\");\n\n  // remove parent view\n  Ember.run(function() {\n    view.remove();\n  });\n\n  ok(Ember.$(\"#\" + get(childView, 'elementId')).length === 0, \"remove removes child elements the DOM\");\n  ok(Ember.View.views[get(childView, 'elementId')] === childView, \"remove does not remove child views from the view hash\");\n  ok(!get(childView, 'element'), \"remove nulls out child elements\");\n  equal(willDestroyCalled, 1, \"the willDestroyElement hook was called once\");\n});\n\ntest(\"destroy more forcibly removes child views\", function() {\n  ok(!get(childView, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(Ember.$(\"#\" + get(childView, 'elementId')).length === 1, \"precond - child element was inserted\");\n\n  willDestroyCalled = 0;\n\n  Ember.run(function() {\n    view.destroy();\n  });\n\n  ok(Ember.$(\"#\" + get(childView, 'elementId')).length === 0, \"destroy removes child elements from the DOM\");\n  ok(Ember.View.views[get(childView, 'elementId')] === undefined, \"destroy removes a child views from the global views hash\");\n  equal(get(childView, 'isDestroyed'), true, \"child views are marked as destroyed\");\n  ok(!get(childView, 'element'), \"child views no longer have an element\");\n  equal(willDestroyCalled, 1, \"the willDestroyElement hook was called once on children\");\n});\n\ntest(\"destroy removes a child view from its parent\", function() {\n  ok(!get(childView, 'element'), \"precond - should not have an element\");\n\n  Ember.run(function() {\n    view.append();\n  });\n\n  ok(Ember.$(\"#\" + get(childView, 'elementId')).length === 1, \"precond - child element was inserted\");\n\n  Ember.run(function() {\n    childView.destroy();\n  });\n\n  ok(get(view, 'childViews.length') === 0, \"Destroyed child views should be removed from their parent\");\n});\n\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/append_to_test");