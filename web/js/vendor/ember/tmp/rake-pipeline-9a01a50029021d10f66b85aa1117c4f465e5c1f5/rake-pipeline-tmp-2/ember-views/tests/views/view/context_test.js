minispade.register('ember-views/~tests/views/view/context_test', "(function() {module(\"Ember.View - context property\");\n\nif (Ember.VIEW_PRESERVES_CONTEXT) {\n  test(\"setting a controller on a inner view should change it context\", function() {\n    var App = {};\n    var a = { name: 'a' };\n    var b = { name: 'b' };\n\n    var innerView = Ember.View.create();\n    var middleView = Ember.ContainerView.create();\n    var outerView = App.outerView = Ember.ContainerView.create({\n      controller: a\n    });\n\n    Ember.run(function() {\n      outerView.appendTo('#qunit-fixture');\n    });\n\n    Ember.run(function () {\n      outerView.set('currentView', middleView);\n    });\n\n    Ember.run(function () {\n      innerView.set('controller', b);\n      middleView.set('currentView', innerView);\n    });\n\n    // assert\n    equal(outerView.get('context'), a, 'outer context correct');\n    equal(middleView.get('context'), a, 'middle context correct');\n    equal(innerView.get('context'), b, 'inner context correct');\n  });\n} else {\n  test(\"context defaults to current view\", function() {\n    var innerView = Ember.View.create();\n    var middleView = Ember.ContainerView.create();\n    var outerView = Ember.ContainerView.create();\n\n    Ember.run(function() {\n      outerView.appendTo('#qunit-fixture');\n    });\n\n    Ember.run(function () {\n      outerView.set('currentView', middleView);\n    });\n\n    Ember.run(function () {\n      middleView.set('currentView', innerView);\n    });\n\n    // assert\n    equal(outerView.get('context'), outerView, 'outer context correct');\n    equal(middleView.get('context'), middleView, 'middle context correct');\n    equal(innerView.get('context'), innerView, 'inner context correct');\n  });\n}\n\n\n\n})();\n//@ sourceURL=ember-views/~tests/views/view/context_test");