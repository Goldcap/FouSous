minispade.register('ember-runtime/~tests/suites/mutable_array/unshiftObjects', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/~tests/suites/mutable_array');\n\nvar suite = Ember.MutableArrayTests;\n\nsuite.module('unshiftObjects');\n\nsuite.test(\"returns receiver\", function() {\n  var obj = this.newObject([]);\n  var items = this.newFixture(3);\n  equal(obj.unshiftObjects(items), obj, 'should return receiver');\n});\n\nsuite.test(\"[].unshiftObjects([A,B,C]) => [A,B,C] + notify\", function() {\n  var obj, before, items, observer;\n\n  before = [];\n  items = this.newFixture(3);\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.unshiftObjects(items);\n\n  deepEqual(this.toArray(obj), items, 'post item results');\n  equal(Ember.get(obj, 'length'), items.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n});\n\nsuite.test(\"[A,B,C].unshiftObjects([X,Y]) => [X,Y,A,B,C] + notify\", function() {\n  var obj, before, items, after, observer;\n\n  before = this.newFixture(3);\n  items  = this.newFixture(2);\n  after  = items.concat(before);\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.unshiftObjects(items);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\nsuite.test(\"[A,B,C].unshiftObjects([A,B]) => [A,B,A,B,C] + notify\", function() {\n  var obj, before, after, items, observer;\n\n  before = this.newFixture(3);\n  items = [before[0], before[1]]; // note same object as current head. should end up twice\n  after  = items.concat(before);\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.unshiftObjects(items);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/mutable_array/unshiftObjects");