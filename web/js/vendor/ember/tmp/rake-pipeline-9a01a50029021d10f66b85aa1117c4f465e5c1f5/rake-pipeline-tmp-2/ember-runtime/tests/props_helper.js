minispade.register('ember-runtime/~tests/props_helper', "(function() {// used by unit tests to test both accessor mode and non-accessor mode\ntestBoth = function(testname, callback) {\n\n  function emberget(x,y) { return Ember.get(x,y); }\n  function emberset(x,y,z) { return Ember.set(x,y,z); }\n  function aget(x,y) { return x[y]; }\n  function aset(x,y,z) { return (x[y] = z); }\n\n  test(testname+' using Ember.get()/Ember.set()', function() {\n    callback(emberget, emberset);\n  });\n\n  test(testname+' using accessors', function() {\n    if (Ember.USES_ACCESSORS) callback(aget, aset);\n    else ok('SKIPPING ACCESSORS');\n  });\n};\n\ntestWithDefault = function(testname, callback) {\n  function get(x,y) { return x.get(y); }\n  function emberget(x,y) { return Ember.get(x,y); }\n  function embergetwithdefault(x,y,z) { return Ember.getWithDefault(x,y,z); }\n  function getwithdefault(x,y,z) { return x.getWithDefault(y,z); }\n  function emberset(x,y,z) { return Ember.set(x,y,z); }\n  function aget(x,y) { return x[y]; }\n  function aset(x,y,z) { return (x[y] = z); }\n\n  test(testname+' using obj.get()', function() {\n    callback(emberget, emberset);\n  });\n\n  test(testname+' using obj.getWithDefault()', function() {\n    callback(getwithdefault, emberset);\n  });\n\n  test(testname+' using Ember.get()', function() {\n    callback(emberget, emberset);\n  });\n\n  test(testname+' using Ember.getWithDefault()', function() {\n    callback(embergetwithdefault, emberset);\n  });\n\n  test(testname+' using accessors', function() {\n    if (Ember.USES_ACCESSORS) callback(aget, aset);\n    else ok('SKIPPING ACCESSORS');\n  });\n};\n\n})();\n//@ sourceURL=ember-runtime/~tests/props_helper");