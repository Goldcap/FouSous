minispade.register('ember-runtime/~tests/suites/mutable_array/removeAt', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals raises */\nminispade.require('ember-runtime/~tests/suites/mutable_array');\n\nvar suite = Ember.MutableArrayTests;\n\nsuite.module('removeAt');\n\nsuite.test(\"[X].removeAt(0) => [] + notify\", function() {\n  var obj, before, after, observer;\n\n  before = this.newFixture(1);\n  after  = [];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.removeAt(0), obj, 'return self');\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n});\n\nsuite.test(\"[].removeAt(200) => OUT_OF_RANGE_EXCEPTION exception\", function() {\n  var obj = this.newObject([]);\n  raises(function() {\n    obj.removeAt(200);\n  }, Error);\n});\n\nsuite.test(\"[A,B].removeAt(0) => [B] + notify\", function() {\n  var obj, before, after, observer;\n\n  before = this.newFixture(2);\n  after  = [before[1]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.removeAt(0), obj, 'return self');\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\nsuite.test(\"[A,B].removeAt(1) => [A] + notify\", function() {\n  var obj, before, after, observer;\n\n  before = this.newFixture(2);\n  after  = [before[0]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.removeAt(1), obj, 'return self');\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n});\n\nsuite.test(\"[A,B,C].removeAt(1) => [A,C] + notify\", function() {\n  var obj, before, after, observer;\n\n  before = this.newFixture(3);\n  after  = [before[0], before[2]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.removeAt(1), obj, 'return self');\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject once');\n});\n\nsuite.test(\"[A,B,C,D].removeAt(1,2) => [A,D] + notify\", function() {\n  var obj, before, after, observer;\n\n  before = this.newFixture(4);\n  after  = [before[0], before[3]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.removeAt(1,2), obj, 'return self');\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject once');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/mutable_array/removeAt");