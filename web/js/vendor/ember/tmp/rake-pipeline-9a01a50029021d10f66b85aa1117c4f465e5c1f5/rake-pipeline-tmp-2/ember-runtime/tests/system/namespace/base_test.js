minispade.register('ember-runtime/~tests/system/namespace/base_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// ==========================================================================\n\nvar get = Ember.get;\n\nmodule('Ember.Namespace', {\n  teardown: function() {\n    if (window.NamespaceA) { Ember.run(function(){ window.NamespaceA.destroy(); }); }\n    if (window.NamespaceB) { Ember.run(function(){ window.NamespaceB.destroy(); }); }\n    if (window.namespaceC) {\n      try {\n        Ember.TESTING_DEPRECATION = true;\n        Ember.run(function(){\n          window.namespaceC.destroy();\n        });\n      } finally {\n        Ember.TESTING_DEPRECATION = false;\n      }\n    }\n  }\n});\n\ntest('Ember.Namespace should be a subclass of Ember.Object', function() {\n  ok(Ember.Object.detect(Ember.Namespace));\n});\n\ntest(\"Ember.Namespace should be duck typed\", function() {\n  ok(get(Ember.Namespace.create(), 'isNamespace'), \"isNamespace property is true\");\n});\n\ntest('Ember.Namespace is found and named', function() {\n  var nsA = window.NamespaceA = Ember.Namespace.create();\n  equal(nsA.toString(), \"NamespaceA\", \"namespaces should have a name if they are on window\");\n\n  var nsB = window.NamespaceB = Ember.Namespace.create();\n  equal(nsB.toString(), \"NamespaceB\", \"namespaces work if created after the first namespace processing pass\");\n});\n\ntest(\"Classes under an Ember.Namespace are properly named\", function() {\n  var nsA = window.NamespaceA = Ember.Namespace.create();\n  nsA.Foo = Ember.Object.extend();\n  equal(nsA.Foo.toString(), \"NamespaceA.Foo\", \"Classes pick up their parent namespace\");\n\n  nsA.Bar = Ember.Object.extend();\n  equal(nsA.Bar.toString(), \"NamespaceA.Bar\", \"New Classes get the naming treatment too\");\n\n  var nsB = window.NamespaceB = Ember.Namespace.create();\n  nsB.Foo = Ember.Object.extend();\n  equal(nsB.Foo.toString(), \"NamespaceB.Foo\", \"Classes in new namespaces get the naming treatment\");\n});\n\ntest(\"Classes under Ember are properly named\", function() {\n  equal(Ember.Array.toString(), \"Ember.Array\", \"precond - existing classes are processed\");\n\n  Ember.TestObject = Ember.Object.extend({});\n  equal(Ember.TestObject.toString(), \"Ember.TestObject\", \"class under Ember is given a string representation\");\n});\n\ntest(\"Lowercase namespaces should be deprecated\", function() {\n  window.namespaceC = Ember.Namespace.create();\n\n  var originalWarn = Ember.Logger.warn,\n      loggerWarning;\n\n  Ember.Logger.warn = function(msg) { loggerWarning = msg; };\n\n  try {\n    Ember.identifyNamespaces();\n  } finally {\n    Ember.Logger.warn = originalWarn;\n  }\n\n  // Ignore backtrace\n  equal(loggerWarning.split(\"\\n\")[0], \"DEPRECATION: Namespaces should not begin with lowercase.\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/namespace/base_test");