minispade.register('ember-runtime/~tests/system/object/computed_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/~tests/props_helper');\n\nmodule('Ember.Object computed property');\n\ntestWithDefault('computed property on instance', function(get, set) {\n\n  var MyClass = Ember.Object.extend({\n    foo: Ember.computed(function() { return 'FOO'; }).cacheable()\n  });\n\n  equal(get(new MyClass(), 'foo'), 'FOO');\n\n});\n\n\ntestWithDefault('computed property on subclass', function(get, set) {\n\n  var MyClass = Ember.Object.extend({\n    foo: Ember.computed(function() { return 'FOO'; }).cacheable()\n  });\n\n  var Subclass = MyClass.extend({\n    foo: Ember.computed(function() { return 'BAR'; }).cacheable()\n  });\n\n  equal(get(new Subclass(), 'foo'), 'BAR');\n\n});\n\n\ntestWithDefault('replacing computed property with regular val', function(get, set) {\n\n  var MyClass = Ember.Object.extend({\n    foo: Ember.computed(function() { return 'FOO'; }).cacheable()\n  });\n\n  var Subclass = MyClass.extend({\n    foo: 'BAR'\n  });\n\n  equal(get(new Subclass(), 'foo'), 'BAR');\n\n});\n\ntestWithDefault('complex depndent keys', function(get, set) {\n\n  var MyClass = Ember.Object.extend({\n\n    init: function() {\n      this._super();\n      set(this, 'bar', { baz: 'BIFF' });\n    },\n\n    count: 0,\n\n    foo: Ember.computed(function() {\n      set(this, 'count', get(this, 'count')+1);\n      return Ember.get(get(this, 'bar'), 'baz') + ' ' + get(this, 'count');\n    }).property('bar.baz').cacheable()\n\n  });\n\n  var Subclass = MyClass.extend({\n    count: 20\n  });\n\n  var obj1 = new MyClass(),\n      obj2 = new Subclass();\n\n  equal(get(obj1, 'foo'), 'BIFF 1');\n  equal(get(obj2, 'foo'), 'BIFF 21');\n\n  set(get(obj1, 'bar'), 'baz', 'BLARG');\n\n  equal(get(obj1, 'foo'), 'BLARG 2');\n  equal(get(obj2, 'foo'), 'BIFF 21');\n\n  set(get(obj2, 'bar'), 'baz', 'BOOM');\n\n  equal(get(obj1, 'foo'), 'BLARG 2');\n  equal(get(obj2, 'foo'), 'BOOM 22');\n});\n\ntestWithDefault('complex depndent keys changing complex dependent keys', function(get, set) {\n\n  var MyClass = Ember.Object.extend({\n\n    init: function() {\n      this._super();\n      set(this, 'bar', { baz: 'BIFF' });\n    },\n\n    count: 0,\n\n    foo: Ember.computed(function() {\n      set(this, 'count', get(this, 'count')+1);\n      return Ember.get(get(this, 'bar'), 'baz') + ' ' + get(this, 'count');\n    }).property('bar.baz').cacheable()\n\n  });\n\n  var Subclass = MyClass.extend({\n\n    init: function() {\n      this._super();\n      set(this, 'bar2', { baz: 'BIFF2' });\n    },\n\n    count: 0,\n\n    foo: Ember.computed(function() {\n      set(this, 'count', get(this, 'count')+1);\n      return Ember.get(get(this, 'bar2'), 'baz') + ' ' + get(this, 'count');\n    }).property('bar2.baz').cacheable()\n  });\n\n  var obj2 = new Subclass();\n\n  equal(get(obj2, 'foo'), 'BIFF2 1');\n\n  set(get(obj2, 'bar'), 'baz', 'BLARG');\n  equal(get(obj2, 'foo'), 'BIFF2 1', 'should not invalidate property');\n\n  set(get(obj2, 'bar2'), 'baz', 'BLARG');\n  equal(get(obj2, 'foo'), 'BLARG 2', 'should invalidate property');\n});\n\ntest(\"can retrieve metadata for a computed property\", function() {\n  var get = Ember.get;\n\n  var MyClass = Ember.Object.extend({\n    computedProperty: Ember.computed(function() {\n    }).property().meta({ key: 'keyValue' })\n  });\n\n  equal(get(MyClass.metaForProperty('computedProperty'), 'key'), 'keyValue', \"metadata saved on the computed property can be retrieved\");\n\n  var ClassWithNoMetadata = Ember.Object.extend({\n    computedProperty: Ember.computed(function() {\n    }).property().volatile(),\n\n    staticProperty: 12\n  });\n\n  equal(typeof ClassWithNoMetadata.metaForProperty('computedProperty'), \"object\", \"returns empty hash if no metadata has been saved\");\n\n  raises(function() {\n    ClassWithNoMetadata.metaForProperty('nonexistentProperty');\n  }, Error, \"throws an error if metadata for a non-existent property is requested\");\n\n  raises(function() {\n    ClassWithNoMetadata.metaForProperty('staticProperty');\n  }, Error, \"throws an error if metadata for a non-computed property is requested\");\n});\n\ntestBoth(\"can iterate over a list of computed properties for a class\", function(get, set) {\n  var MyClass = Ember.Object.extend({\n    foo: Ember.computed(function() {\n\n    }),\n\n    fooDidChange: Ember.observer(function() {\n\n    }, 'foo'),\n\n    bar: Ember.computed(function() {\n\n    })\n  });\n\n  var SubClass = MyClass.extend({\n    baz: Ember.computed(function() {\n\n    })\n  });\n\n  SubClass.reopen({\n    bat: Ember.computed(function() {\n\n    }).meta({ iAmBat: true })\n  });\n\n  var list = [];\n\n  MyClass.eachComputedProperty(function(name) {\n    list.push(name);\n  });\n\n  deepEqual(list.sort(), ['bar', 'foo'], \"watched and unwatched computed properties are iterated\");\n\n  list = [];\n\n  SubClass.eachComputedProperty(function(name, meta) {\n    list.push(name);\n\n    if (name === 'bat') {\n      deepEqual(meta, { iAmBat: true });\n    } else {\n      deepEqual(meta, {});\n    }\n  });\n\n  deepEqual(list.sort(), ['bar', 'bat', 'baz', 'foo'], \"all inherited properties are included\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/object/computed_test");