minispade.register('ember-runtime/~tests/suites/enumerable/filter', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/~tests/suites/enumerable');\n\nvar suite = Ember.EnumerableTests;\n\n// ..........................................................\n// filter()\n//\n\nsuite.module('filter');\n\nsuite.test('filter should invoke on each item', function() {\n  var obj = this.newObject(),\n      ary = this.toArray(obj),\n      cnt = ary.length - 2,\n      found = [], result;\n\n  // return true on all but the last two\n  result = obj.filter(function(i) { found.push(i); return --cnt>=0; });\n  deepEqual(found, ary, 'should have invoked on each item');\n  deepEqual(result, ary.slice(0,-2), 'filtered array should exclude items');\n});\n\n// ..........................................................\n// filterProperty()\n//\n\nsuite.module('filterProperty');\n\nsuite.test('should filter based on object', function() {\n  var obj, ary;\n\n  ary = [\n    { foo: 'foo', bar: 'BAZ' },\n    Ember.Object.create({ foo: 'foo', bar: 'bar' })\n  ];\n\n  obj = this.newObject(ary);\n\n  deepEqual(obj.filterProperty('foo', 'foo'), ary, 'filterProperty(foo)');\n  deepEqual(obj.filterProperty('bar', 'bar'), [ary[1]], 'filterProperty(bar)');\n});\n\nsuite.test('should include in result if property is true', function() {\n  var obj, ary;\n\n  ary = [\n    { foo: 'foo', bar: true },\n    Ember.Object.create({ foo: 'bar', bar: false })\n  ];\n\n  obj = this.newObject(ary);\n\n  // different values - all eval to true\n  deepEqual(obj.filterProperty('foo'), ary, 'filterProperty(foo)');\n  deepEqual(obj.filterProperty('bar'), [ary[0]], 'filterProperty(bar)');\n});\n\nsuite.test('should filter on second argument if provided', function() {\n  var obj, ary;\n\n  ary = [\n    { name: 'obj1', foo: 3},\n    Ember.Object.create({ name: 'obj2', foo: 2}),\n    { name: 'obj3', foo: 2},\n    Ember.Object.create({ name: 'obj4', foo: 3})\n  ];\n\n  obj = this.newObject(ary);\n\n  deepEqual(obj.filterProperty('foo', 3), [ary[0], ary[3]], \"filterProperty('foo', 3)')\");\n});\n\nsuite.test('should correctly filter null second argument', function() {\n  var obj, ary;\n\n  ary = [\n    { name: 'obj1', foo: 3},\n    Ember.Object.create({ name: 'obj2', foo: null}),\n    { name: 'obj3', foo: null},\n    Ember.Object.create({ name: 'obj4', foo: 3})\n  ];\n\n  obj = this.newObject(ary);\n\n  deepEqual(obj.filterProperty('foo', null), [ary[1], ary[2]], \"filterProperty('foo', 3)')\");\n});\n\nsuite.test('should not return all objects on undefined second argument', function() {\n  var obj, ary;\n\n  ary = [\n    { name: 'obj1', foo: 3},\n    Ember.Object.create({ name: 'obj2', foo: 2})\n  ];\n\n  obj = this.newObject(ary);\n\n  deepEqual(obj.filterProperty('foo', undefined), [], \"filterProperty('foo', 3)')\");\n});\n\nsuite.test('should correctly filter explicit undefined second argument', function() {\n  var obj, ary;\n\n  ary = [\n    { name: 'obj1', foo: 3},\n    Ember.Object.create({ name: 'obj2', foo: 3}),\n    { name: 'obj3', foo: undefined},\n    Ember.Object.create({ name: 'obj4', foo: undefined}),\n    { name: 'obj5'},\n    Ember.Object.create({ name: 'obj6'})\n  ];\n\n  obj = this.newObject(ary);\n\n  deepEqual(obj.filterProperty('foo', undefined), ary.slice(2), \"filterProperty('foo', 3)')\");\n});\n\nsuite.test('should not match undefined properties without second argument', function() {\n  var obj, ary;\n\n  ary = [\n    { name: 'obj1', foo: 3},\n    Ember.Object.create({ name: 'obj2', foo: 3}),\n    { name: 'obj3', foo: undefined},\n    Ember.Object.create({ name: 'obj4', foo: undefined}),\n    { name: 'obj5'},\n    Ember.Object.create({ name: 'obj6'})\n  ];\n\n  obj = this.newObject(ary);\n\n  deepEqual(obj.filterProperty('foo'), ary.slice(0, 2), \"filterProperty('foo', 3)')\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/enumerable/filter");