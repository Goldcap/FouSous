minispade.register('ember-runtime/~tests/mixins/observable_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nmodule('mixins/observable');\n\ntest('should be able to use getProperties to get a POJO of provided keys', function() {\n  var obj = Ember.Object.create({\n    firstName: \"Steve\",\n    lastName: \"Jobs\",\n    companyName: \"Apple, Inc.\"\n  });\n\n  var pojo = obj.getProperties(\"firstName\", \"lastName\");\n  equal(\"Steve\", pojo.firstName);\n  equal(\"Jobs\", pojo.lastName);\n});\n\ntest('should be able to use getProperties with array parameter to get a POJO of provided keys', function() {\n  var obj = Ember.Object.create({\n    firstName: \"Steve\",\n    lastName: \"Jobs\",\n    companyName: \"Apple, Inc.\"\n  });\n\n  var pojo = obj.getProperties([\"firstName\", \"lastName\"]);\n  equal(\"Steve\", pojo.firstName);\n  equal(\"Jobs\", pojo.lastName);\n});\n\ntest('should be able to use setProperties to set multiple properties at once', function() {\n  var obj = Ember.Object.create({\n    firstName: \"Steve\",\n    lastName: \"Jobs\",\n    companyName: \"Apple, Inc.\"\n  });\n\n  obj.setProperties({firstName: \"Tim\", lastName: \"Cook\"});\n  equal(\"Tim\", obj.get(\"firstName\"));\n  equal(\"Cook\", obj.get(\"lastName\"));\n});\n\ntestBoth('calling setProperties completes safely despite exceptions', function(get,set) {\n  var exc = new Error(\"Something unexpected happened!\");\n  var obj = Ember.Object.create({\n    firstName: \"Steve\",\n    lastName: \"Jobs\",\n    companyName: Ember.computed(function(key, value) {\n      if (value !== undefined) {\n        throw exc;\n      }\n      return \"Apple, Inc.\";\n    })\n  });\n\n  var firstNameChangedCount = 0;\n\n  Ember.addObserver(obj, 'firstName', function() { firstNameChangedCount++; });\n\n  try {\n    obj.setProperties({\n      firstName: 'Tim',\n      lastName: 'Cook',\n      companyName: 'Fruit Co., Inc.'\n    });\n  } catch(err) {\n    if (err !== exc) {\n      throw err;\n    }\n  }\n\n  equal(firstNameChangedCount, 1, 'firstName should have fired once');\n});\n\ntestBoth(\"should be able to retrieve cached values of computed properties without invoking the computed property\", function(get) {\n  var obj = Ember.Object.create({\n    foo: Ember.computed(function() {\n      return \"foo\";\n    }).cacheable(),\n\n    bar: \"bar\"\n  });\n\n  equal(obj.cacheFor('foo'), undefined, \"should return undefined if no value has been cached\");\n  get(obj, 'foo');\n\n  equal(get(obj, 'foo'), \"foo\", \"precond - should cache the value\");\n  equal(obj.cacheFor('foo'), \"foo\", \"should return the cached value after it is invoked\");\n\n  equal(obj.cacheFor('bar'), undefined, \"returns undefined if the value is not a computed property\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/mixins/observable_test");