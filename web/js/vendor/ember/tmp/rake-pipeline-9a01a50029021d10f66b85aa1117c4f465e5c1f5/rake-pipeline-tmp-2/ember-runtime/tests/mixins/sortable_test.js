minispade.register('ember-runtime/~tests/mixins/sortable_test', "(function() {var get = Ember.get, set = Ember.set;\n\nvar array = [{ id: 1, name: \"Scumbag Dale\" }, { id: 2, name: \"Scumbag Katz\" }, { id: 3, name: \"Scumbag Bryn\" }];\n\nvar unsortedArray, sortedArrayController;\n\nmodule(\"Ember.Sortable\");\n\nmodule(\"Ember.Sortable with content\", {\n  setup: function() {\n    Ember.run(function() {\n      unsortedArray = Ember.A(Ember.A(array).copy());\n\n      sortedArrayController = Ember.ArrayProxy.create(Ember.SortableMixin, {\n        content: unsortedArray\n      });\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      sortedArrayController.set('content', null);\n      sortedArrayController.destroy();\n    });\n  }\n});\n\ntest(\"if you do not specify `sortProperties` sortable have no effect\", function() {\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Dale', 'array is in it natural order');\n\n  unsortedArray.pushObject({id: 4, name: 'Scumbag Chavard'});\n\n  equal(sortedArrayController.get('length'), 4, 'array has 4 items');\n  equal(sortedArrayController.objectAt(3).name, 'Scumbag Chavard', 'a new object was inserted in the natural order');\n});\n\ntest(\"you can change sorted properties\", function() {\n  sortedArrayController.set('sortProperties', ['id']);\n\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Dale', 'array is sorted by id');\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n\n  sortedArrayController.set('sortAscending', false);\n\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Bryn', 'array is sorted by id in DESC order');\n  equal(sortedArrayController.objectAt(2).name, 'Scumbag Dale', 'array is sorted by id in DESC order');\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n\n  sortedArrayController.set('sortProperties', ['name']);\n\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Katz', 'array is sorted by name in DESC order');\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n});\n\ntest(\"changing sort order triggers observers\", function() {\n  var observer, changeCount = 0;\n  observer = Ember.Object.create({\n    array: sortedArrayController,\n    arrangedDidChange: Ember.observer(function() {\n      changeCount++;\n    }, 'array.[]')\n  });\n\n  equal(changeCount, 0, 'precond - changeCount starts at 0');\n\n  sortedArrayController.set('sortProperties', ['id']);\n\n  equal(changeCount, 1, 'setting sortProperties increments changeCount');\n\n  sortedArrayController.set('sortAscending', false);\n\n  equal(changeCount, 2, 'changing sortAscending increments changeCount');\n\n  sortedArrayController.set('sortAscending', true);\n\n  equal(changeCount, 3, 'changing sortAscending again increments changeCount');\n\n  Ember.run(function() { observer.destroy(); });\n});\n\nmodule(\"Ember.Sortable with content and sortProperties\", {\n  setup: function() {\n    Ember.run(function() {\n      unsortedArray = Ember.A(Ember.A(array).copy());\n\n      sortedArrayController = Ember.ArrayController.create({\n        content: unsortedArray,\n        sortProperties: ['name']\n      });\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      sortedArrayController.destroy();\n    });\n  }\n});\n\ntest(\"sortable object will expose associated content in the right order\", function() {\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Bryn', 'array is sorted by name');\n});\n\ntest(\"you can add objects in sorted order\", function() {\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n\n  unsortedArray.pushObject({id: 4, name: 'Scumbag Chavard'});\n\n  equal(sortedArrayController.get('length'), 4, 'array has 4 items');\n  equal(sortedArrayController.objectAt(1).name, 'Scumbag Chavard', 'a new object added to content was inserted according to given constraint');\n\n  sortedArrayController.addObject({id: 5, name: 'Scumbag Fucs'});\n\n  equal(sortedArrayController.get('length'), 5, 'array has 5 items');\n  equal(sortedArrayController.objectAt(3).name, 'Scumbag Fucs', 'a new object added to controller was inserted according to given constraint');\n});\n\ntest(\"you can unshift objects in sorted order\", function() {\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n\n  unsortedArray.unshiftObject({id: 4, name: 'Scumbag Chavard'});\n\n  equal(sortedArrayController.get('length'), 4, 'array has 4 items');\n  equal(sortedArrayController.objectAt(1).name, 'Scumbag Chavard', 'a new object added to content was inserted according to given constraint');\n\n  sortedArrayController.addObject({id: 5, name: 'Scumbag Fucs'});\n\n  equal(sortedArrayController.get('length'), 5, 'array has 5 items');\n  equal(sortedArrayController.objectAt(3).name, 'Scumbag Fucs', 'a new object added to controller was inserted according to given constraint');\n});\n\ntest(\"you can change a sort property and the content will rearrenge\", function() {\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Bryn', 'bryn is first');\n\n  set(sortedArrayController.objectAt(0), 'name', 'Scumbag Fucs');\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Dale', 'dale is first now');\n  equal(sortedArrayController.objectAt(1).name, 'Scumbag Fucs', 'foucs is second');\n});\n\nmodule(\"Ember.Sortable with sortProperties\", {\n  setup: function() {\n    Ember.run(function() {\n      sortedArrayController = Ember.ArrayController.create({\n        sortProperties: ['name']\n      });\n      var array = [{ id: 1, name: \"Scumbag Dale\" }, { id: 2, name: \"Scumbag Katz\" }, { id: 3, name: \"Scumbag Bryn\" }];\n      unsortedArray = Ember.A(Ember.A(array).copy());\n    });\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      sortedArrayController.destroy();\n    });\n  }\n});\n\ntest(\"you can set content later and it will be sorted\", function() {\n  equal(sortedArrayController.get('length'), 0, 'array has 0 items');\n\n  Ember.run(function() {\n    sortedArrayController.set('content', unsortedArray);\n  });\n\n  equal(sortedArrayController.get('length'), 3, 'array has 3 items');\n  equal(sortedArrayController.objectAt(0).name, 'Scumbag Bryn', 'array is sorted by name');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/mixins/sortable_test");