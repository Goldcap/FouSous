minispade.register('ember-runtime/~tests/suites/mutable_array/unshiftObject', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/~tests/suites/mutable_array');\n\nvar suite = Ember.MutableArrayTests;\n\nsuite.module('unshiftObject');\n\nsuite.test(\"returns unshifted object\", function() {\n  var obj = this.newObject([]);\n  var item = this.newFixture(1)[0];\n  equal(obj.unshiftObject(item), item, 'should return unshifted object');\n});\n\n\nsuite.test(\"[].unshiftObject(X) => [X] + notify\", function() {\n  var obj, before, after, item, observer;\n\n  before = [];\n  item = this.newFixture(1)[0];\n  after  = [item];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.unshiftObject(item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n});\n\nsuite.test(\"[A,B,C].unshiftObject(X) => [X,A,B,C] + notify\", function() {\n  var obj, before, after, item, observer;\n\n  before = this.newFixture(3);\n  item = this.newFixture(1)[0];\n  after  = [item, before[0], before[1], before[2]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.unshiftObject(item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\nsuite.test(\"[A,B,C].unshiftObject(A) => [A,A,B,C] + notify\", function() {\n  var obj, before, after, item, observer;\n\n  before = this.newFixture(3);\n  item = before[0]; // note same object as current head. should end up twice\n  after  = [item, before[0], before[1], before[2]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.unshiftObject(item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/mutable_array/unshiftObject");