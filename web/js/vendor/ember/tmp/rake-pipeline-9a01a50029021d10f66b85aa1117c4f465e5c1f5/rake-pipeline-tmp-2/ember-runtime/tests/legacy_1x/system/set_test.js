minispade.register('ember-runtime/~tests/legacy_1x/system/set_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: ©2006-2011 Strobe Inc. and contributors.\n//            ©2008-2011 Apple Inc. All rights reserved.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\n// NOTE: This test is adapted from the 1.x series of unit tests.  The tests\n// are the same except for places where we intend to break the API we instead\n// validate that we warn the developer appropriately.\n//\n//  * Changed Ember.Set.clone() call to Ember.Set.copy()\n\n// ========================================================================\n// Ember.Set Tests\n// ========================================================================\n\nvar a, b, c ; // global variables\n\nmodule(\"creating Ember.Set instances\", {\n\n  setup: function() {\n    // create objects...\n    a = { name: \"a\" } ;\n    b = { name: \"b\" } ;\n    c = { name: \"c\" } ;\n  },\n\n  teardown: function() {\n    a = undefined ;\n    b = undefined ;\n    c = undefined ;\n  }\n\n});\n\ntest(\"new Ember.Set() should create empty set\", function() {\n  var set = new Ember.Set() ;\n  equal(set.length, 0) ;\n});\n\ntest(\"new Ember.Set([1,2,3]) should create set with three items in them\", function() {\n  var set = new Ember.Set(Ember.A([a,b,c])) ;\n  equal(set.length, 3) ;\n  equal(set.contains(a), true) ;\n  equal(set.contains(b), true) ;\n  equal(set.contains(c), true) ;\n});\n\ntest(\"new Ember.Set() should accept anything that implements Ember.Array\", function() {\n  var arrayLikeObject = Ember.Object.create(Ember.Array, {\n    _content: [a,b,c],\n    length: 3,\n    objectAt: function(idx) { return this._content[idx]; }\n  }) ;\n\n  var set = new Ember.Set(arrayLikeObject) ;\n  equal(set.length, 3) ;\n  equal(set.contains(a), true) ;\n  equal(set.contains(b), true) ;\n  equal(set.contains(c), true) ;\n});\n\nvar set ; // global variables\n\n// The tests below also end up testing the contains() method pretty\n// exhaustively.\nmodule(\"Ember.Set.add + Ember.Set.contains\", {\n\n  setup: function() {\n    set = new Ember.Set() ;\n  },\n\n  teardown: function() {\n    set = undefined ;\n  }\n\n});\n\ntest(\"should add an Ember.Object\", function() {\n  var obj = Ember.Object.create() ;\n\n  var oldLength = set.length ;\n  set.add(obj) ;\n  equal(set.contains(obj), true, \"contains()\") ;\n  equal(set.length, oldLength+1, \"new set length\") ;\n});\n\ntest(\"should add a regular hash\", function() {\n  var obj = {} ;\n\n  var oldLength = set.length ;\n  set.add(obj) ;\n  equal(set.contains(obj), true, \"contains()\") ;\n  equal(set.length, oldLength+1, \"new set length\") ;\n});\n\ntest(\"should add a string\", function() {\n  var obj = \"String!\" ;\n\n  var oldLength = set.length ;\n  set.add(obj) ;\n  equal(set.contains(obj), true, \"contains()\") ;\n  equal(set.length, oldLength+1, \"new set length\") ;\n});\n\ntest(\"should add a number\", function() {\n  var obj = 23 ;\n\n  var oldLength = set.length ;\n  set.add(obj) ;\n  equal(set.contains(obj), true, \"contains()\") ;\n  equal(set.length, oldLength+1, \"new set length\") ;\n});\n\ntest(\"should add bools\", function() {\n  var oldLength = set.length ;\n\n  set.add(true) ;\n  equal(set.contains(true), true, \"contains(true)\");\n  equal(set.length, oldLength+1, \"new set length\");\n\n  set.add(false);\n  equal(set.contains(false), true, \"contains(false)\");\n  equal(set.length, oldLength+2, \"new set length\");\n});\n\ntest(\"should add 0\", function() {\n  var oldLength = set.length ;\n\n  set.add(0) ;\n  equal(set.contains(0), true, \"contains(0)\");\n  equal(set.length, oldLength+1, \"new set length\");\n});\n\ntest(\"should add a function\", function() {\n  var obj = function() { return \"Test function\"; } ;\n\n  var oldLength = set.length ;\n  set.add(obj) ;\n  equal(set.contains(obj), true, \"contains()\") ;\n  equal(set.length, oldLength+1, \"new set length\") ;\n});\n\ntest(\"should NOT add a null\", function() {\n  set.add(null) ;\n  equal(set.length, 0) ;\n  equal(set.contains(null), false) ;\n});\n\ntest(\"should NOT add an undefined\", function() {\n  set.add(undefined) ;\n  equal(set.length, 0) ;\n  equal(set.contains(undefined), false) ;\n});\n\ntest(\"adding an item, removing it, adding another item\", function() {\n  var item1 = \"item1\" ;\n  var item2 = \"item2\" ;\n\n  set.add(item1) ; // add to set\n  set.remove(item1) ; //remove from set\n  set.add(item2) ;\n\n  equal(set.contains(item1), false, \"set.contains(item1)\") ;\n\n  set.add(item1) ; // re-add to set\n  equal(set.length, 2, \"set.length\") ;\n});\n\nmodule(\"Ember.Set.remove + Ember.Set.contains\", {\n\n  // generate a set with every type of object, but none of the specific\n  // ones we add in the tests below...\n  setup: function() {\n    set = new Ember.Set(Ember.A([\n      Ember.Object.create({ dummy: true }),\n      { isHash: true },\n      \"Not the String\",\n      16, true, false, 0])) ;\n  },\n\n  teardown: function() {\n    set = undefined ;\n  }\n\n});\n\ntest(\"should remove an Ember.Object and reduce length\", function() {\n  var obj = Ember.Object.create() ;\n  set.add(obj) ;\n  equal(set.contains(obj), true) ;\n  var oldLength = set.length ;\n\n  set.remove(obj) ;\n  equal(set.contains(obj), false, \"should be removed\") ;\n  equal(set.length, oldLength-1, \"should be 1 shorter\") ;\n});\n\ntest(\"should remove a regular hash and reduce length\", function() {\n  var obj = {} ;\n  set.add(obj) ;\n  equal(set.contains(obj), true) ;\n  var oldLength = set.length ;\n\n  set.remove(obj) ;\n  equal(set.contains(obj), false, \"should be removed\") ;\n  equal(set.length, oldLength-1, \"should be 1 shorter\") ;\n});\n\ntest(\"should remove a string and reduce length\", function() {\n  var obj = \"String!\" ;\n  set.add(obj) ;\n  equal(set.contains(obj), true) ;\n  var oldLength = set.length ;\n\n  set.remove(obj) ;\n  equal(set.contains(obj), false, \"should be removed\") ;\n  equal(set.length, oldLength-1, \"should be 1 shorter\") ;\n});\n\ntest(\"should remove a number and reduce length\", function() {\n  var obj = 23 ;\n  set.add(obj) ;\n  equal(set.contains(obj), true) ;\n  var oldLength = set.length ;\n\n  set.remove(obj) ;\n  equal(set.contains(obj), false, \"should be removed\") ;\n  equal(set.length, oldLength-1, \"should be 1 shorter\") ;\n});\n\ntest(\"should remove a bools and reduce length\", function() {\n  var oldLength = set.length ;\n  set.remove(true) ;\n  equal(set.contains(true), false, \"should be removed\") ;\n  equal(set.length, oldLength-1, \"should be 1 shorter\") ;\n\n  set.remove(false);\n  equal(set.contains(false), false, \"should be removed\") ;\n  equal(set.length, oldLength-2, \"should be 2 shorter\") ;\n});\n\ntest(\"should remove 0 and reduce length\", function(){\n  var oldLength = set.length;\n  set.remove(0) ;\n  equal(set.contains(0), false, \"should be removed\") ;\n  equal(set.length, oldLength-1, \"should be 1 shorter\") ;\n});\n\ntest(\"should remove a function and reduce length\", function() {\n  var obj = function() { return \"Test function\"; } ;\n  set.add(obj) ;\n  equal(set.contains(obj), true) ;\n  var oldLength = set.length ;\n\n  set.remove(obj) ;\n  equal(set.contains(obj), false, \"should be removed\") ;\n  equal(set.length, oldLength-1, \"should be 1 shorter\") ;\n});\n\ntest(\"should NOT remove a null\", function() {\n  var oldLength = set.length ;\n  set.remove(null) ;\n  equal(set.length, oldLength) ;\n});\n\ntest(\"should NOT remove an undefined\", function() {\n  var oldLength = set.length ;\n  set.remove(undefined) ;\n  equal(set.length, oldLength) ;\n});\n\ntest(\"should ignore removing an object not in the set\", function() {\n  var obj = Ember.Object.create() ;\n  var oldLength = set.length ;\n  set.remove(obj) ;\n  equal(set.length, oldLength) ;\n});\n\nmodule(\"Ember.Set.pop + Ember.Set.copy\", {\n// generate a set with every type of object, but none of the specific\n// ones we add in the tests below...\n  setup: function() {\n    set = new Ember.Set(Ember.A([\n      Ember.Object.create({ dummy: true }),\n      { isHash: true },\n      \"Not the String\",\n      16, false])) ;\n    },\n\n    teardown: function() {\n      set = undefined ;\n    }\n});\n\ntest(\"the pop() should remove an arbitrary object from the set\", function() {\n  var oldLength = set.length ;\n  var obj = set.pop();\n  ok(!Ember.none(obj), 'pops up an item');\n  equal(set.length, oldLength-1, 'length shorter by 1');\n});\n\ntest(\"should pop false and 0\", function(){\n  set = new Ember.Set(Ember.A([false]));\n  ok(set.pop() === false, \"should pop false\");\n\n  set = new Ember.Set(Ember.A([0]));\n  ok(set.pop() === 0, \"should pop 0\");\n});\n\ntest(\"the copy() should return an indentical set\", function() {\n  var oldLength = set.length ;\n  var obj = set.copy();\n  equal(oldLength,obj.length,'length of the clone should be same');\n  equal(obj.contains(set[0]), true);\n  equal(obj.contains(set[1]), true);\n  equal(obj.contains(set[2]), true);\n  equal(obj.contains(set[3]), true);\n  equal(obj.contains(set[4]), true);\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/legacy_1x/system/set_test");