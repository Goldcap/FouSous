minispade.register('ember-runtime/~tests/suites/mutable_array/insertAt', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals raises */\nminispade.require('ember-runtime/~tests/suites/mutable_array');\n\nvar suite = Ember.MutableArrayTests;\n\nsuite.module('insertAt');\n\nsuite.test(\"[].insertAt(0, X) => [X] + notify\", function() {\n  var obj, after, observer;\n\n  after = this.newFixture(1);\n  obj = this.newObject([]);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.insertAt(0, after[0]);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n\n  equal(observer.timesCalledBefore('[]'), 1, 'should have notified [] will change once');\n  equal(observer.timesCalledBefore('@each'), 1, 'should have notified @each will change once');\n  equal(observer.timesCalledBefore('length'), 1, 'should have notified length will change once');\n  equal(observer.timesCalledBefore('firstObject'), 1, 'should have notified firstObject will change once');\n  equal(observer.timesCalledBefore('lastObject'), 1, 'should have notified lastObject will change once');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] did change once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each did change once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length did change once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject did change once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject did change once');\n});\n\nsuite.test(\"[].insertAt(200,X) => OUT_OF_RANGE_EXCEPTION exception\", function() {\n  var obj = this.newObject([]), that = this;\n  raises(function() {\n    obj.insertAt(200, that.newFixture(1)[0]);\n  }, Error);\n});\n\nsuite.test(\"[A].insertAt(0, X) => [X,A] + notify\", function() {\n  var obj, item, after, before, observer;\n\n  item = this.newFixture(1)[0];\n  before = this.newFixture(1);\n  after  = [item, before[0]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.insertAt(0, item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalledBefore('[]'), 1, 'should have notified [] will change once');\n  equal(observer.timesCalledBefore('@each'), 1, 'should have notified @each will change once');\n  equal(observer.timesCalledBefore('length'), 1, 'should have notified length will change once');\n  equal(observer.timesCalledBefore('firstObject'), 1, 'should have notified firstObject will change once');\n  equal(observer.timesCalledBefore('lastObject'), 0, 'should NOT have notified lastObject will change once');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\nsuite.test(\"[A].insertAt(1, X) => [A,X] + notify\", function() {\n  var obj, item, after, before, observer;\n\n  item = this.newFixture(1)[0];\n  before = this.newFixture(1);\n  after  = [before[0], item];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.insertAt(1, item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalledBefore('[]'), 1, 'should have notified [] will change once');\n  equal(observer.timesCalledBefore('@each'), 1, 'should have notified @each will change once');\n  equal(observer.timesCalledBefore('length'), 1, 'should have notified length will change once');\n  equal(observer.timesCalledBefore('firstObject'), 0, 'should NOT have notified firstObject will change once');\n  equal(observer.timesCalledBefore('lastObject'), 1, 'should have notified lastObject will change once');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject');\n});\n\nsuite.test(\"[A].insertAt(200,X) => OUT_OF_RANGE exception\", function() {\n  var obj = this.newObject(this.newFixture(1)), that = this;\n  raises(function() {\n    obj.insertAt(200, that.newFixture(1)[0]);\n  }, Error);\n});\n\nsuite.test(\"[A,B,C].insertAt(0,X) => [X,A,B,C] + notify\", function() {\n  var obj, item, after, before, observer;\n\n  item = this.newFixture(1)[0];\n  before = this.newFixture(3);\n  after  = [item, before[0], before[1], before[2]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.insertAt(0, item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalledBefore('[]'), 1, 'should have notified [] will change once');\n  equal(observer.timesCalledBefore('@each'), 1, 'should have notified @each will change once');\n  equal(observer.timesCalledBefore('length'), 1, 'should have notified length will change once');\n  equal(observer.timesCalledBefore('firstObject'), 1, 'should have notified firstObject will change once');\n  equal(observer.timesCalledBefore('lastObject'), 0, 'should NOT have notified lastObject will change once');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\nsuite.test(\"[A,B,C].insertAt(1,X) => [A,X,B,C] + notify\", function() {\n  var obj, item, after, before, observer;\n\n  item = this.newFixture(1)[0];\n  before = this.newFixture(3);\n  after  = [before[0], item, before[1], before[2]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.insertAt(1, item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalledBefore('[]'), 1, 'should have notified [] will change once');\n  equal(observer.timesCalledBefore('@each'), 1, 'should have notified @each will change once');\n  equal(observer.timesCalledBefore('length'), 1, 'should have notified length will change once');\n  equal(observer.timesCalledBefore('firstObject'), 0, 'should NOT have notified firstObject will change once');\n  equal(observer.timesCalledBefore('lastObject'), 0, 'should NOT have notified lastObject will change once');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject');\n});\n\nsuite.test(\"[A,B,C].insertAt(3,X) => [A,B,C,X] + notify\", function() {\n  var obj, item, after, before, observer;\n\n  item = this.newFixture(1)[0];\n  before = this.newFixture(3);\n  after  = [before[0], before[1], before[2], item];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.insertAt(3, item);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalledBefore('[]'), 1, 'should have notified [] will change once');\n  equal(observer.timesCalledBefore('@each'), 1, 'should have notified @each will change once');\n  equal(observer.timesCalledBefore('length'), 1, 'should have notified length will change once');\n  equal(observer.timesCalledBefore('firstObject'), 0, 'should NOT have notified firstObject will change once');\n  equal(observer.timesCalledBefore('lastObject'), 1, 'should have notified lastObject will change once');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/mutable_array/insertAt");