minispade.register('ember-runtime/~tests/system/object_proxy_test', "(function() {module(\"Ember.ObjectProxy\");\n\ntestBoth(\"should proxy properties to content\", function(get, set) {\n  var content = {\n        firstName: 'Tom',\n        lastName: 'Dale',\n        unknownProperty: function (key) { return key + ' unknown';}\n      },\n      proxy = Ember.ObjectProxy.create();\n\n  equal(get(proxy, 'firstName'), undefined, 'get on proxy without content should return undefined');\n  raises(function () {\n    set(proxy, 'firstName', 'Foo');\n  }, 'set on proxy without content should raise');\n\n  set(proxy, 'content', content);\n\n  equal(get(proxy, 'firstName'), 'Tom', 'get on proxy with content should forward to content');\n  equal(get(proxy, 'lastName'), 'Dale', 'get on proxy with content should forward to content');\n  equal(get(proxy, 'foo'), 'foo unknown', 'get on proxy with content should forward to content');\n\n  set(proxy, 'lastName', 'Huda');\n\n  equal(get(content, 'lastName'), 'Huda', 'content should have new value from set on proxy');\n  equal(get(proxy, 'lastName'), 'Huda', 'proxy should have new value from set on proxy');\n\n  set(proxy, 'content', {firstName: 'Yehuda', lastName: 'Katz'});\n\n  equal(get(proxy, 'firstName'), 'Yehuda', 'proxy should reflect updated content');\n  equal(get(proxy, 'lastName'), 'Katz', 'proxy should reflect updated content');\n});\n\ntestBoth(\"should work with watched properties\", function(get, set) {\n  var content1 = {firstName: 'Tom', lastName: 'Dale'},\n    content2 = {firstName: 'Yehuda', lastName: 'Katz'},\n    Proxy,\n    proxy,\n    count = 0,\n    last;\n\n  Proxy = Ember.ObjectProxy.extend({\n    fullName: Ember.computed(function () {\n      var firstName = this.get('firstName'),\n          lastName = this.get('lastName');\n      if (firstName && lastName) {\n        return firstName + ' ' + lastName;\n      }\n      return firstName || lastName;\n    }).property('firstName', 'lastName')\n  });\n\n  proxy = Proxy.create();\n\n  Ember.addObserver(proxy, 'fullName', function () {\n    last = get(proxy, 'fullName');\n    count++;\n  });\n\n  // proxy without content returns undefined\n  equal(get(proxy, 'fullName'), undefined);\n\n  // setting content causes all watched properties to change\n  set(proxy, 'content', content1);\n  // both dependent keys changed\n  equal(count, 2);\n  equal(last, 'Tom Dale');\n\n  // setting property in content causes proxy property to change\n  set(content1, 'lastName', 'Huda');\n  equal(count, 3);\n  equal(last, 'Tom Huda');\n\n  // replacing content causes all watched properties to change\n  set(proxy, 'content', content2);\n  // both dependent keys changed\n  equal(count, 5);\n  equal(last, 'Yehuda Katz');\n  // content1 is no longer watched\n  ok(!Ember.isWatching(content1, 'firstName'), 'not watching firstName');\n  ok(!Ember.isWatching(content1, 'lastName'), 'not watching lastName');\n\n  // setting property in new content\n  set(content2, 'firstName', 'Tomhuda');\n  equal(last, 'Tomhuda Katz');\n  equal(count, 6);\n\n  // setting property in proxy syncs with new content\n  set(proxy, 'lastName', 'Katzdale');\n  equal(count, 7);\n  equal(last, 'Tomhuda Katzdale');\n  equal(get(content2, 'firstName'), 'Tomhuda');\n  equal(get(content2, 'lastName'), 'Katzdale');\n});\n\ntest(\"set and get should work with paths\", function () {\n  var content = {foo: {bar: 'baz'}},\n      proxy = Ember.ObjectProxy.create({content: content}),\n      count = 0;\n  proxy.set('foo.bar', 'hello');\n  equal(proxy.get('foo.bar'), 'hello');\n  equal(proxy.get('content.foo.bar'), 'hello');\n\n  proxy.addObserver('foo.bar', function () {\n    count++;\n  });\n\n  proxy.set('foo.bar', 'bye');\n\n  equal(count, 1);\n  equal(proxy.get('foo.bar'), 'bye');\n  equal(proxy.get('content.foo.bar'), 'bye');\n});\n\ntestBoth(\"should transition between watched and unwatched strategies\", function(get, set) {\n  var content = {foo: 'foo'},\n      proxy = Ember.ObjectProxy.create({content: content}),\n      count = 0;\n\n  function observer() {\n    count++;\n  }\n\n  equal(get(proxy, 'foo'), 'foo');\n\n  set(content, 'foo', 'bar');\n\n  equal(get(proxy, 'foo'), 'bar');\n\n  set(proxy, 'foo', 'foo');\n\n  equal(get(content, 'foo'), 'foo');\n  equal(get(proxy, 'foo'), 'foo');\n\n  Ember.addObserver(proxy, 'foo', observer);\n\n  equal(count, 0);\n  equal(get(proxy, 'foo'), 'foo');\n\n  set(content, 'foo', 'bar');\n\n  equal(count, 1);\n  equal(get(proxy, 'foo'), 'bar');\n\n  set(proxy, 'foo', 'foo');\n\n  equal(count, 2);\n  equal(get(content, 'foo'), 'foo');\n  equal(get(proxy, 'foo'), 'foo');\n\n  Ember.removeObserver(proxy, 'foo', observer);\n\n  set(content, 'foo', 'bar');\n\n  equal(get(proxy, 'foo'), 'bar');\n\n  set(proxy, 'foo', 'foo');\n\n  equal(get(content, 'foo'), 'foo');\n  equal(get(proxy, 'foo'), 'foo');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/object_proxy_test");