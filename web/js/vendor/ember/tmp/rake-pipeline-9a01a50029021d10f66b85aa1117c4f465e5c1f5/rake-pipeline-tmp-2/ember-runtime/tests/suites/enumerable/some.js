minispade.register('ember-runtime/~tests/suites/enumerable/some', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/~tests/suites/enumerable');\n\nvar suite = Ember.EnumerableTests;\n\n// ..........................................................\n// some()\n//\n\nsuite.module('some');\n\nsuite.test('some should should invoke callback on each item as long as you return false', function() {\n  var obj = this.newObject(),\n      ary = this.toArray(obj),\n      found = [], result;\n\n  result = obj.some(function(i) { found.push(i); return false; });\n  equal(result, false, 'return value of obj.some');\n  deepEqual(found, ary, 'items passed during some() should match');\n});\n\nsuite.test('every should stop invoking when you return true', function() {\n  var obj = this.newObject(),\n      ary = this.toArray(obj),\n      cnt = ary.length - 2,\n      exp = cnt,\n      found = [], result;\n\n  result = obj.some(function(i) { found.push(i); return --cnt <= 0; });\n  equal(result, true, 'return value of obj.some');\n  equal(found.length, exp, 'should invoke proper number of times');\n  deepEqual(found, ary.slice(0,-2), 'items passed during some() should match');\n});\n\n// ..........................................................\n// someProperty()\n//\n\nsuite.module('someProperty');\n\nsuite.test('should return true of any property matches', function() {\n  var obj = this.newObject([\n    { foo: 'foo', bar: 'BAZ' },\n    Ember.Object.create({ foo: 'foo', bar: 'bar' })\n  ]);\n\n  equal(obj.someProperty('foo', 'foo'), true, 'someProperty(foo)');\n  equal(obj.someProperty('bar', 'bar'), true, 'someProperty(bar)');\n  equal(obj.someProperty('bar', 'BIFF'), false, 'someProperty(BIFF)');\n});\n\nsuite.test('should return true of any property is true', function() {\n  var obj = this.newObject([\n    { foo: 'foo', bar: true },\n    Ember.Object.create({ foo: 'bar', bar: false })\n  ]);\n\n  // different values - all eval to true\n  equal(obj.someProperty('foo'), true, 'someProperty(foo)');\n  equal(obj.someProperty('bar'), true, 'someProperty(bar)');\n  equal(obj.someProperty('BIFF'), false, 'someProperty(biff)');\n});\n\nsuite.test('should return true if any property matches null', function() {\n  var obj = this.newObject([\n    { foo: null, bar: 'bar' },\n    Ember.Object.create({ foo: 'foo', bar: null })\n  ]);\n\n  equal(obj.someProperty('foo', null), true, \"someProperty('foo', null)\");\n  equal(obj.someProperty('bar', null), true, \"someProperty('bar', null)\");\n});\n\nsuite.test('should return true if any property is undefined', function() {\n  var obj = this.newObject([\n    { foo: undefined, bar: 'bar' },\n    Ember.Object.create({ foo: 'foo' })\n  ]);\n\n  equal(obj.someProperty('foo', undefined), true, \"someProperty('foo', undefined)\");\n  equal(obj.someProperty('bar', undefined), true, \"someProperty('bar', undefined)\");\n});\n\nsuite.test('should not match undefined properties without second argument', function() {\n  var obj = this.newObject([\n    { foo: undefined },\n    Ember.Object.create({ })\n  ]);\n\n  equal(obj.someProperty('foo'), false, \"someProperty('foo', undefined)\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/enumerable/some");