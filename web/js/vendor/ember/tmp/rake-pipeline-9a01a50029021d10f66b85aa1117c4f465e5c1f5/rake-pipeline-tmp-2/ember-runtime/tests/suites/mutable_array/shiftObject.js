minispade.register('ember-runtime/~tests/suites/mutable_array/shiftObject', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/~tests/suites/mutable_array');\n\nvar suite = Ember.MutableArrayTests;\n\nsuite.module('shiftObject');\n\nsuite.test(\"[].shiftObject() => [] + returns undefined + NO notify\", function() {\n  var obj, before, after, observer;\n\n  before = [];\n  after  = [];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.shiftObject(), undefined);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.validate('[]', undefined, 1), false, 'should NOT have notified [] once');\n  equal(observer.validate('@each', undefined, 1), false, 'should NOT have notified @each once');\n  equal(observer.validate('length', undefined, 1), false, 'should NOT have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject once');\n});\n\nsuite.test(\"[X].shiftObject() => [] + notify\", function() {\n  var obj, before, after, observer;\n\n  before = this.newFixture(1);\n  after  = [];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.shiftObject(), before[0], 'should return object');\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n});\n\nsuite.test(\"[A,B,C].shiftObject() => [B,C] + notify\", function() {\n  var obj, before, after, observer;\n\n  before = this.newFixture(3);\n  after  = [before[1], before[2]];\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  equal(obj.shiftObject(), before[0], 'should return object');\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n  equal(Ember.get(obj, 'length'), after.length, 'length');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject once');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/mutable_array/shiftObject");