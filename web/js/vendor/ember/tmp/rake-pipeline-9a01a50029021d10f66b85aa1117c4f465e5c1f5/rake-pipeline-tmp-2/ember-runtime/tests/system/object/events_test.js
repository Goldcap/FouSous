minispade.register('ember-runtime/~tests/system/object/events_test', "(function() {module(\"Object events\");\n\ntest(\"a listener can be added to an object\", function() {\n  var count = 0;\n  var F = function() { count++; };\n\n  var obj = Ember.Object.create(Ember.Evented);\n\n  obj.on('event!', F);\n  obj.trigger('event!');\n\n  equal(count, 1, \"the event was triggered\");\n\n  obj.trigger('event!');\n\n  equal(count, 2, \"the event was triggered\");\n});\n\ntest(\"a listener can be added and removed automatically the first time it is triggerd\", function() {\n  var count = 0;\n  var F = function() { count++; };\n\n  var obj = Ember.Object.create(Ember.Evented);\n\n  obj.one('event!', F);\n  obj.trigger('event!');\n\n  equal(count, 1, \"the event was triggered\");\n\n  obj.trigger('event!');\n\n  equal(count, 1, \"the event was not triggered again\");\n});\n\ntest(\"triggering an event can have arguments\", function() {\n  var self, args;\n\n  var obj = Ember.Object.create(Ember.Evented);\n\n  obj.on('event!', function() {\n    args = [].slice.call(arguments);\n    self = this;\n  });\n\n  obj.trigger('event!', \"foo\", \"bar\");\n\n  deepEqual(args, [ \"foo\", \"bar\" ]);\n  equal(self, obj);\n});\n\ntest(\"a listener can be added and removed automatically and have arguments\", function() {\n  var self, args, count = 0;\n\n  var obj = Ember.Object.create(Ember.Evented);\n\n  obj.one('event!', function() {\n    args = [].slice.call(arguments);\n    self = this;\n    count++;\n  });\n\n  obj.trigger('event!', \"foo\", \"bar\");\n\n  deepEqual(args, [ \"foo\", \"bar\" ]);\n  equal(self, obj);\n  equal(count, 1, \"the event is triggered once\");\n\n  obj.trigger('event!', \"baz\", \"bat\");\n\n  deepEqual(args, [ \"foo\", \"bar\" ]);\n  equal(count, 1, \"the event was not triggered again\");\n  equal(self, obj);\n});\n\ntest(\"binding an event can specify a different target\", function() {\n  var self, args;\n\n  var obj = Ember.Object.create(Ember.Evented);\n  var target = {};\n\n  obj.on('event!', target, function() {\n    args = [].slice.call(arguments);\n    self = this;\n  });\n\n  obj.trigger('event!', \"foo\", \"bar\");\n\n  deepEqual(args, [ \"foo\", \"bar\" ]);\n  equal(self, target);\n});\n\ntest(\"a listener registered with one can take method as string and can be added with different target\", function() {\n  var count = 0;\n  var target = {};\n  target.fn = function() { count++; };\n\n  var obj = Ember.Object.create(Ember.Evented);\n\n  obj.one('event!', target, 'fn');\n  obj.trigger('event!');\n\n  equal(count, 1, \"the event was triggered\");\n\n  obj.trigger('event!');\n\n  equal(count, 1, \"the event was not triggered again\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/object/events_test");