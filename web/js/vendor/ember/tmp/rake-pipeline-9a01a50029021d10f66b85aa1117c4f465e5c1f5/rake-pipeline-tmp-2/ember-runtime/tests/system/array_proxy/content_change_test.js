minispade.register('ember-runtime/~tests/system/array_proxy/content_change_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nmodule(\"Ember.ArrayProxy - content change\");\n\ntest(\"should update length for null content\", function() {\n  var proxy = Ember.ArrayProxy.create({\n        content: Ember.A([1,2,3])\n      });\n\n  equal(proxy.get('length'), 3, \"precond - length is 3\");\n\n  proxy.set('content', null);\n\n  equal(proxy.get('length'), 0, \"length updates\");\n});\n\ntest(\"The `arrangedContentWillChange` method is invoked before `content` is changed.\", function() {\n  var callCount = 0,\n      expectedLength;\n\n  var proxy = Ember.ArrayProxy.extend({\n    content: Ember.A([1, 2, 3]),\n\n    arrangedContentWillChange: function() {\n      equal(this.get('arrangedContent.length'), expectedLength, \"hook should be invoked before array has changed\");\n      callCount++;\n    }\n  }).create();\n\n  proxy.pushObject(4);\n  equal(callCount, 0, \"pushing content onto the array doesn't trigger it\");\n\n  proxy.get('content').pushObject(5);\n  equal(callCount, 0, \"pushing content onto the content array doesn't trigger it\");\n\n  expectedLength = 5;\n  proxy.set('content', Ember.A(['a', 'b']));\n  equal(callCount, 1, \"replacing the content array triggers the hook\");\n});\n\ntest(\"The `arrangedContentDidChange` method is invoked after `content` is changed.\", function() {\n  var callCount = 0,\n      expectedLength;\n\n  var proxy = Ember.ArrayProxy.extend({\n    content: Ember.A([1, 2, 3]),\n\n    arrangedContentDidChange: function() {\n      equal(this.get('arrangedContent.length'), expectedLength, \"hook should be invoked after array has changed\");\n      callCount++;\n    }\n  }).create();\n\n  equal(callCount, 0, \"hook is not called after creating the object\");\n\n  proxy.pushObject(4);\n  equal(callCount, 0, \"pushing content onto the array doesn't trigger it\");\n\n  proxy.get('content').pushObject(5);\n  equal(callCount, 0, \"pushing content onto the content array doesn't trigger it\");\n\n  expectedLength = 2;\n  proxy.set('content', Ember.A(['a', 'b']));\n  equal(callCount, 1, \"replacing the content array triggers the hook\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/array_proxy/content_change_test");