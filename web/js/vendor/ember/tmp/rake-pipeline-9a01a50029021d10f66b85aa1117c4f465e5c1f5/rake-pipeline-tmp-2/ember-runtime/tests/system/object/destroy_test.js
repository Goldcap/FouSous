minispade.register('ember-runtime/~tests/system/object/destroy_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals raises TestObject */\n\nmodule('ember-runtime/system/object/destroy_test');\n\ntest(\"should schedule objects to be destroyed at the end of the run loop\", function() {\n  var obj = Ember.Object.create();\n\n  Ember.run(function() {\n    var meta;\n    obj.destroy();\n    meta = Ember.meta(obj);\n    ok(meta, \"object is not destroyed immediately\");\n  });\n\n  ok(obj.get('isDestroyed'), \"object is destroyed after run loop finishes\");\n});\n\ntest(\"should raise an exception when modifying watched properties on a destroyed object\", function() {\n  if (Ember.platform.hasAccessors) {\n    var obj = Ember.Object.create({\n      foo: \"bar\",\n      fooDidChange: Ember.observer(function() { }, 'foo')\n    });\n\n    Ember.run(function() {\n      obj.destroy();\n    });\n\n    raises(function() {\n      Ember.set(obj, 'foo', 'baz');\n    }, Error, \"raises an exception\");\n  } else {\n    expect(0);\n  }\n});\n\ntest(\"observers should not fire after an object has been destroyed\", function() {\n  var count = 0;\n  var obj = Ember.Object.create({\n    fooDidChange: Ember.observer(function() {\n      count++;\n    }, 'foo')\n  });\n\n  obj.set('foo', 'bar');\n\n  equal(count, 1, \"observer was fired once\");\n\n  Ember.run(function() {\n    Ember.beginPropertyChanges();\n    obj.set('foo', 'quux');\n    obj.destroy();\n    Ember.endPropertyChanges();\n  });\n\n  equal(count, 1, \"observer was not called after object was destroyed\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/object/destroy_test");