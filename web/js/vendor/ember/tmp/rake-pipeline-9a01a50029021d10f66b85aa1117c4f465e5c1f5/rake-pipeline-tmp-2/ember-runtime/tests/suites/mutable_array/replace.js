minispade.register('ember-runtime/~tests/suites/mutable_array/replace', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/~tests/suites/mutable_array');\n\nvar suite = Ember.MutableArrayTests;\n\nsuite.module('replace');\n\nsuite.test(\"[].replace(0,0,'X') => ['X'] + notify\", function() {\n\n  var obj, exp, observer;\n  exp = this.newFixture(1);\n  obj = this.newObject([]);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.replace(0,0,exp) ;\n\n  deepEqual(this.toArray(obj), exp, 'post item results');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('firstObject'), 1, 'should have notified firstObject once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n});\n\nsuite.test(\"[A,B,C,D].replace(1,2,X) => [A,X,D] + notify\", function() {\n  var obj, observer, before, replace, after;\n\n  before  = this.newFixture(4);\n  replace = this.newFixture(1);\n  after   = [before[0], replace[0], before[3]];\n\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.replace(1,2,replace) ;\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject once');\n});\n\nsuite.test(\"[A,B,C,D].replace(1,2,[X,Y]) => [A,X,Y,D] + notify\", function() {\n  var obj, observer, before, replace, after;\n\n  before  = this.newFixture(4);\n  replace = this.newFixture(2);\n  after   = [before[0], replace[0], replace[1], before[3]];\n\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.replace(1,2,replace) ;\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.validate('length'), false, 'should NOT have notified length');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject once');\n});\n\nsuite.test(\"[A,B].replace(1,0,[X,Y]) => [A,X,Y,B] + notify\", function() {\n  var obj, observer, before, replace, after;\n\n  before  = this.newFixture(2);\n  replace = this.newFixture(2);\n  after   = [before[0], replace[0], replace[1], before[1]];\n\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.replace(1,0,replace) ;\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n  equal(observer.validate('lastObject'), false, 'should NOT have notified lastObject once');\n});\n\nsuite.test(\"[A,B,C,D].replace(2,2) => [A,B] + notify\", function() {\n  var obj, observer, before, replace, after;\n\n  before  = this.newFixture(4);\n  after   = [before[0], before[1]];\n\n  obj = this.newObject(before);\n  observer = this.newObserver(obj, '[]', '@each', 'length', 'firstObject', 'lastObject');\n  obj.getProperties('firstObject', 'lastObject'); /* Prime the cache */\n\n  obj.replace(2,2);\n\n  deepEqual(this.toArray(obj), after, 'post item results');\n\n  equal(observer.timesCalled('[]'), 1, 'should have notified [] once');\n  equal(observer.timesCalled('@each'), 1, 'should have notified @each once');\n  equal(observer.timesCalled('length'), 1, 'should have notified length once');\n  equal(observer.timesCalled('lastObject'), 1, 'should have notified lastObject once');\n\n  equal(observer.validate('firstObject'), false, 'should NOT have notified firstObject once');\n});\n\nsuite.test('Adding object should notify enumerable observer', function() {\n\n  var fixtures = this.newFixture(4);\n  var obj = this.newObject(fixtures);\n  var observer = this.newObserver(obj).observeEnumerable(obj);\n  var item = this.newFixture(1)[0];\n\n  obj.replace(2, 2, [item]);\n\n  deepEqual(observer._before, [obj, [fixtures[2], fixtures[3]], 1], 'before');\n  deepEqual(observer._after, [obj, 2, [item]], 'after');\n});\n\nsuite.test('Adding object should notify array observer', function() {\n\n  var fixtures = this.newFixture(4);\n  var obj = this.newObject(fixtures);\n  var observer = this.newObserver(obj).observeArray(obj);\n  var item = this.newFixture(1)[0];\n\n  obj.replace(2, 2, [item]);\n\n  deepEqual(observer._before, [obj, 2, 2, 1], 'before');\n  deepEqual(observer._after, [obj, 2, 2, 1], 'after');\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/suites/mutable_array/replace");