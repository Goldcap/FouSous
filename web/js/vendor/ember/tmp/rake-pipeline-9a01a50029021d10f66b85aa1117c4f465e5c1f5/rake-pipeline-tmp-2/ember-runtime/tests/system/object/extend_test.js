minispade.register('ember-runtime/~tests/system/object/extend_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nmodule('Ember.Object.extend');\n\ntest('Basic extend', function() {\n  var SomeClass = Ember.Object.extend({ foo: 'BAR' });\n  ok(SomeClass.isClass, \"A class has isClass of true\");\n  var obj = new SomeClass();\n  equal(obj.foo, 'BAR');\n  ok(obj.isInstance, \"An instance of a class has isInstance of true\");\n});\n\ntest('Sub-subclass', function() {\n  var SomeClass = Ember.Object.extend({ foo: 'BAR' });\n  var AnotherClass = SomeClass.extend({ bar: 'FOO' });\n  var obj = new AnotherClass();\n  equal(obj.foo, 'BAR');\n  equal(obj.bar, 'FOO');\n});\n\ntest('Overriding a method several layers deep', function() {\n  var SomeClass = Ember.Object.extend({\n    fooCnt: 0,\n    foo: function() { this.fooCnt++; },\n\n    barCnt: 0,\n    bar: function() { this.barCnt++; }\n  });\n\n  var AnotherClass = SomeClass.extend({\n    barCnt: 0,\n    bar: function() { this.barCnt++; this._super(); }\n  });\n\n  var FinalClass = AnotherClass.extend({\n    fooCnt: 0,\n    foo: function() { this.fooCnt++; this._super(); }\n  });\n\n  var obj = new FinalClass();\n  obj.foo();\n  obj.bar();\n  equal(obj.fooCnt, 2, 'should invoke both');\n  equal(obj.barCnt, 2, 'should invoke both');\n\n  // Try overriding on create also\n  obj = FinalClass.create({\n    foo: function() { this.fooCnt++; this._super(); }\n  });\n\n  obj.foo();\n  obj.bar();\n  equal(obj.fooCnt, 3, 'should invoke final as well');\n  equal(obj.barCnt, 2, 'should invoke both');\n});\n\n\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/object/extend_test");