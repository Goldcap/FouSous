minispade.register('ember-runtime/~tests/system/set/extra_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\n// ..........................................................\n// Ember.Set.init\n//\n\nmodule('Ember.Set.init');\n\ntest('passing an array to new Ember.Set() should instantiate w/ items', function() {\n\n  var get = Ember.get;\n  var ary  = [1,2,3];\n  var aSet = new Ember.Set(ary);\n  var count = 0;\n\n  equal(get(aSet, 'length'), 3, 'should have three items');\n  aSet.forEach(function(x) {\n    ok(Ember.EnumerableUtils.indexOf(ary, x)>=0, 'should find passed item in array');\n    count++;\n  });\n  equal(count, 3, 'iterating should have returned three objects');\n});\n\n\n// ..........................................................\n// Ember.Set.clear\n//\n\nmodule('Ember.Set.clear');\n\ntest('should clear a set of its content', function() {\n\n  var get = Ember.get, set = Ember.set;\n  var aSet = new Ember.Set([1,2,3]);\n  var count = 0;\n\n  equal(get(aSet, 'length'), 3, 'should have three items');\n  ok(get(aSet, 'firstObject'), 'firstObject should return an object');\n  ok(get(aSet, 'lastObject'), 'lastObject should return an object');\n  Ember.addObserver(aSet, '[]', function() { count++; });\n\n  aSet.clear();\n  equal(get(aSet, 'length'), 0, 'should have 0 items');\n  equal(count, 1, 'should have notified of content change');\n  equal(get(aSet, 'firstObject'), null, 'firstObject should return nothing');\n  equal(get(aSet, 'lastObject'), null, 'lastObject should return nothing');\n\n  count = 0;\n  aSet.forEach(function() { count++; });\n  equal(count, 0, 'iterating over items should not invoke callback');\n\n});\n\n// ..........................................................\n// Ember.Set.pop\n//\n\nmodule('Ember.Set.pop');\n\ntest('calling pop should return an object and remove it', function() {\n\n  var aSet = new Ember.Set([1,2,3]);\n  var count = 0, obj;\n  while(count<10 && (obj = aSet.pop())) {\n    equal(aSet.contains(obj), false, 'set should no longer contain object');\n    count++;\n    equal(Ember.get(aSet, 'length'), 3-count, 'length should be shorter');\n  }\n\n  equal(count, 3, 'should only pop 3 objects');\n  equal(Ember.get(aSet, 'length'), 0, 'final length should be zero');\n  equal(aSet.pop(), null, 'extra pops should do nothing');\n});\n\n// ..........................................................\n// Ember.Set.aliases\n//\n\nmodule('Ember.Set aliases');\n\ntest('method aliases', function() {\n  var aSet = new Ember.Set();\n  equal(aSet.add, aSet.addObject, 'add -> addObject');\n  equal(aSet.remove, aSet.removeObject, 'remove -> removeObject');\n  equal(aSet.addEach, aSet.addObjects, 'addEach -> addObjects');\n  equal(aSet.removeEach, aSet.removeObjects, 'removeEach -> removeObjects');\n\n  equal(aSet.push, aSet.addObject, 'push -> addObject');\n  equal(aSet.unshift, aSet.addObject, 'unshift -> addObject');\n  equal(aSet.shift, aSet.pop, 'shift -> pop');\n});\n\n\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/set/extra_test");