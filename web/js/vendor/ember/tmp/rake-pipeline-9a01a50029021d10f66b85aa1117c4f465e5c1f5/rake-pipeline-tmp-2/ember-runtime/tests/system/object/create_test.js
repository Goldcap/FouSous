minispade.register('ember-runtime/~tests/system/object/create_test', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TestObject:true */\n\nmodule('Ember.Object.create');\n\ntest(\"Creates a new object that contains passed properties\", function() {\n\n  var called = false;\n  var obj = Ember.Object.create({\n    prop: 'FOO',\n    method: function() { called=true; }\n  });\n\n  //console.log(Ct.dump(obj));\n  equal(Ember.get(obj, 'prop'), 'FOO', 'obj.prop');\n  obj.method();\n  ok(called, 'method executed');\n\n});\n\n// ..........................................................\n// WORKING WITH MIXINS\n//\n\ntest(\"Creates a new object that includes mixins and properties\", function() {\n\n  var MixinA = Ember.Mixin.create({ mixinA: 'A' });\n  var obj = Ember.Object.create(MixinA, { prop: 'FOO' });\n\n  equal(Ember.get(obj, 'mixinA'), 'A', 'obj.mixinA');\n  equal(Ember.get(obj, 'prop'), 'FOO', 'obj.prop');\n});\n\n// ..........................................................\n// LIFECYCLE\n//\n\ntest(\"Configures _super() on methods with override\", function() {\n  var completed = false;\n  var MixinA = Ember.Mixin.create({ method: function() {} });\n  var obj = Ember.Object.create(MixinA, {\n    method: function() {\n      this._super();\n      completed = true;\n    }\n  });\n\n  obj.method();\n  ok(completed, 'should have run method without error');\n});\n\ntest(\"Calls init if defined\", function() {\n  var completed = false;\n  var obj = Ember.Object.create({\n    init: function() {\n      this._super();\n      completed = true;\n    }\n  });\n\n  ok(completed, 'should have run init without error');\n});\n\ntest(\"Calls all mixin inits if defined\", function() {\n  var completed = 0;\n  var Mixin1 = Ember.Mixin.create({\n    init: function() { this._super(); completed++; }\n  });\n\n  var Mixin2 = Ember.Mixin.create({\n    init: function() { this._super(); completed++; }\n  });\n\n  Ember.Object.create(Mixin1, Mixin2);\n  equal(completed, 2, 'should have called init for both mixins.');\n});\n\ntest('creating an object with required properties', function() {\n  var ClassA = Ember.Object.extend({\n    foo: Ember.required()\n  });\n\n  var obj = ClassA.create({ foo: 'FOO' }); // should not throw\n  equal(Ember.get(obj,'foo'), 'FOO');\n});\n\n\n// ..........................................................\n// BUGS\n//\n\ntest('create should not break observed values', function() {\n\n  var CountObject = Ember.Object.extend({\n    value: null,\n\n    _count: 0,\n\n    reset: function() {\n      this._count = 0;\n      return this;\n    },\n\n    valueDidChange: Ember.observer(function() {\n      this._count++;\n    }, 'value')\n  });\n\n  var obj = CountObject.create({ value: 'foo' });\n  equal(obj._count, 0, 'should not fire yet');\n\n  Ember.set(obj, 'value', 'BAR');\n  equal(obj._count, 1, 'should fire');\n});\n\ntest('bindings on a class should only sync on instances', function() {\n  TestObject = Ember.Object.create({\n    foo: 'FOO'\n  });\n\n  var Class, inst;\n\n  Ember.run(function() {\n    Class = Ember.Object.extend({\n      fooBinding: 'TestObject.foo'\n    });\n\n    inst = Class.create();\n  });\n\n  equal(Ember.get(Class.prototype, 'foo'), undefined, 'should not sync binding');\n  equal(Ember.get(inst, 'foo'), 'FOO', 'should sync binding');\n\n});\n\n\ntest('inherited bindings should only sync on instances', function() {\n  TestObject = Ember.Object.create({\n    foo: 'FOO'\n  });\n\n  var Class, Subclass, inst;\n\n  Ember.run(function() {\n    Class = Ember.Object.extend({\n      fooBinding: 'TestObject.foo'\n    });\n  });\n\n  Ember.run(function() {\n    Subclass = Class.extend();\n    inst = Subclass.create();\n  });\n\n  equal(Ember.get(Class.prototype, 'foo'), undefined, 'should not sync binding on Class');\n  equal(Ember.get(Subclass.prototype, 'foo'), undefined, 'should not sync binding on Subclass');\n  equal(Ember.get(inst, 'foo'), 'FOO', 'should sync binding on inst');\n\n  Ember.run(function() {\n    Ember.set(TestObject, 'foo', 'BAR');\n  });\n\n  equal(Ember.get(Class.prototype, 'foo'), undefined, 'should not sync binding on Class');\n  equal(Ember.get(Subclass.prototype, 'foo'), undefined, 'should not sync binding on Subclass');\n  equal(Ember.get(inst, 'foo'), 'BAR', 'should sync binding on inst');\n\n});\n\ntest(\"created objects should not share a guid with their superclass\", function() {\n  ok(Ember.guidFor(Ember.Object), \"Ember.Object has a guid\");\n\n  var objA = Ember.Object.create(),\n      objB = Ember.Object.create();\n\n  ok(Ember.guidFor(objA) !== Ember.guidFor(objB), \"two instances do not share a guid\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/object/create_test");