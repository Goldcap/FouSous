minispade.register('ember-runtime/~tests/system/string/dasherize', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: ©2006-2011 Strobe Inc. and contributors.\n//            ©2008-2011 Apple Inc. All rights reserved.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nmodule('Ember.String.dasherize');\n\ntest(\"dasherize normal string\", function() {\n  deepEqual(Ember.String.dasherize('my favorite items'), 'my-favorite-items');\n  if (Ember.EXTEND_PROTOTYPES) {\n    deepEqual('my favorite items'.dasherize(), 'my-favorite-items');\n  }\n});\n\ntest(\"does nothing with dasherized string\", function() {\n  deepEqual(Ember.String.dasherize('css-class-name'), 'css-class-name');\n  if (Ember.EXTEND_PROTOTYPES) {\n    deepEqual('css-class-name'.dasherize(), 'css-class-name');\n  }\n});\n\ntest(\"dasherize underscored string\", function() {\n  deepEqual(Ember.String.dasherize('action_name'), 'action-name');\n  if (Ember.EXTEND_PROTOTYPES) {\n    deepEqual('action_name'.dasherize(), 'action-name');\n  }\n});\n\ntest(\"dasherize camelcased string\", function() {\n  deepEqual(Ember.String.dasherize('innerHTML'), 'inner-html');\n  if (Ember.EXTEND_PROTOTYPES) {\n    deepEqual('innerHTML'.dasherize(), 'inner-html');\n  }\n});\n\ntest(\"after call with the same passed value take object from cache\", function() {\n  var res = Ember.String.dasherize('innerHTML');\n\n  var callCount = 0;\n  var decamelize = Ember.String.decamelize;\n\n  try {\n    Ember.String.decamelize = function() {\n      callCount++;\n    };\n    Ember.String.dasherize('innerHTML');\n  } finally {\n    Ember.String.decamelize = decamelize;\n  }\n\n  equal(callCount, 0, \"decamelize is not called again\");\n});\n\n})();\n//@ sourceURL=ember-runtime/~tests/system/string/dasherize");