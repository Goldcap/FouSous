minispade.register('ember-states/state', "(function() {var get = Ember.get, set = Ember.set;\n\n/**\n  @class\n\n  @extends Ember.Object\n*/\nEmber.State = Ember.Object.extend(Ember.Evented,\n/** @scope Ember.State.prototype */{\n  isState: true,\n\n  /**\n    A reference to the parent state.\n\n    @type Ember.State\n  */\n  parentState: null,\n  start: null,\n\n  /**\n    The name of this state.\n\n    @type String\n  */\n  name: null,\n\n  /**\n    The full path to this state.\n\n    @type String\n    @readOnly\n  */\n  path: Ember.computed(function() {\n    var parentPath = get(this, 'parentState.path'),\n        path = get(this, 'name');\n\n    if (parentPath) {\n      path = parentPath + '.' + path;\n    }\n\n    return path;\n  }).property().cacheable(),\n\n  /**\n    @private\n\n    Override the default event firing from Ember.Evented to\n    also call methods with the given name.\n  */\n  trigger: function(name) {\n    if (this[name]) {\n      this[name].apply(this, [].slice.call(arguments, 1));\n    }\n    this._super.apply(this, arguments);\n  },\n\n  /** @private */\n  init: function() {\n    var states = get(this, 'states'), foundStates;\n    set(this, 'childStates', Ember.A());\n    set(this, 'eventTransitions', get(this, 'eventTransitions') || {});\n\n    var name, value, transitionTarget;\n\n    // As a convenience, loop over the properties\n    // of this state and look for any that are other\n    // Ember.State instances or classes, and move them\n    // to the `states` hash. This avoids having to\n    // create an explicit separate hash.\n\n    if (!states) {\n      states = {};\n\n      for (name in this) {\n        if (name === \"constructor\") { continue; }\n\n        if (value = this[name]) {\n          if (transitionTarget = value.transitionTarget) {\n            this.eventTransitions[name] = transitionTarget;\n          }\n\n          this.setupChild(states, name, value);\n        }\n      }\n\n      set(this, 'states', states);\n    } else {\n      for (name in states) {\n        this.setupChild(states, name, states[name]);\n      }\n    }\n\n    set(this, 'pathsCache', {});\n    set(this, 'pathsCacheNoContext', {});\n  },\n\n  /** @private */\n  setupChild: function(states, name, value) {\n    if (!value) { return false; }\n\n    if (value.isState) {\n      set(value, 'name', name);\n    } else if (Ember.State.detect(value)) {\n      value = value.create({\n        name: name\n      });\n    }\n\n    if (value.isState) {\n      set(value, 'parentState', this);\n      get(this, 'childStates').pushObject(value);\n      states[name] = value;\n    }\n  },\n\n  lookupEventTransition: function(name) {\n    var path, state = this;\n\n    while(state && !path) {\n      path = state.eventTransitions[name];\n      state = state.get('parentState');\n    }\n\n    return path;\n  },\n\n  /**\n    A Boolean value indicating whether the state is a leaf state\n    in the state hierarchy. This is false if the state has child\n    states; otherwise it is true.\n\n    @type Boolean\n  */\n  isLeaf: Ember.computed(function() {\n    return !get(this, 'childStates').length;\n  }).cacheable(),\n\n  /**\n    A boolean value indicating whether the state takes a context.\n    By default we assume all states take contexts.\n  */\n  hasContext: true,\n\n  /**\n    This is the default transition event.\n\n    @event\n    @param {Ember.StateManager} manager\n    @param context\n    @see Ember.StateManager#transitionEvent\n  */\n  setup: Ember.K,\n\n  /**\n    This event fires when the state is entered.\n\n    @event\n    @param {Ember.StateManager} manager\n  */\n  enter: Ember.K,\n\n  /**\n    This event fires when the state is exited.\n\n    @event\n    @param {Ember.StateManager} manager\n  */\n  exit: Ember.K\n});\n\nvar Event = Ember.$ && Ember.$.Event;\n\nEmber.State.reopenClass(\n/** @scope Ember.State */{\n\n  /**\n  @static\n\n  Creates an action function for transitioning to the named state while preserving context.\n\n  The following example StateManagers are equivalent:\n\n      aManager = Ember.StateManager.create({\n        stateOne: Ember.State.create({\n          changeToStateTwo: Ember.State.transitionTo('stateTwo')\n        }),\n        stateTwo: Ember.State.create({})\n      })\n\n      bManager = Ember.StateManager.create({\n        stateOne: Ember.State.create({\n          changeToStateTwo: function(manager, context){\n            manager.transitionTo('stateTwo', context)\n          }\n        }),\n        stateTwo: Ember.State.create({})\n      })\n\n  @param {String} target\n  */\n  transitionTo: function(target) {\n    var event = function(stateManager, context) {\n      if (Event && context instanceof Event) {\n        if (context.hasOwnProperty('context')) {\n          context = context.context;\n        } else {\n          // If we received an event and it doesn't contain\n          // a context, don't pass along a superfluous\n          // context to the target of the event.\n          return stateManager.transitionTo(target);\n        }\n      }\n\n      stateManager.transitionTo(target, context);\n    };\n\n    event.transitionTarget = target;\n\n    return event;\n  }\n});\n\n})();\n//@ sourceURL=ember-states/state");