minispade.register('ember-handlebars/views/metamorph_view', "(function() {/*jshint newcap:false*/\nminispade.require(\"metamorph\");\nminispade.require(\"ember-views/views/view\");\n\nvar set = Ember.set, get = Ember.get;\n\n// DOMManager should just abstract dom manipulation between jquery and metamorph\nvar DOMManager = {\n  remove: function(view) {\n    view.morph.remove();\n  },\n\n  prepend: function(view, html) {\n    view.morph.prepend(html);\n  },\n\n  after: function(view, html) {\n    view.morph.after(html);\n  },\n\n  html: function(view, html) {\n    view.morph.html(html);\n  },\n\n  // This is messed up.\n  replace: function(view) {\n    var morph = view.morph;\n\n    view.transitionTo('preRender');\n    view.clearRenderedChildren();\n    var buffer = view.renderToBuffer();\n\n    Ember.run.schedule('render', this, function() {\n      if (get(view, 'isDestroyed')) { return; }\n      view.invalidateRecursively('element');\n      view._notifyWillInsertElement();\n      morph.replaceWith(buffer.string());\n      view.transitionTo('inDOM');\n      view._notifyDidInsertElement();\n    });\n  },\n\n  empty: function(view) {\n    view.morph.html(\"\");\n  }\n};\n\n// The `morph` and `outerHTML` properties are internal only\n// and not observable.\n\nEmber._Metamorph = Ember.Mixin.create({\n  isVirtual: true,\n  tagName: '',\n\n  init: function() {\n    this._super();\n    this.morph = Metamorph();\n  },\n\n  beforeRender: function(buffer) {\n    buffer.push(this.morph.startTag());\n  },\n\n  afterRender: function(buffer) {\n    buffer.push(this.morph.endTag());\n  },\n\n  createElement: function() {\n    var buffer = this.renderToBuffer();\n    this.outerHTML = buffer.string();\n    this.clearBuffer();\n  },\n\n  domManager: DOMManager\n});\n\nEmber._MetamorphView = Ember.View.extend(Ember._Metamorph);\n\n\n})();\n//@ sourceURL=ember-handlebars/views/metamorph_view");