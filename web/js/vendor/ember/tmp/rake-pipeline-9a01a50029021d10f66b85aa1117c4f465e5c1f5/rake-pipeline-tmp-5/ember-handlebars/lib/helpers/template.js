minispade.register('ember-handlebars/helpers/template', "(function() {minispade.require('ember-handlebars/ext');\n\n/**\n  `template` allows you to render a template from inside another template.\n  This allows you to re-use the same template in multiple places. For example:\n\n      <script type=\"text/x-handlebars\">\n        {{#with loggedInUser}}\n          Last Login: {{lastLogin}}\n          User Info: {{template \"user_info\"}}\n        {{/with}}\n      </script>\n\n      <script type=\"text/x-handlebars\" data-template-name=\"user_info\">\n        Name: <em>{{name}}</em>\n        Karma: <em>{{karma}}</em>\n      </script>\n\n  This helper looks for templates in the global Ember.TEMPLATES hash. If you\n  add &lt;script&gt; tags to your page with the `data-template-name` attribute set,\n  they will be compiled and placed in this hash automatically.\n\n  You can also manually register templates by adding them to the hash:\n\n      Ember.TEMPLATES[\"my_cool_template\"] = Ember.Handlebars.compile('<b>{{user}}</b>');\n\n  @name Handlebars.helpers.template\n  @param {String} templateName the template to render\n*/\n\nEmber.Handlebars.registerHelper('template', function(name, options) {\n  var template = Ember.TEMPLATES[name];\n\n  Ember.assert(\"Unable to find template with name '\"+name+\"'.\", !!template);\n\n  Ember.TEMPLATES[name](this, { data: options.data });\n});\n\n})();\n//@ sourceURL=ember-handlebars/helpers/template");