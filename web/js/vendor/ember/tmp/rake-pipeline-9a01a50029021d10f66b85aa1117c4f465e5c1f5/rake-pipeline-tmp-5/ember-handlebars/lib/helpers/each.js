minispade.register('ember-handlebars/helpers/each', "(function() {minispade.require(\"ember-handlebars/ext\");\nminispade.require(\"ember-views/views/collection_view\");\nminispade.require(\"ember-handlebars/views/metamorph_view\");\n\nvar get = Ember.get, set = Ember.set;\n\nEmber.Handlebars.EachView = Ember.CollectionView.extend(Ember._Metamorph, {\n  itemViewClass: Ember._MetamorphView,\n  emptyViewClass: Ember._MetamorphView,\n\n  createChildView: function(view, attrs) {\n    view = this._super(view, attrs);\n\n    // At the moment, if a container view subclass wants\n    // to insert keywords, it is responsible for cloning\n    // the keywords hash. This will be fixed momentarily.\n    var keyword = get(this, 'keyword');\n\n    if (keyword) {\n      var data = get(view, 'templateData');\n\n      data = Ember.copy(data);\n      data.keywords = view.cloneKeywords();\n      set(view, 'templateData', data);\n\n      var content = get(view, 'content');\n\n      // In this case, we do not bind, because the `content` of\n      // a #each item cannot change.\n      data.keywords[keyword] = content;\n    }\n\n    return view;\n  }\n});\n\n/**\n  \n  The `{{#each}}` helper loops over elements in a collection, rendering its block once for each item:\n  \n        Developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n        \n        {{#each Developers}}\n          {{name}}\n        {{/each}}\n        \n  \n  `{{each}}` supports an alternative syntax with element naming:\n        \n        {{#each person in Developers}}\n          {{person.name}}\n        {{/each}}\n  \n  When looping over objects that do not have properties, `{{this}}` can be used to render the object:\n        \n        DeveloperNames = ['Yehuda', 'Tom', 'Paul']\n        \n        {{#each DeveloperNames}}\n          {{this}}\n        {{/each}}\n        \n  \n  @name Handlebars.helpers.each\n*/\nEmber.Handlebars.registerHelper('each', function(path, options) {\n  if (arguments.length === 4) {\n    Ember.assert(\"If you pass more than one argument to the each helper, it must be in the form #each foo in bar\", arguments[1] === \"in\");\n\n    var keywordName = arguments[0];\n\n    options = arguments[3];\n    path = arguments[2];\n    if (path === '') { path = \"this\"; }\n\n    options.hash.keyword = keywordName;\n  } else {\n    options.hash.eachHelper = 'each';\n  }\n\n  Ember.assert(\"You must pass a block to the each helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n  options.hash.contentBinding = path;\n  // Set up emptyView as a metamorph with no tag\n  //options.hash.emptyViewClass = Ember._MetamorphView;\n\n  return Ember.Handlebars.helpers.collection.call(this, 'Ember.Handlebars.EachView', options);\n});\n\n})();\n//@ sourceURL=ember-handlebars/helpers/each");