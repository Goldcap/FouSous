minispade.register('ember-handlebars/helpers/yield', "(function() {var get = Ember.get, set = Ember.set;\n\n/**\n\n  When used in a Handlebars template that is assigned to an `Ember.View` instance's\n  `layout` property Ember will render the layout template first, inserting the view's\n  own rendered output at the `{{ yield }}` location.\n\n  An empty `<body>` and the following application code:\n\n      AView = Ember.View.extend({\n        classNames: ['a-view-with-layout'],\n        layout: Ember.Handlebars.compile('<div class=\"wrapper\">{{ yield }}</div>'),\n        template: Ember.Handlebars.compile('<span>I am wrapped</span>')\n      })\n\n      aView = AView.create()\n      aView.appendTo('body')\n\n  Will result in the following HTML output:\n\n      <body>\n        <div class='ember-view a-view-with-layout'>\n          <div class=\"wrapper\">\n            <span>I am wrapped</span>\n          </div>\n        </div>\n      </body>\n\n  The yield helper cannot be used outside of a template assigned to an `Ember.View`'s `layout` property\n  and will throw an error if attempted.\n\n      BView = Ember.View.extend({\n        classNames: ['a-view-with-layout'],\n        template: Ember.Handlebars.compile('{{yield}}')\n      })\n\n      bView = BView.create()\n      bView.appendTo('body')\n\n      // throws\n      // Uncaught Error: assertion failed: You called yield in a template that was not a layout\n\n  @name Handlebars.helpers.yield\n  @param {Hash} options\n  @returns {String} HTML string\n*/\nEmber.Handlebars.registerHelper('yield', function(options) {\n  var view = options.data.view, template;\n\n  while (view && !get(view, 'layout')) {\n    view = get(view, 'parentView');\n  }\n\n  Ember.assert(\"You called yield in a template that was not a layout\", !!view);\n\n  template = get(view, 'template');\n\n  if (template) { template(this, options); }\n});\n\n})();\n//@ sourceURL=ember-handlebars/helpers/yield");