minispade.register('ember-routing/route_matcher', "(function() {var escapeForRegex = function(text) {\n  return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^\\$|#\\s]/g, \"\\\\$&\");\n};\n\nEmber._RouteMatcher = Ember.Object.extend({\n  state: null,\n\n  init: function() {\n    var route = this.route,\n        identifiers = [],\n        count = 1,\n        escaped;\n\n    // Strip off leading slash if present\n    if (route.charAt(0) === '/') {\n      route = this.route = route.substr(1);\n    }\n\n    escaped = escapeForRegex(route);\n\n    var regex = escaped.replace(/:([a-z_]+)(?=$|\\/)/gi, function(match, id) {\n      identifiers[count++] = id;\n      return \"([^/]+)\";\n    });\n\n    this.identifiers = identifiers;\n    this.regex = new RegExp(\"^/?\" + regex);\n  },\n\n  match: function(path) {\n    var match = path.match(this.regex);\n\n    if (match) {\n      var identifiers = this.identifiers,\n          hash = {};\n\n      for (var i=1, l=identifiers.length; i<l; i++) {\n        hash[identifiers[i]] = match[i];\n      }\n\n      return {\n        remaining: path.substr(match[0].length),\n        hash: identifiers.length > 0 ? hash : null\n      };\n    }\n  },\n\n  generate: function(hash) {\n    var identifiers = this.identifiers, route = this.route, id;\n    for (var i=1, l=identifiers.length; i<l; i++) {\n      id = identifiers[i];\n      route = route.replace(new RegExp(\":\" + id), hash[id]);\n    }\n    return route;\n  }\n});\n\n})();\n//@ sourceURL=ember-routing/route_matcher");