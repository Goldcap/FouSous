minispade.register('ember-routing/location/hash_location', "(function() {var get = Ember.get, set = Ember.set;\n\n/**\n  @class\n\n  Ember.HashLocation implements the location API using the browser's\n  hash. At present, it relies on a hashchange event existing in the\n  browser.\n\n  @extends Ember.Object\n*/\nEmber.HashLocation = Ember.Object.extend(\n/** @scope Ember.HashLocation.prototype */ {\n\n  /** @private */\n  init: function() {\n    set(this, 'location', get(this, 'location') || window.location);\n  },\n\n  /**\n    @private\n\n    Returns the current `location.hash`, minus the '#' at the front.\n  */\n  getURL: function() {\n    return get(this, 'location').hash.substr(1);\n  },\n\n  /**\n    @private\n\n    Set the `location.hash` and remembers what was set. This prevents\n    `onUpdateURL` callbacks from triggering when the hash was set by\n    `HashLocation`.\n  */\n  setURL: function(path) {\n    get(this, 'location').hash = path;\n    set(this, 'lastSetURL', path);\n  },\n\n  /**\n    @private\n\n    Register a callback to be invoked when the hash changes. These\n    callbacks will execute when the user presses the back or forward\n    button, but not after `setURL` is invoked.\n  */\n  onUpdateURL: function(callback) {\n    var self = this;\n    var guid = Ember.guidFor(this);\n\n    Ember.$(window).bind('hashchange.ember-location-'+guid, function() {\n      var path = location.hash.substr(1);\n      if (get(self, 'lastSetURL') === path) { return; }\n\n      set(self, 'lastSetURL', null);\n\n      callback(location.hash.substr(1));\n    });\n  },\n\n  /**\n    @private\n\n    Given a URL, formats it to be placed into the page as part\n    of an element's `href` attribute.\n\n    This is used, for example, when using the {{action}} helper\n    to generate a URL based on an event.\n  */\n  formatURL: function(url) {\n    return '#'+url;\n  },\n\n  /** @private */\n  willDestroy: function() {\n    var guid = Ember.guidFor(this);\n\n    Ember.$(window).unbind('hashchange.ember-location-'+guid);\n  }\n});\n\nEmber.Location.registerImplementation('hash', Ember.HashLocation);\n\n})();\n//@ sourceURL=ember-routing/location/hash_location");