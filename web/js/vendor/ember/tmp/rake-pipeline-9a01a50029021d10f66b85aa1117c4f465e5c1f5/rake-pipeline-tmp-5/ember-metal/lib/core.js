minispade.register('ember-metal/core', "(function() {// ==========================================================================\n// Project:  Ember Metal\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals Em:true ENV */\n\nif ('undefined' === typeof Ember) {\n  // Create core object. Make it act like an instance of Ember.Namespace so that\n  // objects assigned to it are given a sane string representation.\n  Ember = {};\n}\n\n/**\n  @namespace\n  @name Ember\n  @version 1.0.pre\n\n  All Ember methods and functions are defined inside of this namespace.\n  You generally should not add new properties to this namespace as it may be\n  overwritten by future versions of Ember.\n\n  You can also use the shorthand \"Em\" instead of \"Ember\".\n\n  Ember-Runtime is a framework that provides core functions for\n  Ember including cross-platform functions, support for property\n  observing and objects. Its focus is on small size and performance. You can\n  use this in place of or along-side other cross-platform libraries such as\n  jQuery.\n\n  The core Runtime framework is based on the jQuery API with a number of\n  performance optimizations.\n*/\n\n// aliases needed to keep minifiers from removing the global context\nif ('undefined' !== typeof window) {\n  window.Em = window.Ember = Em = Ember;\n}\n\n// Make sure these are set whether Ember was already defined or not\n\nEmber.isNamespace = true;\n\nEmber.toString = function() { return \"Ember\"; };\n\n\n/**\n  @static\n  @type String\n  @default '1.0.pre'\n  @constant\n*/\nEmber.VERSION = '1.0.pre';\n\n/**\n  @static\n  @type Hash\n  @constant\n\n  Standard environmental variables.  You can define these in a global `ENV`\n  variable before loading Ember to control various configuration\n  settings.\n*/\nEmber.ENV = Ember.ENV || ('undefined' === typeof ENV ? {} : ENV);\n\nEmber.config = Ember.config || {};\n\n// ..........................................................\n// BOOTSTRAP\n//\n\n/**\n  @static\n  @type Boolean\n  @default true\n  @constant\n\n  Determines whether Ember should enhances some built-in object\n  prototypes to provide a more friendly API.  If enabled, a few methods\n  will be added to Function, String, and Array.  Object.prototype will not be\n  enhanced, which is the one that causes most troubles for people.\n\n  In general we recommend leaving this option set to true since it rarely\n  conflicts with other code.  If you need to turn it off however, you can\n  define an ENV.EXTEND_PROTOTYPES config to disable it.\n*/\nEmber.EXTEND_PROTOTYPES = (Ember.ENV.EXTEND_PROTOTYPES !== false);\n\n/**\n  @static\n  @type Boolean\n  @default true\n  @constant\n\n  Determines whether Ember logs a full stack trace during deprecation warnings\n*/\nEmber.LOG_STACKTRACE_ON_DEPRECATION = (Ember.ENV.LOG_STACKTRACE_ON_DEPRECATION !== false);\n\n/**\n  @static\n  @type Boolean\n  @default Ember.EXTEND_PROTOTYPES\n  @constant\n\n  Determines whether Ember should add ECMAScript 5 shims to older browsers.\n*/\nEmber.SHIM_ES5 = (Ember.ENV.SHIM_ES5 === false) ? false : Ember.EXTEND_PROTOTYPES;\n\n\n/**\n  @static\n  @type Boolean\n  @default true\n  @constant\n\n  Determines whether computed properties are cacheable by default.\n  This option will be removed for the 1.1 release.\n\n  When caching is enabled by default, you can use `volatile()` to disable\n  caching on individual computed properties.\n*/\nEmber.CP_DEFAULT_CACHEABLE = (Ember.ENV.CP_DEFAULT_CACHEABLE !== false);\n\n/**\n  @static\n  @type Boolean\n  @default true\n  @constant\n\n  Determines whether views render their templates using themselves\n  as the context, or whether it is inherited from the parent. This option\n  will be removed in the 1.1 release.\n\n  If you need to update your application to use the new context rules, simply\n  prefix property access with `view.`:\n\n      // Before:\n      {{#each App.photosController}}\n        Photo Title: {{title}}\n        {{#view App.InfoView contentBinding=\"this\"}}\n          {{content.date}}\n          {{content.cameraType}}\n          {{otherViewProperty}}\n        {{/view}}\n      {{/each}}\n\n      // After:\n      {{#each App.photosController}}\n        Photo Title: {{title}}\n        {{#view App.InfoView}}\n          {{date}}\n          {{cameraType}}\n          {{view.otherViewProperty}}\n        {{/view}}\n      {{/each}}\n*/\nEmber.VIEW_PRESERVES_CONTEXT = (Ember.ENV.VIEW_PRESERVES_CONTEXT !== false);\n\n/**\n  Empty function.  Useful for some operations.\n\n  @returns {Object}\n  @private\n*/\nEmber.K = function() { return this; };\n\n/**\n  @namespace\n  @name window\n  @description The global window object\n*/\n\n\n// Stub out the methods defined by the ember-debug package in case it's not loaded\n\nif ('undefined' === typeof Ember.assert) { Ember.assert = Ember.K; }\nif ('undefined' === typeof Ember.warn) { Ember.warn = Ember.K; }\nif ('undefined' === typeof Ember.deprecate) { Ember.deprecate = Ember.K; }\nif ('undefined' === typeof Ember.deprecateFunc) {\n  Ember.deprecateFunc = function(_, func) { return func; };\n}\n\n// These are deprecated but still supported\n\nif ('undefined' === typeof ember_assert) { window.ember_assert = Ember.K; }\nif ('undefined' === typeof ember_warn) { window.ember_warn = Ember.K; }\nif ('undefined' === typeof ember_deprecate) { window.ember_deprecate = Ember.K; }\nif ('undefined' === typeof ember_deprecateFunc) {\n  /** @private */\n  window.ember_deprecateFunc = function(_, func) { return func; };\n}\n\n\n// ..........................................................\n// LOGGER\n//\n\n/**\n  @class\n\n  Inside Ember-Metal, simply uses the window.console object.\n  Override this to provide more robust logging functionality.\n*/\nEmber.Logger = window.console || { log: Ember.K, warn: Ember.K, error: Ember.K, info: Ember.K, debug: Ember.K };\n\n})();\n//@ sourceURL=ember-metal/core");