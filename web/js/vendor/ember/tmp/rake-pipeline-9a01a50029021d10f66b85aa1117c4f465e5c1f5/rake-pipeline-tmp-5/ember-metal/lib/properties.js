minispade.register('ember-metal/properties', "(function() {// ==========================================================================\n// Project:  Ember Metal\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-metal/core');\nminispade.require('ember-metal/platform');\nminispade.require('ember-metal/utils');\nminispade.require('ember-metal/accessors');\n\nvar GUID_KEY = Ember.GUID_KEY,\n    META_KEY = Ember.META_KEY,\n    EMPTY_META = Ember.EMPTY_META,\n    metaFor = Ember.meta,\n    o_create = Ember.create,\n    objectDefineProperty = Ember.platform.defineProperty;\n\nvar MANDATORY_SETTER = Ember.ENV.MANDATORY_SETTER;\n\n// ..........................................................\n// DESCRIPTOR\n//\n\n/**\n  @private\n  @constructor\n\n  Objects of this type can implement an interface to responds requests to\n  get and set.  The default implementation handles simple properties.\n\n  You generally won't need to create or subclass this directly.\n*/\nvar Descriptor = Ember.Descriptor = function() {};\n\n// ..........................................................\n// DEFINING PROPERTIES API\n//\n\n/**\n  @private\n\n  NOTE: This is a low-level method used by other parts of the API.  You almost\n  never want to call this method directly.  Instead you should use Ember.mixin()\n  to define new properties.\n\n  Defines a property on an object.  This method works much like the ES5\n  Object.defineProperty() method except that it can also accept computed\n  properties and other special descriptors.\n\n  Normally this method takes only three parameters.  However if you pass an\n  instance of Ember.Descriptor as the third param then you can pass an optional\n  value as the fourth parameter.  This is often more efficient than creating\n  new descriptor hashes for each property.\n\n  ## Examples\n\n      // ES5 compatible mode\n      Ember.defineProperty(contact, 'firstName', {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: 'Charles'\n      });\n\n      // define a simple property\n      Ember.defineProperty(contact, 'lastName', undefined, 'Jolley');\n\n      // define a computed property\n      Ember.defineProperty(contact, 'fullName', Ember.computed(function() {\n        return this.firstName+' '+this.lastName;\n      }).property('firstName', 'lastName').cacheable());\n*/\nEmber.defineProperty = function(obj, keyName, desc, data, meta) {\n  // The first two parameters to defineProperty are mandatory:\n  //\n  // * obj: the object to define this property on. This may be\n  //   a prototype.\n  // * keyName: the name of the property\n  //\n  // One and only one of the following two parameters must be\n  // provided:\n  //\n  // * desc: an instance of Ember.Descriptor (typically a\n  //   computed property) or an ES5 descriptor.\n  // * data: something other than a descriptor, that will\n  //   become the explicit value of this property.\n\n  var descs, existingDesc, watching, value;\n\n  if (!meta) meta = metaFor(obj);\n  descs = meta.descs;\n  existingDesc = meta.descs[keyName];\n  watching = meta.watching[keyName] > 0;\n\n  if (existingDesc instanceof Ember.Descriptor) {\n    existingDesc.teardown(obj, keyName);\n  }\n\n  if (desc instanceof Ember.Descriptor) {\n    value = desc;\n\n    descs[keyName] = desc;\n    if (MANDATORY_SETTER && watching) {\n      objectDefineProperty(obj, keyName, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: undefined // make enumerable\n      });\n    } else {\n      obj[keyName] = undefined; // make enumerable\n    }\n    desc.setup(obj, keyName);\n  } else {\n    descs[keyName] = undefined; // shadow descriptor in proto\n    if (desc == null) {\n      value = data;\n\n      if (MANDATORY_SETTER && watching) {\n        meta.values[keyName] = data;\n        objectDefineProperty(obj, keyName, {\n          configurable: true,\n          enumerable: true,\n          set: function() {\n            Ember.assert('Must use Ember.set() to access this property', false);\n          },\n          get: function() {\n            var meta = this[META_KEY];\n            return meta && meta.values[keyName];\n          }\n        });\n      } else {\n        obj[keyName] = data;\n      }\n    } else {\n      value = desc;\n\n      // compatibility with ES5\n      objectDefineProperty(obj, keyName, desc);\n    }\n  }\n\n  // if key is being watched, override chains that\n  // were initialized with the prototype\n  if (watching) { Ember.overrideChains(obj, keyName, meta); }\n\n  // The `value` passed to the `didDefineProperty` hook is\n  // either the descriptor or data, whichever was passed.\n  if (obj.didDefineProperty) { obj.didDefineProperty(obj, keyName, value); }\n\n  return this;\n};\n\n\n})();\n//@ sourceURL=ember-metal/properties");