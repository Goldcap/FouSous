minispade.register('ember-debug', "(function() {/*global __fail__*/\n\nif ('undefined' === typeof Ember) {\n  Ember = {};\n\n  if ('undefined' !== typeof window) {\n    window.Em = window.Ember = Em = Ember;\n  }\n}\n\nEmber.ENV = 'undefined' === typeof ENV ? {} : ENV;\n\nif (!('MANDATORY_SETTER' in Ember.ENV)) {\n  Ember.ENV.MANDATORY_SETTER = true; // default to true for debug dist\n}\n\n/**\n  Define an assertion that will throw an exception if the condition is not\n  met.  Ember build tools will remove any calls to Ember.assert() when\n  doing a production build. Example:\n\n      // Test for truthiness\n      Ember.assert('Must pass a valid object', obj);\n      // Fail unconditionally\n      Ember.assert('This code path should never be run')\n\n  @static\n  @function\n  @param {String} desc\n    A description of the assertion.  This will become the text of the Error\n    thrown if the assertion fails.\n\n  @param {Boolean} test\n    Must be truthy for the assertion to pass. If falsy, an exception will be\n    thrown.\n*/\nEmber.assert = function(desc, test) {\n  if (!test) throw new Error(\"assertion failed: \"+desc);\n};\n\n\n/**\n  Display a warning with the provided message. Ember build tools will\n  remove any calls to Ember.warn() when doing a production build.\n\n  @static\n  @function\n  @param {String} message\n    A warning to display.\n\n  @param {Boolean} test\n    An optional boolean. If falsy, the warning will be displayed.\n*/\nEmber.warn = function(message, test) {\n  if (!test) {\n    Ember.Logger.warn(\"WARNING: \"+message);\n    if ('trace' in Ember.Logger) Ember.Logger.trace();\n  }\n};\n\n/**\n  Display a deprecation warning with the provided message and a stack trace\n  (Chrome and Firefox only). Ember build tools will remove any calls to\n  Ember.deprecate() when doing a production build.\n\n  @static\n  @function\n  @param {String} message\n    A description of the deprecation.\n\n  @param {Boolean} test\n    An optional boolean. If falsy, the deprecation will be displayed.\n*/\nEmber.deprecate = function(message, test) {\n  if (Ember && Ember.TESTING_DEPRECATION) { return; }\n\n  if (arguments.length === 1) { test = false; }\n  if (test) { return; }\n\n  if (Ember && Ember.ENV.RAISE_ON_DEPRECATION) { throw new Error(message); }\n\n  var error;\n\n  // When using new Error, we can't do the arguments check for Chrome. Alternatives are welcome\n  try { __fail__.fail(); } catch (e) { error = e; }\n\n  if (Ember.LOG_STACKTRACE_ON_DEPRECATION && error.stack) {\n    var stack, stackStr = '';\n    if (error['arguments']) {\n      // Chrome\n      stack = error.stack.replace(/^\\s+at\\s+/gm, '').\n                          replace(/^([^\\(]+?)([\\n$])/gm, '{anonymous}($1)$2').\n                          replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm, '{anonymous}($1)').split('\\n');\n      stack.shift();\n    } else {\n      // Firefox\n      stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').\n                          replace(/^\\(/gm, '{anonymous}(').split('\\n');\n    }\n\n    stackStr = \"\\n    \" + stack.slice(2).join(\"\\n    \");\n    message = message + stackStr;\n  }\n\n  Ember.Logger.warn(\"DEPRECATION: \"+message);\n};\n\n\n\n/**\n  Display a deprecation warning with the provided message and a stack trace\n  (Chrome and Firefox only) when the wrapped method is called.\n\n  Ember build tools will not remove calls to Ember.deprecateFunc(), though\n  no warnings will be shown in production.\n\n  @static\n  @function\n  @param {String} message\n    A description of the deprecation.\n\n  @param {Function} func\n    The function to be deprecated.\n*/\nEmber.deprecateFunc = function(message, func) {\n  return function() {\n    Ember.deprecate(message);\n    return func.apply(this, arguments);\n  };\n};\n\n\nwindow.ember_assert         = Ember.deprecateFunc(\"ember_assert is deprecated. Please use Ember.assert instead.\",               Ember.assert);\nwindow.ember_warn           = Ember.deprecateFunc(\"ember_warn is deprecated. Please use Ember.warn instead.\",                   Ember.warn);\nwindow.ember_deprecate      = Ember.deprecateFunc(\"ember_deprecate is deprecated. Please use Ember.deprecate instead.\",         Ember.deprecate);\nwindow.ember_deprecateFunc  = Ember.deprecateFunc(\"ember_deprecateFunc is deprecated. Please use Ember.deprecateFunc instead.\", Ember.deprecateFunc);\n\n})();\n//@ sourceURL=ember-debug");