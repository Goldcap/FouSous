minispade.register('ember-runtime/system/string', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\n/** @private **/\nvar STRING_DASHERIZE_REGEXP = (/[ _]/g);\nvar STRING_DASHERIZE_CACHE = {};\nvar STRING_DECAMELIZE_REGEXP = (/([a-z])([A-Z])/g);\nvar STRING_CAMELIZE_REGEXP = (/(\\-|_|\\s)+(.)?/g);\nvar STRING_UNDERSCORE_REGEXP_1 = (/([a-z\\d])([A-Z]+)/g);\nvar STRING_UNDERSCORE_REGEXP_2 = (/\\-|\\s+/g);\n\n/**\n  Defines the hash of localized strings for the current language.  Used by\n  the `Ember.String.loc()` helper.  To localize, add string values to this\n  hash.\n\n  @type Hash\n*/\nEmber.STRINGS = {};\n\n/**\n  Defines string helper methods including string formatting and localization.\n  Unless Ember.EXTEND_PROTOTYPES = false these methods will also be added to the\n  String.prototype as well.\n\n  @namespace\n*/\nEmber.String = {\n\n  /**\n    Apply formatting options to the string.  This will look for occurrences\n    of %@ in your string and substitute them with the arguments you pass into\n    this method.  If you want to control the specific order of replacement,\n    you can add a number after the key as well to indicate which argument\n    you want to insert.\n\n    Ordered insertions are most useful when building loc strings where values\n    you need to insert may appear in different orders.\n\n        \"Hello %@ %@\".fmt('John', 'Doe') => \"Hello John Doe\"\n        \"Hello %@2, %@1\".fmt('John', 'Doe') => \"Hello Doe, John\"\n\n    @param {Object...} [args]\n    @returns {String} formatted string\n  */\n  fmt: function(str, formats) {\n    // first, replace any ORDERED replacements.\n    var idx  = 0; // the current index for non-numerical replacements\n    return str.replace(/%@([0-9]+)?/g, function(s, argIndex) {\n      argIndex = (argIndex) ? parseInt(argIndex,0) - 1 : idx++ ;\n      s = formats[argIndex];\n      return ((s === null) ? '(null)' : (s === undefined) ? '' : s).toString();\n    }) ;\n  },\n\n  /**\n    Formats the passed string, but first looks up the string in the localized\n    strings hash.  This is a convenient way to localize text.  See\n    `Ember.String.fmt()` for more information on formatting.\n\n    Note that it is traditional but not required to prefix localized string\n    keys with an underscore or other character so you can easily identify\n    localized strings.\n\n        Ember.STRINGS = {\n          '_Hello World': 'Bonjour le monde',\n          '_Hello %@ %@': 'Bonjour %@ %@'\n        };\n\n        Ember.String.loc(\"_Hello World\");\n        => 'Bonjour le monde';\n\n        Ember.String.loc(\"_Hello %@ %@\", [\"John\", \"Smith\"]);\n        => \"Bonjour John Smith\";\n\n    @param {String} str\n      The string to format\n\n    @param {Array} formats\n      Optional array of parameters to interpolate into string.\n\n    @returns {String} formatted string\n  */\n  loc: function(str, formats) {\n    str = Ember.STRINGS[str] || str;\n    return Ember.String.fmt(str, formats) ;\n  },\n\n  /**\n    Splits a string into separate units separated by spaces, eliminating any\n    empty strings in the process.  This is a convenience method for split that\n    is mostly useful when applied to the String.prototype.\n\n        Ember.String.w(\"alpha beta gamma\").forEach(function(key) {\n          console.log(key);\n        });\n        > alpha\n        > beta\n        > gamma\n\n    @param {String} str \n      The string to split\n\n    @returns {String} split string\n  */\n  w: function(str) { return str.split(/\\s+/); },\n\n  /**\n    Converts a camelized string into all lower case separated by underscores.\n    \n        'innerHTML'.decamelize()         => 'inner_html'\n        'action_name'.decamelize()       => 'action_name'\n        'css-class-name'.decamelize()    => 'css-class-name'\n        'my favorite items'.decamelize() => 'my favorite items'\n\n    @param {String} str\n      The string to decamelize.\n\n    @returns {String} the decamelized string.\n  */\n  decamelize: function(str) {\n    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n  },\n\n  /**\n    Replaces underscores or spaces with dashes.\n    \n        'innerHTML'.dasherize()         => 'inner-html'\n        'action_name'.dasherize()       => 'action-name'\n        'css-class-name'.dasherize()    => 'css-class-name'\n        'my favorite items'.dasherize() => 'my-favorite-items'\n\n    @param {String} str\n      The string to dasherize.\n\n    @returns {String} the dasherized string.\n  */\n  dasherize: function(str) {\n    var cache = STRING_DASHERIZE_CACHE,\n        ret   = cache[str];\n\n    if (ret) {\n      return ret;\n    } else {\n      ret = Ember.String.decamelize(str).replace(STRING_DASHERIZE_REGEXP,'-');\n      cache[str] = ret;\n    }\n\n    return ret;\n  },\n\n  /**\n    Returns the lowerCaseCamel form of a string.\n\n        'innerHTML'.camelize()         => 'innerHTML'\n        'action_name'.camelize()       => 'actionName'\n        'css-class-name'.camelize()    => 'cssClassName'\n        'my favorite items'.camelize() => 'myFavoriteItems'\n\n    @param {String} str\n      The string to camelize.\n\n    @returns {String} the camelized string.\n  */\n  camelize: function(str) {\n    return str.replace(STRING_CAMELIZE_REGEXP, function(match, separator, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n  },\n\n  /**\n    Returns the UpperCamelCase form of a string.\n\n        'innerHTML'.classify()         => 'InnerHTML'\n        'action_name'.classify()       => 'ActionName'\n        'css-class-name'.classify()    => 'CssClassName'\n        'my favorite items'.classift() => 'MyFavoriteItems'\n  */\n  classify: function(str) {\n    var camelized = Ember.String.camelize(str);\n    return camelized.charAt(0).toUpperCase() + camelized.substr(1);\n  },\n\n  /**\n    More general than decamelize. Returns the lower_case_and_underscored\n    form of a string.\n\n        'innerHTML'.underscore()         => 'inner_html'\n        'action_name'.underscore()       => 'action_name'\n        'css-class-name'.underscore()    => 'css_class_name'\n        'my favorite items'.underscore() => 'my_favorite_items'\n\n    @param {String} str\n      The string to underscore.\n\n    @returns {String} the underscored string.\n  */\n  underscore: function(str) {\n    return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').\n      replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();\n  }\n};\n\n})();\n//@ sourceURL=ember-runtime/system/string");