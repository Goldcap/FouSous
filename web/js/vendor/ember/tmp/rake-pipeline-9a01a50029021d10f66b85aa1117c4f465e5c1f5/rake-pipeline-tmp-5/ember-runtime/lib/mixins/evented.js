minispade.register('ember-runtime/mixins/evented', "(function() {/**\n @class\n\n @extends Ember.Mixin\n */\nEmber.Evented = Ember.Mixin.create(\n  /** @scope Ember.Evented.prototype */ {\n  on: function(name, target, method) {\n    Ember.addListener(this, name, target, method);\n  },\n\n  one: function(name, target, method) {\n    if (!method) {\n      method = target;\n      target = null;\n    }\n\n    var self = this;\n    var wrapped = function() {\n      Ember.removeListener(self, name, target, wrapped);\n\n      if ('string' === typeof method) { method = this[method]; }\n\n      // Internally, a `null` target means that the target is\n      // the first parameter to addListener. That means that\n      // the `this` passed into this function is the target\n      // determined by the event system.\n      method.apply(this, arguments);\n    };\n\n    this.on(name, target, wrapped);\n  },\n\n  trigger: function(name) {\n    var args = [], i, l;\n    for (i = 1, l = arguments.length; i < l; i++) {\n      args.push(arguments[i]);\n    }\n    Ember.sendEvent(this, name, args);\n  },\n\n  fire: function(name) {\n    Ember.deprecate(\"Ember.Evented#fire() has been deprecated in favor of trigger() for compatibility with jQuery. It will be removed in 1.0. Please update your code to call trigger() instead.\");\n    this.trigger.apply(this, arguments);\n  },\n\n  off: function(name, target, method) {\n    Ember.removeListener(this, name, target, method);\n  },\n\n  has: function(name) {\n    return Ember.hasListeners(this, name);\n  }\n});\n\n})();\n//@ sourceURL=ember-runtime/mixins/evented");