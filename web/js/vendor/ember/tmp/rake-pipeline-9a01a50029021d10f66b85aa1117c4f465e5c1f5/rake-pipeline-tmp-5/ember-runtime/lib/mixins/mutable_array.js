minispade.register('ember-runtime/mixins/mutable_array', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/mixins/array');\nminispade.require('ember-runtime/mixins/mutable_enumerable');\n\n// ..........................................................\n// CONSTANTS\n//\n\nvar OUT_OF_RANGE_EXCEPTION = \"Index out of range\" ;\nvar EMPTY = [];\n\n// ..........................................................\n// HELPERS\n//\n\nvar get = Ember.get, set = Ember.set, forEach = Ember.EnumerableUtils.forEach;\n\n/**\n  @class\n\n  This mixin defines the API for modifying array-like objects.  These methods\n  can be applied only to a collection that keeps its items in an ordered set.\n\n  Note that an Array can change even if it does not implement this mixin.\n  For example, one might implement a SparseArray that cannot be directly\n  modified, but if its underlying enumerable changes, it will change also.\n\n  @extends Ember.Mixin\n  @extends Ember.Array\n  @extends Ember.MutableEnumerable\n*/\nEmber.MutableArray = Ember.Mixin.create(Ember.Array, Ember.MutableEnumerable,\n  /** @scope Ember.MutableArray.prototype */ {\n\n  /**\n    __Required.__ You must implement this method to apply this mixin.\n\n    This is one of the primitives you must implement to support Ember.Array.  You\n    should replace amt objects started at idx with the objects in the passed\n    array.  You should also call this.enumerableContentDidChange() ;\n\n    @function\n\n    @param {Number} idx\n      Starting index in the array to replace.  If idx >= length, then append\n      to the end of the array.\n\n    @param {Number} amt\n      Number of elements that should be removed from the array, starting at\n      *idx*.\n\n    @param {Array} objects\n      An array of zero or more objects that should be inserted into the array\n      at *idx*\n  */\n  replace: Ember.required(),\n\n  /**\n    Remove all elements from self. This is useful if you\n    want to reuse an existing array without having to recreate it.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        color.length();  => 3\n        colors.clear();  => []\n        colors.length(); => 0\n\n    @returns {Ember.Array} An empty Array. \n  */\n  clear: function () {\n    var len = get(this, 'length');\n    if (len === 0) return this;\n    this.replace(0, len, EMPTY);\n    return this;\n  },\n\n  /**\n    This will use the primitive replace() method to insert an object at the\n    specified index.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.insertAt(2, \"yellow\"); => [\"red\", \"green\", \"yellow\", \"blue\"]\n        colors.insertAt(5, \"orange\"); => Error: Index out of range\n\n    @param {Number} idx index of insert the object at.\n    @param {Object} object object to insert\n  */\n  insertAt: function(idx, object) {\n    if (idx > get(this, 'length')) throw new Error(OUT_OF_RANGE_EXCEPTION) ;\n    this.replace(idx, 0, [object]) ;\n    return this ;\n  },\n\n  /**\n    Remove an object at the specified index using the replace() primitive\n    method.  You can pass either a single index, or a start and a length.\n\n    If you pass a start and length that is beyond the\n    length this method will throw an Ember.OUT_OF_RANGE_EXCEPTION\n\n        var colors = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"];\n        colors.removeAt(0); => [\"green\", \"blue\", \"yellow\", \"orange\"]\n        colors.removeAt(2, 2); => [\"green\", \"blue\"]\n        colors.removeAt(4, 2); => Error: Index out of range\n\n    @param {Number} start index, start of range\n    @param {Number} len length of passing range\n    @returns {Object} receiver\n  */\n  removeAt: function(start, len) {\n\n    var delta = 0;\n\n    if ('number' === typeof start) {\n\n      if ((start < 0) || (start >= get(this, 'length'))) {\n        throw new Error(OUT_OF_RANGE_EXCEPTION);\n      }\n\n      // fast case\n      if (len === undefined) len = 1;\n      this.replace(start, len, EMPTY);\n    }\n\n    return this ;\n  },\n\n  /**\n    Push the object onto the end of the array.  Works just like push() but it\n    is KVO-compliant.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.pushObject(\"black\"); => [\"red\", \"green\", \"blue\", \"black\"]\n        colors.pushObject([\"yellow\", \"orange\"]); => [\"red\", \"green\", \"blue\", \"black\", [\"yellow\", \"orange\"]]\n\n  */\n  pushObject: function(obj) {\n    this.insertAt(get(this, 'length'), obj) ;\n    return obj ;\n  },\n\n  /**\n    Add the objects in the passed numerable to the end of the array.  Defers\n    notifying observers of the change until all objects are added.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.pushObjects(\"black\"); => [\"red\", \"green\", \"blue\", \"black\"]\n        colors.pushObjects([\"yellow\", \"orange\"]); => [\"red\", \"green\", \"blue\", \"black\", \"yellow\", \"orange\"]\n\n    @param {Ember.Enumerable} objects the objects to add\n    @returns {Ember.Array} receiver\n  */\n  pushObjects: function(objects) {\n    this.replace(get(this, 'length'), 0, objects);\n    return this;\n  },\n\n  /**\n    Pop object from array or nil if none are left.  Works just like pop() but\n    it is KVO-compliant.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.popObject(); => \"blue\"\n        console.log(colors); => [\"red\", \"green\"]\n\n  */\n  popObject: function() {\n    var len = get(this, 'length') ;\n    if (len === 0) return null ;\n\n    var ret = this.objectAt(len-1) ;\n    this.removeAt(len-1, 1) ;\n    return ret ;\n  },\n\n  /**\n    Shift an object from start of array or nil if none are left.  Works just\n    like shift() but it is KVO-compliant.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.shiftObject(); => \"red\"\n        console.log(colors); => [\"green\", \"blue\"]\n\n  */\n  shiftObject: function() {\n    if (get(this, 'length') === 0) return null ;\n    var ret = this.objectAt(0) ;\n    this.removeAt(0) ;\n    return ret ;\n  },\n\n  /**\n    Unshift an object to start of array.  Works just like unshift() but it is\n    KVO-compliant.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.unshiftObject(\"yellow\"); => [\"yellow\", \"red\", \"green\", \"blue\"]\n        colors.unshiftObject([\"black\", \"white\"]); => [[\"black\", \"white\"], \"yellow\", \"red\", \"green\", \"blue\"]\n\n  */\n  unshiftObject: function(obj) {\n    this.insertAt(0, obj) ;\n    return obj ;\n  },\n\n  /**\n    Adds the named objects to the beginning of the array.  Defers notifying\n    observers until all objects have been added.\n\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.unshiftObjects([\"black\", \"white\"]); => [\"black\", \"white\", \"red\", \"green\", \"blue\"]\n        colors.unshiftObjects(\"yellow\"); => Type Error: 'undefined' is not a function\n\n    @param {Ember.Enumerable} objects the objects to add\n    @returns {Ember.Array} receiver\n  */\n  unshiftObjects: function(objects) {\n    this.replace(0, 0, objects);\n    return this;\n  },\n\n  /**\n    Reverse objects in the array.  Works just like reverse() but it is\n    KVO-compliant.\n\n    @return {Ember.Array} receiver\n   */\n  reverseObjects: function() {\n    var len = get(this, 'length');\n    if (len === 0) return this;\n    var objects = this.toArray().reverse();\n    this.replace(0, len, objects);\n    return this;\n  },\n\n  // ..........................................................\n  // IMPLEMENT Ember.MutableEnumerable\n  //\n\n  /** @private (nodoc) */\n  removeObject: function(obj) {\n    var loc = get(this, 'length') || 0;\n    while(--loc >= 0) {\n      var curObject = this.objectAt(loc) ;\n      if (curObject === obj) this.removeAt(loc) ;\n    }\n    return this ;\n  },\n\n  /** @private (nodoc) */\n  addObject: function(obj) {\n    if (!this.contains(obj)) this.pushObject(obj);\n    return this ;\n  }\n\n});\n\n\n})();\n//@ sourceURL=ember-runtime/mixins/mutable_array");