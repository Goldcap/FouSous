minispade.register('ember-runtime/mixins/mutable_enumerable', "(function() {// ==========================================================================\n// Project:  Ember Runtime\n// Copyright: Â©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\nminispade.require('ember-runtime/mixins/enumerable');\n\nvar forEach = Ember.EnumerableUtils.forEach;\n\n/**\n  @class\n\n  This mixin defines the API for modifying generic enumerables.  These methods\n  can be applied to an object regardless of whether it is ordered or\n  unordered.\n\n  Note that an Enumerable can change even if it does not implement this mixin.\n  For example, a MappedEnumerable cannot be directly modified but if its\n  underlying enumerable changes, it will change also.\n\n  ## Adding Objects\n\n  To add an object to an enumerable, use the addObject() method.  This\n  method will only add the object to the enumerable if the object is not\n  already present and the object if of a type supported by the enumerable.\n\n      set.addObject(contact);\n\n  ## Removing Objects\n\n  To remove an object form an enumerable, use the removeObject() method.  This\n  will only remove the object if it is already in the enumerable, otherwise\n  this method has no effect.\n\n      set.removeObject(contact);\n\n  ## Implementing In Your Own Code\n\n  If you are implementing an object and want to support this API, just include\n  this mixin in your class and implement the required methods.  In your unit\n  tests, be sure to apply the Ember.MutableEnumerableTests to your object.\n\n  @extends Ember.Mixin\n  @extends Ember.Enumerable\n*/\nEmber.MutableEnumerable = Ember.Mixin.create(Ember.Enumerable,\n  /** @scope Ember.MutableEnumerable.prototype */ {\n\n  /**\n    __Required.__ You must implement this method to apply this mixin.\n\n    Attempts to add the passed object to the receiver if the object is not\n    already present in the collection. If the object is present, this method\n    has no effect.\n\n    If the passed object is of a type not supported by the receiver\n    then this method should raise an exception.\n\n    @function\n\n    @param {Object} object\n      The object to add to the enumerable.\n\n    @returns {Object} the passed object\n  */\n  addObject: Ember.required(Function),\n\n  /**\n    Adds each object in the passed enumerable to the receiver.\n\n    @param {Ember.Enumerable} objects the objects to add.\n    @returns {Object} receiver\n  */\n  addObjects: function(objects) {\n    Ember.beginPropertyChanges(this);\n    forEach(objects, function(obj) { this.addObject(obj); }, this);\n    Ember.endPropertyChanges(this);\n    return this;\n  },\n\n  /**\n    __Required.__ You must implement this method to apply this mixin.\n\n    Attempts to remove the passed object from the receiver collection if the\n    object is in present in the collection.  If the object is not present,\n    this method has no effect.\n\n    If the passed object is of a type not supported by the receiver\n    then this method should raise an exception.\n\n    @function\n\n    @param {Object} object\n      The object to remove from the enumerable.\n\n    @returns {Object} the passed object\n  */\n  removeObject: Ember.required(Function),\n\n\n  /**\n    Removes each objects in the passed enumerable from the receiver.\n\n    @param {Ember.Enumerable} objects the objects to remove\n    @returns {Object} receiver\n  */\n  removeObjects: function(objects) {\n    Ember.beginPropertyChanges(this);\n    forEach(objects, function(obj) { this.removeObject(obj); }, this);\n    Ember.endPropertyChanges(this);\n    return this;\n  }\n\n});\n\n})();\n//@ sourceURL=ember-runtime/mixins/mutable_enumerable");